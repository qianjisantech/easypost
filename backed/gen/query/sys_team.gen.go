// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newSysTeam(db *gorm.DB, opts ...gen.DOOption) sysTeam {
	_sysTeam := sysTeam{}

	_sysTeam.sysTeamDo.UseDB(db, opts...)
	_sysTeam.sysTeamDo.UseModel(&model.SysTeam{})

	tableName := _sysTeam.sysTeamDo.TableName()
	_sysTeam.ALL = field.NewAsterisk(tableName)
	_sysTeam.ID = field.NewInt64(tableName, "id")
	_sysTeam.Name = field.NewString(tableName, "name")
	_sysTeam.ManagerID = field.NewString(tableName, "manager_id")
	_sysTeam.CreateBy = field.NewString(tableName, "create_by")
	_sysTeam.CreateTime = field.NewTime(tableName, "create_time")
	_sysTeam.UpdateBy = field.NewString(tableName, "update_by")
	_sysTeam.UpdateTime = field.NewTime(tableName, "update_time")
	_sysTeam.IsDeleted = field.NewBool(tableName, "is_deleted")

	_sysTeam.fillFieldMap()

	return _sysTeam
}

type sysTeam struct {
	sysTeamDo sysTeamDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键id
	Name       field.String // 团队名称
	ManagerID  field.String // 负责人
	CreateBy   field.String // 创建人
	CreateTime field.Time   // 创建时间
	UpdateBy   field.String // 更新人
	UpdateTime field.Time   // 更新时间
	IsDeleted  field.Bool   // 逻辑删除 0为未删除 1为已删除

	fieldMap map[string]field.Expr
}

func (s sysTeam) Table(newTableName string) *sysTeam {
	s.sysTeamDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysTeam) As(alias string) *sysTeam {
	s.sysTeamDo.DO = *(s.sysTeamDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysTeam) updateTableName(table string) *sysTeam {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.ManagerID = field.NewString(table, "manager_id")
	s.CreateBy = field.NewString(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewString(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewBool(table, "is_deleted")

	s.fillFieldMap()

	return s
}

func (s *sysTeam) WithContext(ctx context.Context) ISysTeamDo { return s.sysTeamDo.WithContext(ctx) }

func (s sysTeam) TableName() string { return s.sysTeamDo.TableName() }

func (s sysTeam) Alias() string { return s.sysTeamDo.Alias() }

func (s sysTeam) Columns(cols ...field.Expr) gen.Columns { return s.sysTeamDo.Columns(cols...) }

func (s *sysTeam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysTeam) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["manager_id"] = s.ManagerID
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
}

func (s sysTeam) clone(db *gorm.DB) sysTeam {
	s.sysTeamDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysTeam) replaceDB(db *gorm.DB) sysTeam {
	s.sysTeamDo.ReplaceDB(db)
	return s
}

type sysTeamDo struct{ gen.DO }

type ISysTeamDo interface {
	gen.SubQuery
	Debug() ISysTeamDo
	WithContext(ctx context.Context) ISysTeamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysTeamDo
	WriteDB() ISysTeamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysTeamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysTeamDo
	Not(conds ...gen.Condition) ISysTeamDo
	Or(conds ...gen.Condition) ISysTeamDo
	Select(conds ...field.Expr) ISysTeamDo
	Where(conds ...gen.Condition) ISysTeamDo
	Order(conds ...field.Expr) ISysTeamDo
	Distinct(cols ...field.Expr) ISysTeamDo
	Omit(cols ...field.Expr) ISysTeamDo
	Join(table schema.Tabler, on ...field.Expr) ISysTeamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysTeamDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysTeamDo
	Group(cols ...field.Expr) ISysTeamDo
	Having(conds ...gen.Condition) ISysTeamDo
	Limit(limit int) ISysTeamDo
	Offset(offset int) ISysTeamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTeamDo
	Unscoped() ISysTeamDo
	Create(values ...*model.SysTeam) error
	CreateInBatches(values []*model.SysTeam, batchSize int) error
	Save(values ...*model.SysTeam) error
	First() (*model.SysTeam, error)
	Take() (*model.SysTeam, error)
	Last() (*model.SysTeam, error)
	Find() ([]*model.SysTeam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTeam, err error)
	FindInBatches(result *[]*model.SysTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysTeam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysTeamDo
	Assign(attrs ...field.AssignExpr) ISysTeamDo
	Joins(fields ...field.RelationField) ISysTeamDo
	Preload(fields ...field.RelationField) ISysTeamDo
	FirstOrInit() (*model.SysTeam, error)
	FirstOrCreate() (*model.SysTeam, error)
	FindByPage(offset int, limit int) (result []*model.SysTeam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysTeamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysTeamDo) Debug() ISysTeamDo {
	return s.withDO(s.DO.Debug())
}

func (s sysTeamDo) WithContext(ctx context.Context) ISysTeamDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysTeamDo) ReadDB() ISysTeamDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysTeamDo) WriteDB() ISysTeamDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysTeamDo) Session(config *gorm.Session) ISysTeamDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysTeamDo) Clauses(conds ...clause.Expression) ISysTeamDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysTeamDo) Returning(value interface{}, columns ...string) ISysTeamDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysTeamDo) Not(conds ...gen.Condition) ISysTeamDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysTeamDo) Or(conds ...gen.Condition) ISysTeamDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysTeamDo) Select(conds ...field.Expr) ISysTeamDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysTeamDo) Where(conds ...gen.Condition) ISysTeamDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysTeamDo) Order(conds ...field.Expr) ISysTeamDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysTeamDo) Distinct(cols ...field.Expr) ISysTeamDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysTeamDo) Omit(cols ...field.Expr) ISysTeamDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysTeamDo) Join(table schema.Tabler, on ...field.Expr) ISysTeamDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysTeamDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysTeamDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysTeamDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysTeamDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysTeamDo) Group(cols ...field.Expr) ISysTeamDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysTeamDo) Having(conds ...gen.Condition) ISysTeamDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysTeamDo) Limit(limit int) ISysTeamDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysTeamDo) Offset(offset int) ISysTeamDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysTeamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTeamDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysTeamDo) Unscoped() ISysTeamDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysTeamDo) Create(values ...*model.SysTeam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysTeamDo) CreateInBatches(values []*model.SysTeam, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysTeamDo) Save(values ...*model.SysTeam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysTeamDo) First() (*model.SysTeam, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeam), nil
	}
}

func (s sysTeamDo) Take() (*model.SysTeam, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeam), nil
	}
}

func (s sysTeamDo) Last() (*model.SysTeam, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeam), nil
	}
}

func (s sysTeamDo) Find() ([]*model.SysTeam, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysTeam), err
}

func (s sysTeamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTeam, err error) {
	buf := make([]*model.SysTeam, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysTeamDo) FindInBatches(result *[]*model.SysTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysTeamDo) Attrs(attrs ...field.AssignExpr) ISysTeamDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysTeamDo) Assign(attrs ...field.AssignExpr) ISysTeamDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysTeamDo) Joins(fields ...field.RelationField) ISysTeamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysTeamDo) Preload(fields ...field.RelationField) ISysTeamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysTeamDo) FirstOrInit() (*model.SysTeam, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeam), nil
	}
}

func (s sysTeamDo) FirstOrCreate() (*model.SysTeam, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeam), nil
	}
}

func (s sysTeamDo) FindByPage(offset int, limit int) (result []*model.SysTeam, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysTeamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysTeamDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysTeamDo) Delete(models ...*model.SysTeam) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysTeamDo) withDO(do gen.Dao) *sysTeamDo {
	s.DO = *do.(*gen.DO)
	return s
}
