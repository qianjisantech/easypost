// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newSysTeamMember(db *gorm.DB, opts ...gen.DOOption) sysTeamMember {
	_sysTeamMember := sysTeamMember{}

	_sysTeamMember.sysTeamMemberDo.UseDB(db, opts...)
	_sysTeamMember.sysTeamMemberDo.UseModel(&model.SysTeamMember{})

	tableName := _sysTeamMember.sysTeamMemberDo.TableName()
	_sysTeamMember.ALL = field.NewAsterisk(tableName)
	_sysTeamMember.ID = field.NewInt64(tableName, "id")
	_sysTeamMember.Username = field.NewString(tableName, "username")
	_sysTeamMember.IsDeleted = field.NewBool(tableName, "is_deleted")
	_sysTeamMember.CreateBy = field.NewString(tableName, "create_by")
	_sysTeamMember.CreateTime = field.NewTime(tableName, "create_time")
	_sysTeamMember.UpdateBy = field.NewString(tableName, "update_by")
	_sysTeamMember.UpdateTime = field.NewTime(tableName, "update_time")
	_sysTeamMember.WorkNo = field.NewString(tableName, "work_no")
	_sysTeamMember.Email = field.NewString(tableName, "email")
	_sysTeamMember.Phone = field.NewString(tableName, "phone")
	_sysTeamMember.Name = field.NewString(tableName, "name")
	_sysTeamMember.State = field.NewInt32(tableName, "state")
	_sysTeamMember.TeamID = field.NewInt64(tableName, "team_id")
	_sysTeamMember.UserID = field.NewInt64(tableName, "user_id")
	_sysTeamMember.Permission = field.NewInt32(tableName, "permission")

	_sysTeamMember.fillFieldMap()

	return _sysTeamMember
}

type sysTeamMember struct {
	sysTeamMemberDo sysTeamMemberDo

	ALL        field.Asterisk
	ID         field.Int64
	Username   field.String // 用户名
	IsDeleted  field.Bool   // 逻辑删除
	CreateBy   field.String // 创建人
	CreateTime field.Time   // 创建时间
	UpdateBy   field.String // 更新人
	UpdateTime field.Time   // 更新时间
	WorkNo     field.String // 工号
	Email      field.String // 邮箱
	Phone      field.String // 手机号
	Name       field.String // 姓名
	State      field.Int32  // 0为游客,1为待定,2为成员
	TeamID     field.Int64  // 团队id
	UserID     field.Int64
	Permission field.Int32 // 团队权限

	fieldMap map[string]field.Expr
}

func (s sysTeamMember) Table(newTableName string) *sysTeamMember {
	s.sysTeamMemberDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysTeamMember) As(alias string) *sysTeamMember {
	s.sysTeamMemberDo.DO = *(s.sysTeamMemberDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysTeamMember) updateTableName(table string) *sysTeamMember {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Username = field.NewString(table, "username")
	s.IsDeleted = field.NewBool(table, "is_deleted")
	s.CreateBy = field.NewString(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewString(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.WorkNo = field.NewString(table, "work_no")
	s.Email = field.NewString(table, "email")
	s.Phone = field.NewString(table, "phone")
	s.Name = field.NewString(table, "name")
	s.State = field.NewInt32(table, "state")
	s.TeamID = field.NewInt64(table, "team_id")
	s.UserID = field.NewInt64(table, "user_id")
	s.Permission = field.NewInt32(table, "permission")

	s.fillFieldMap()

	return s
}

func (s *sysTeamMember) WithContext(ctx context.Context) ISysTeamMemberDo {
	return s.sysTeamMemberDo.WithContext(ctx)
}

func (s sysTeamMember) TableName() string { return s.sysTeamMemberDo.TableName() }

func (s sysTeamMember) Alias() string { return s.sysTeamMemberDo.Alias() }

func (s sysTeamMember) Columns(cols ...field.Expr) gen.Columns {
	return s.sysTeamMemberDo.Columns(cols...)
}

func (s *sysTeamMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysTeamMember) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["work_no"] = s.WorkNo
	s.fieldMap["email"] = s.Email
	s.fieldMap["phone"] = s.Phone
	s.fieldMap["name"] = s.Name
	s.fieldMap["state"] = s.State
	s.fieldMap["team_id"] = s.TeamID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["permission"] = s.Permission
}

func (s sysTeamMember) clone(db *gorm.DB) sysTeamMember {
	s.sysTeamMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysTeamMember) replaceDB(db *gorm.DB) sysTeamMember {
	s.sysTeamMemberDo.ReplaceDB(db)
	return s
}

type sysTeamMemberDo struct{ gen.DO }

type ISysTeamMemberDo interface {
	gen.SubQuery
	Debug() ISysTeamMemberDo
	WithContext(ctx context.Context) ISysTeamMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysTeamMemberDo
	WriteDB() ISysTeamMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysTeamMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysTeamMemberDo
	Not(conds ...gen.Condition) ISysTeamMemberDo
	Or(conds ...gen.Condition) ISysTeamMemberDo
	Select(conds ...field.Expr) ISysTeamMemberDo
	Where(conds ...gen.Condition) ISysTeamMemberDo
	Order(conds ...field.Expr) ISysTeamMemberDo
	Distinct(cols ...field.Expr) ISysTeamMemberDo
	Omit(cols ...field.Expr) ISysTeamMemberDo
	Join(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo
	Group(cols ...field.Expr) ISysTeamMemberDo
	Having(conds ...gen.Condition) ISysTeamMemberDo
	Limit(limit int) ISysTeamMemberDo
	Offset(offset int) ISysTeamMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTeamMemberDo
	Unscoped() ISysTeamMemberDo
	Create(values ...*model.SysTeamMember) error
	CreateInBatches(values []*model.SysTeamMember, batchSize int) error
	Save(values ...*model.SysTeamMember) error
	First() (*model.SysTeamMember, error)
	Take() (*model.SysTeamMember, error)
	Last() (*model.SysTeamMember, error)
	Find() ([]*model.SysTeamMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTeamMember, err error)
	FindInBatches(result *[]*model.SysTeamMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysTeamMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysTeamMemberDo
	Assign(attrs ...field.AssignExpr) ISysTeamMemberDo
	Joins(fields ...field.RelationField) ISysTeamMemberDo
	Preload(fields ...field.RelationField) ISysTeamMemberDo
	FirstOrInit() (*model.SysTeamMember, error)
	FirstOrCreate() (*model.SysTeamMember, error)
	FindByPage(offset int, limit int) (result []*model.SysTeamMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysTeamMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysTeamMemberDo) Debug() ISysTeamMemberDo {
	return s.withDO(s.DO.Debug())
}

func (s sysTeamMemberDo) WithContext(ctx context.Context) ISysTeamMemberDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysTeamMemberDo) ReadDB() ISysTeamMemberDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysTeamMemberDo) WriteDB() ISysTeamMemberDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysTeamMemberDo) Session(config *gorm.Session) ISysTeamMemberDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysTeamMemberDo) Clauses(conds ...clause.Expression) ISysTeamMemberDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysTeamMemberDo) Returning(value interface{}, columns ...string) ISysTeamMemberDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysTeamMemberDo) Not(conds ...gen.Condition) ISysTeamMemberDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysTeamMemberDo) Or(conds ...gen.Condition) ISysTeamMemberDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysTeamMemberDo) Select(conds ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysTeamMemberDo) Where(conds ...gen.Condition) ISysTeamMemberDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysTeamMemberDo) Order(conds ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysTeamMemberDo) Distinct(cols ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysTeamMemberDo) Omit(cols ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysTeamMemberDo) Join(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysTeamMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysTeamMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysTeamMemberDo) Group(cols ...field.Expr) ISysTeamMemberDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysTeamMemberDo) Having(conds ...gen.Condition) ISysTeamMemberDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysTeamMemberDo) Limit(limit int) ISysTeamMemberDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysTeamMemberDo) Offset(offset int) ISysTeamMemberDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysTeamMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTeamMemberDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysTeamMemberDo) Unscoped() ISysTeamMemberDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysTeamMemberDo) Create(values ...*model.SysTeamMember) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysTeamMemberDo) CreateInBatches(values []*model.SysTeamMember, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysTeamMemberDo) Save(values ...*model.SysTeamMember) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysTeamMemberDo) First() (*model.SysTeamMember, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) Take() (*model.SysTeamMember, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) Last() (*model.SysTeamMember, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) Find() ([]*model.SysTeamMember, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysTeamMember), err
}

func (s sysTeamMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTeamMember, err error) {
	buf := make([]*model.SysTeamMember, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysTeamMemberDo) FindInBatches(result *[]*model.SysTeamMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysTeamMemberDo) Attrs(attrs ...field.AssignExpr) ISysTeamMemberDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysTeamMemberDo) Assign(attrs ...field.AssignExpr) ISysTeamMemberDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysTeamMemberDo) Joins(fields ...field.RelationField) ISysTeamMemberDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysTeamMemberDo) Preload(fields ...field.RelationField) ISysTeamMemberDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysTeamMemberDo) FirstOrInit() (*model.SysTeamMember, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) FirstOrCreate() (*model.SysTeamMember, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTeamMember), nil
	}
}

func (s sysTeamMemberDo) FindByPage(offset int, limit int) (result []*model.SysTeamMember, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysTeamMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysTeamMemberDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysTeamMemberDo) Delete(models ...*model.SysTeamMember) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysTeamMemberDo) withDO(do gen.Dao) *sysTeamMemberDo {
	s.DO = *do.(*gen.DO)
	return s
}
