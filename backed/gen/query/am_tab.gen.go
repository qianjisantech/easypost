// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmTab(db *gorm.DB, opts ...gen.DOOption) amTab {
	_amTab := amTab{}

	_amTab.amTabDo.UseDB(db, opts...)
	_amTab.amTabDo.UseModel(&model.AmTab{})

	tableName := _amTab.amTabDo.TableName()
	_amTab.ALL = field.NewAsterisk(tableName)
	_amTab.ID = field.NewInt64(tableName, "id")
	_amTab.CreateBy = field.NewString(tableName, "create_by")
	_amTab.UpdateBy = field.NewString(tableName, "update_by")
	_amTab.CreateTime = field.NewTime(tableName, "create_time")
	_amTab.UpdateTime = field.NewTime(tableName, "update_time")
	_amTab.UserID = field.NewInt64(tableName, "user_id")
	_amTab.IsActive = field.NewInt32(tableName, "is_active")
	_amTab.ProjectID = field.NewString(tableName, "project_id")
	_amTab.ContentType = field.NewString(tableName, "content_type")
	_amTab.Label = field.NewString(tableName, "label")
	_amTab.Status = field.NewInt32(tableName, "status")

	_amTab.fillFieldMap()

	return _amTab
}

// amTab tab表
type amTab struct {
	amTabDo amTabDo

	ALL         field.Asterisk
	ID          field.Int64
	CreateBy    field.String
	UpdateBy    field.String
	CreateTime  field.Time
	UpdateTime  field.Time
	UserID      field.Int64
	IsActive    field.Int32 // 是否被激活 0为否 1为是
	ProjectID   field.String
	ContentType field.String
	Label       field.String
	Status      field.Int32

	fieldMap map[string]field.Expr
}

func (a amTab) Table(newTableName string) *amTab {
	a.amTabDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amTab) As(alias string) *amTab {
	a.amTabDo.DO = *(a.amTabDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amTab) updateTableName(table string) *amTab {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreateBy = field.NewString(table, "create_by")
	a.UpdateBy = field.NewString(table, "update_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.UserID = field.NewInt64(table, "user_id")
	a.IsActive = field.NewInt32(table, "is_active")
	a.ProjectID = field.NewString(table, "project_id")
	a.ContentType = field.NewString(table, "content_type")
	a.Label = field.NewString(table, "label")
	a.Status = field.NewInt32(table, "status")

	a.fillFieldMap()

	return a
}

func (a *amTab) WithContext(ctx context.Context) IAmTabDo { return a.amTabDo.WithContext(ctx) }

func (a amTab) TableName() string { return a.amTabDo.TableName() }

func (a amTab) Alias() string { return a.amTabDo.Alias() }

func (a amTab) Columns(cols ...field.Expr) gen.Columns { return a.amTabDo.Columns(cols...) }

func (a *amTab) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amTab) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["is_active"] = a.IsActive
	a.fieldMap["project_id"] = a.ProjectID
	a.fieldMap["content_type"] = a.ContentType
	a.fieldMap["label"] = a.Label
	a.fieldMap["status"] = a.Status
}

func (a amTab) clone(db *gorm.DB) amTab {
	a.amTabDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amTab) replaceDB(db *gorm.DB) amTab {
	a.amTabDo.ReplaceDB(db)
	return a
}

type amTabDo struct{ gen.DO }

type IAmTabDo interface {
	gen.SubQuery
	Debug() IAmTabDo
	WithContext(ctx context.Context) IAmTabDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmTabDo
	WriteDB() IAmTabDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmTabDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmTabDo
	Not(conds ...gen.Condition) IAmTabDo
	Or(conds ...gen.Condition) IAmTabDo
	Select(conds ...field.Expr) IAmTabDo
	Where(conds ...gen.Condition) IAmTabDo
	Order(conds ...field.Expr) IAmTabDo
	Distinct(cols ...field.Expr) IAmTabDo
	Omit(cols ...field.Expr) IAmTabDo
	Join(table schema.Tabler, on ...field.Expr) IAmTabDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmTabDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmTabDo
	Group(cols ...field.Expr) IAmTabDo
	Having(conds ...gen.Condition) IAmTabDo
	Limit(limit int) IAmTabDo
	Offset(offset int) IAmTabDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmTabDo
	Unscoped() IAmTabDo
	Create(values ...*model.AmTab) error
	CreateInBatches(values []*model.AmTab, batchSize int) error
	Save(values ...*model.AmTab) error
	First() (*model.AmTab, error)
	Take() (*model.AmTab, error)
	Last() (*model.AmTab, error)
	Find() ([]*model.AmTab, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmTab, err error)
	FindInBatches(result *[]*model.AmTab, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmTab) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmTabDo
	Assign(attrs ...field.AssignExpr) IAmTabDo
	Joins(fields ...field.RelationField) IAmTabDo
	Preload(fields ...field.RelationField) IAmTabDo
	FirstOrInit() (*model.AmTab, error)
	FirstOrCreate() (*model.AmTab, error)
	FindByPage(offset int, limit int) (result []*model.AmTab, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmTabDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amTabDo) Debug() IAmTabDo {
	return a.withDO(a.DO.Debug())
}

func (a amTabDo) WithContext(ctx context.Context) IAmTabDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amTabDo) ReadDB() IAmTabDo {
	return a.Clauses(dbresolver.Read)
}

func (a amTabDo) WriteDB() IAmTabDo {
	return a.Clauses(dbresolver.Write)
}

func (a amTabDo) Session(config *gorm.Session) IAmTabDo {
	return a.withDO(a.DO.Session(config))
}

func (a amTabDo) Clauses(conds ...clause.Expression) IAmTabDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amTabDo) Returning(value interface{}, columns ...string) IAmTabDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amTabDo) Not(conds ...gen.Condition) IAmTabDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amTabDo) Or(conds ...gen.Condition) IAmTabDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amTabDo) Select(conds ...field.Expr) IAmTabDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amTabDo) Where(conds ...gen.Condition) IAmTabDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amTabDo) Order(conds ...field.Expr) IAmTabDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amTabDo) Distinct(cols ...field.Expr) IAmTabDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amTabDo) Omit(cols ...field.Expr) IAmTabDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amTabDo) Join(table schema.Tabler, on ...field.Expr) IAmTabDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amTabDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmTabDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amTabDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmTabDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amTabDo) Group(cols ...field.Expr) IAmTabDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amTabDo) Having(conds ...gen.Condition) IAmTabDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amTabDo) Limit(limit int) IAmTabDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amTabDo) Offset(offset int) IAmTabDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amTabDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmTabDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amTabDo) Unscoped() IAmTabDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amTabDo) Create(values ...*model.AmTab) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amTabDo) CreateInBatches(values []*model.AmTab, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amTabDo) Save(values ...*model.AmTab) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amTabDo) First() (*model.AmTab, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmTab), nil
	}
}

func (a amTabDo) Take() (*model.AmTab, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmTab), nil
	}
}

func (a amTabDo) Last() (*model.AmTab, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmTab), nil
	}
}

func (a amTabDo) Find() ([]*model.AmTab, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmTab), err
}

func (a amTabDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmTab, err error) {
	buf := make([]*model.AmTab, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amTabDo) FindInBatches(result *[]*model.AmTab, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amTabDo) Attrs(attrs ...field.AssignExpr) IAmTabDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amTabDo) Assign(attrs ...field.AssignExpr) IAmTabDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amTabDo) Joins(fields ...field.RelationField) IAmTabDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amTabDo) Preload(fields ...field.RelationField) IAmTabDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amTabDo) FirstOrInit() (*model.AmTab, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmTab), nil
	}
}

func (a amTabDo) FirstOrCreate() (*model.AmTab, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmTab), nil
	}
}

func (a amTabDo) FindByPage(offset int, limit int) (result []*model.AmTab, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amTabDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amTabDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amTabDo) Delete(models ...*model.AmTab) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amTabDo) withDO(do gen.Dao) *amTabDo {
	a.DO = *do.(*gen.DO)
	return a
}
