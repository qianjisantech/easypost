// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAPIParametersHeader(db *gorm.DB, opts ...gen.DOOption) aPIParametersHeader {
	_aPIParametersHeader := aPIParametersHeader{}

	_aPIParametersHeader.aPIParametersHeaderDo.UseDB(db, opts...)
	_aPIParametersHeader.aPIParametersHeaderDo.UseModel(&model.APIParametersHeader{})

	tableName := _aPIParametersHeader.aPIParametersHeaderDo.TableName()
	_aPIParametersHeader.ALL = field.NewAsterisk(tableName)
	_aPIParametersHeader.ID = field.NewInt64(tableName, "id")
	_aPIParametersHeader.Name = field.NewString(tableName, "name")
	_aPIParametersHeader.Type = field.NewString(tableName, "type")
	_aPIParametersHeader.Example = field.NewString(tableName, "example")
	_aPIParametersHeader.CreateBy = field.NewString(tableName, "create_by")
	_aPIParametersHeader.UpdateBy = field.NewString(tableName, "update_by")
	_aPIParametersHeader.CreateTime = field.NewTime(tableName, "create_time")
	_aPIParametersHeader.UpdateTime = field.NewTime(tableName, "update_time")
	_aPIParametersHeader.APIID = field.NewInt64(tableName, "api_id")
	_aPIParametersHeader.IsDeleted = field.NewBool(tableName, "is_deleted")

	_aPIParametersHeader.fillFieldMap()

	return _aPIParametersHeader
}

type aPIParametersHeader struct {
	aPIParametersHeaderDo aPIParametersHeaderDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	Type       field.String
	Example    field.String
	CreateBy   field.String
	UpdateBy   field.String
	CreateTime field.Time
	UpdateTime field.Time
	APIID      field.Int64
	IsDeleted  field.Bool

	fieldMap map[string]field.Expr
}

func (a aPIParametersHeader) Table(newTableName string) *aPIParametersHeader {
	a.aPIParametersHeaderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIParametersHeader) As(alias string) *aPIParametersHeader {
	a.aPIParametersHeaderDo.DO = *(a.aPIParametersHeaderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIParametersHeader) updateTableName(table string) *aPIParametersHeader {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewString(table, "type")
	a.Example = field.NewString(table, "example")
	a.CreateBy = field.NewString(table, "create_by")
	a.UpdateBy = field.NewString(table, "update_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.APIID = field.NewInt64(table, "api_id")
	a.IsDeleted = field.NewBool(table, "is_deleted")

	a.fillFieldMap()

	return a
}

func (a *aPIParametersHeader) WithContext(ctx context.Context) IAPIParametersHeaderDo {
	return a.aPIParametersHeaderDo.WithContext(ctx)
}

func (a aPIParametersHeader) TableName() string { return a.aPIParametersHeaderDo.TableName() }

func (a aPIParametersHeader) Alias() string { return a.aPIParametersHeaderDo.Alias() }

func (a aPIParametersHeader) Columns(cols ...field.Expr) gen.Columns {
	return a.aPIParametersHeaderDo.Columns(cols...)
}

func (a *aPIParametersHeader) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIParametersHeader) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["example"] = a.Example
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["api_id"] = a.APIID
	a.fieldMap["is_deleted"] = a.IsDeleted
}

func (a aPIParametersHeader) clone(db *gorm.DB) aPIParametersHeader {
	a.aPIParametersHeaderDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIParametersHeader) replaceDB(db *gorm.DB) aPIParametersHeader {
	a.aPIParametersHeaderDo.ReplaceDB(db)
	return a
}

type aPIParametersHeaderDo struct{ gen.DO }

type IAPIParametersHeaderDo interface {
	gen.SubQuery
	Debug() IAPIParametersHeaderDo
	WithContext(ctx context.Context) IAPIParametersHeaderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIParametersHeaderDo
	WriteDB() IAPIParametersHeaderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIParametersHeaderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIParametersHeaderDo
	Not(conds ...gen.Condition) IAPIParametersHeaderDo
	Or(conds ...gen.Condition) IAPIParametersHeaderDo
	Select(conds ...field.Expr) IAPIParametersHeaderDo
	Where(conds ...gen.Condition) IAPIParametersHeaderDo
	Order(conds ...field.Expr) IAPIParametersHeaderDo
	Distinct(cols ...field.Expr) IAPIParametersHeaderDo
	Omit(cols ...field.Expr) IAPIParametersHeaderDo
	Join(table schema.Tabler, on ...field.Expr) IAPIParametersHeaderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIParametersHeaderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIParametersHeaderDo
	Group(cols ...field.Expr) IAPIParametersHeaderDo
	Having(conds ...gen.Condition) IAPIParametersHeaderDo
	Limit(limit int) IAPIParametersHeaderDo
	Offset(offset int) IAPIParametersHeaderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIParametersHeaderDo
	Unscoped() IAPIParametersHeaderDo
	Create(values ...*model.APIParametersHeader) error
	CreateInBatches(values []*model.APIParametersHeader, batchSize int) error
	Save(values ...*model.APIParametersHeader) error
	First() (*model.APIParametersHeader, error)
	Take() (*model.APIParametersHeader, error)
	Last() (*model.APIParametersHeader, error)
	Find() ([]*model.APIParametersHeader, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIParametersHeader, err error)
	FindInBatches(result *[]*model.APIParametersHeader, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIParametersHeader) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIParametersHeaderDo
	Assign(attrs ...field.AssignExpr) IAPIParametersHeaderDo
	Joins(fields ...field.RelationField) IAPIParametersHeaderDo
	Preload(fields ...field.RelationField) IAPIParametersHeaderDo
	FirstOrInit() (*model.APIParametersHeader, error)
	FirstOrCreate() (*model.APIParametersHeader, error)
	FindByPage(offset int, limit int) (result []*model.APIParametersHeader, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIParametersHeaderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIParametersHeaderDo) Debug() IAPIParametersHeaderDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIParametersHeaderDo) WithContext(ctx context.Context) IAPIParametersHeaderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIParametersHeaderDo) ReadDB() IAPIParametersHeaderDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIParametersHeaderDo) WriteDB() IAPIParametersHeaderDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIParametersHeaderDo) Session(config *gorm.Session) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIParametersHeaderDo) Clauses(conds ...clause.Expression) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIParametersHeaderDo) Returning(value interface{}, columns ...string) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIParametersHeaderDo) Not(conds ...gen.Condition) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIParametersHeaderDo) Or(conds ...gen.Condition) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIParametersHeaderDo) Select(conds ...field.Expr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIParametersHeaderDo) Where(conds ...gen.Condition) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIParametersHeaderDo) Order(conds ...field.Expr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIParametersHeaderDo) Distinct(cols ...field.Expr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIParametersHeaderDo) Omit(cols ...field.Expr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIParametersHeaderDo) Join(table schema.Tabler, on ...field.Expr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIParametersHeaderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIParametersHeaderDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIParametersHeaderDo) Group(cols ...field.Expr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIParametersHeaderDo) Having(conds ...gen.Condition) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIParametersHeaderDo) Limit(limit int) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIParametersHeaderDo) Offset(offset int) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIParametersHeaderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIParametersHeaderDo) Unscoped() IAPIParametersHeaderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIParametersHeaderDo) Create(values ...*model.APIParametersHeader) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIParametersHeaderDo) CreateInBatches(values []*model.APIParametersHeader, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIParametersHeaderDo) Save(values ...*model.APIParametersHeader) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIParametersHeaderDo) First() (*model.APIParametersHeader, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersHeader), nil
	}
}

func (a aPIParametersHeaderDo) Take() (*model.APIParametersHeader, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersHeader), nil
	}
}

func (a aPIParametersHeaderDo) Last() (*model.APIParametersHeader, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersHeader), nil
	}
}

func (a aPIParametersHeaderDo) Find() ([]*model.APIParametersHeader, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIParametersHeader), err
}

func (a aPIParametersHeaderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIParametersHeader, err error) {
	buf := make([]*model.APIParametersHeader, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIParametersHeaderDo) FindInBatches(result *[]*model.APIParametersHeader, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIParametersHeaderDo) Attrs(attrs ...field.AssignExpr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIParametersHeaderDo) Assign(attrs ...field.AssignExpr) IAPIParametersHeaderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIParametersHeaderDo) Joins(fields ...field.RelationField) IAPIParametersHeaderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIParametersHeaderDo) Preload(fields ...field.RelationField) IAPIParametersHeaderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIParametersHeaderDo) FirstOrInit() (*model.APIParametersHeader, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersHeader), nil
	}
}

func (a aPIParametersHeaderDo) FirstOrCreate() (*model.APIParametersHeader, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersHeader), nil
	}
}

func (a aPIParametersHeaderDo) FindByPage(offset int, limit int) (result []*model.APIParametersHeader, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIParametersHeaderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIParametersHeaderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIParametersHeaderDo) Delete(models ...*model.APIParametersHeader) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIParametersHeaderDo) withDO(do gen.Dao) *aPIParametersHeaderDo {
	a.DO = *do.(*gen.DO)
	return a
}
