// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmAPIRequestBodyJSON(db *gorm.DB, opts ...gen.DOOption) amAPIRequestBodyJSON {
	_amAPIRequestBodyJSON := amAPIRequestBodyJSON{}

	_amAPIRequestBodyJSON.amAPIRequestBodyJSONDo.UseDB(db, opts...)
	_amAPIRequestBodyJSON.amAPIRequestBodyJSONDo.UseModel(&model.AmAPIRequestBodyJSON{})

	tableName := _amAPIRequestBodyJSON.amAPIRequestBodyJSONDo.TableName()
	_amAPIRequestBodyJSON.ALL = field.NewAsterisk(tableName)
	_amAPIRequestBodyJSON.ID = field.NewInt64(tableName, "id")
	_amAPIRequestBodyJSON.Type = field.NewString(tableName, "type")
	_amAPIRequestBodyJSON.JSONSchema = field.NewString(tableName, "json_schema")
	_amAPIRequestBodyJSON.IsDeleted = field.NewInt32(tableName, "is_deleted")
	_amAPIRequestBodyJSON.CreateBy = field.NewInt64(tableName, "create_by")
	_amAPIRequestBodyJSON.CreateTime = field.NewTime(tableName, "create_time")
	_amAPIRequestBodyJSON.UpdateBy = field.NewInt64(tableName, "update_by")
	_amAPIRequestBodyJSON.UpdateTime = field.NewTime(tableName, "update_time")
	_amAPIRequestBodyJSON.APIID = field.NewInt64(tableName, "api_id")

	_amAPIRequestBodyJSON.fillFieldMap()

	return _amAPIRequestBodyJSON
}

type amAPIRequestBodyJSON struct {
	amAPIRequestBodyJSONDo amAPIRequestBodyJSONDo

	ALL        field.Asterisk
	ID         field.Int64
	Type       field.String
	JSONSchema field.String
	IsDeleted  field.Int32
	CreateBy   field.Int64
	CreateTime field.Time
	UpdateBy   field.Int64
	UpdateTime field.Time
	APIID      field.Int64

	fieldMap map[string]field.Expr
}

func (a amAPIRequestBodyJSON) Table(newTableName string) *amAPIRequestBodyJSON {
	a.amAPIRequestBodyJSONDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amAPIRequestBodyJSON) As(alias string) *amAPIRequestBodyJSON {
	a.amAPIRequestBodyJSONDo.DO = *(a.amAPIRequestBodyJSONDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amAPIRequestBodyJSON) updateTableName(table string) *amAPIRequestBodyJSON {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Type = field.NewString(table, "type")
	a.JSONSchema = field.NewString(table, "json_schema")
	a.IsDeleted = field.NewInt32(table, "is_deleted")
	a.CreateBy = field.NewInt64(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateBy = field.NewInt64(table, "update_by")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.APIID = field.NewInt64(table, "api_id")

	a.fillFieldMap()

	return a
}

func (a *amAPIRequestBodyJSON) WithContext(ctx context.Context) IAmAPIRequestBodyJSONDo {
	return a.amAPIRequestBodyJSONDo.WithContext(ctx)
}

func (a amAPIRequestBodyJSON) TableName() string { return a.amAPIRequestBodyJSONDo.TableName() }

func (a amAPIRequestBodyJSON) Alias() string { return a.amAPIRequestBodyJSONDo.Alias() }

func (a amAPIRequestBodyJSON) Columns(cols ...field.Expr) gen.Columns {
	return a.amAPIRequestBodyJSONDo.Columns(cols...)
}

func (a *amAPIRequestBodyJSON) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amAPIRequestBodyJSON) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["type"] = a.Type
	a.fieldMap["json_schema"] = a.JSONSchema
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["api_id"] = a.APIID
}

func (a amAPIRequestBodyJSON) clone(db *gorm.DB) amAPIRequestBodyJSON {
	a.amAPIRequestBodyJSONDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amAPIRequestBodyJSON) replaceDB(db *gorm.DB) amAPIRequestBodyJSON {
	a.amAPIRequestBodyJSONDo.ReplaceDB(db)
	return a
}

type amAPIRequestBodyJSONDo struct{ gen.DO }

type IAmAPIRequestBodyJSONDo interface {
	gen.SubQuery
	Debug() IAmAPIRequestBodyJSONDo
	WithContext(ctx context.Context) IAmAPIRequestBodyJSONDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmAPIRequestBodyJSONDo
	WriteDB() IAmAPIRequestBodyJSONDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmAPIRequestBodyJSONDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmAPIRequestBodyJSONDo
	Not(conds ...gen.Condition) IAmAPIRequestBodyJSONDo
	Or(conds ...gen.Condition) IAmAPIRequestBodyJSONDo
	Select(conds ...field.Expr) IAmAPIRequestBodyJSONDo
	Where(conds ...gen.Condition) IAmAPIRequestBodyJSONDo
	Order(conds ...field.Expr) IAmAPIRequestBodyJSONDo
	Distinct(cols ...field.Expr) IAmAPIRequestBodyJSONDo
	Omit(cols ...field.Expr) IAmAPIRequestBodyJSONDo
	Join(table schema.Tabler, on ...field.Expr) IAmAPIRequestBodyJSONDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIRequestBodyJSONDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIRequestBodyJSONDo
	Group(cols ...field.Expr) IAmAPIRequestBodyJSONDo
	Having(conds ...gen.Condition) IAmAPIRequestBodyJSONDo
	Limit(limit int) IAmAPIRequestBodyJSONDo
	Offset(offset int) IAmAPIRequestBodyJSONDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIRequestBodyJSONDo
	Unscoped() IAmAPIRequestBodyJSONDo
	Create(values ...*model.AmAPIRequestBodyJSON) error
	CreateInBatches(values []*model.AmAPIRequestBodyJSON, batchSize int) error
	Save(values ...*model.AmAPIRequestBodyJSON) error
	First() (*model.AmAPIRequestBodyJSON, error)
	Take() (*model.AmAPIRequestBodyJSON, error)
	Last() (*model.AmAPIRequestBodyJSON, error)
	Find() ([]*model.AmAPIRequestBodyJSON, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPIRequestBodyJSON, err error)
	FindInBatches(result *[]*model.AmAPIRequestBodyJSON, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmAPIRequestBodyJSON) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmAPIRequestBodyJSONDo
	Assign(attrs ...field.AssignExpr) IAmAPIRequestBodyJSONDo
	Joins(fields ...field.RelationField) IAmAPIRequestBodyJSONDo
	Preload(fields ...field.RelationField) IAmAPIRequestBodyJSONDo
	FirstOrInit() (*model.AmAPIRequestBodyJSON, error)
	FirstOrCreate() (*model.AmAPIRequestBodyJSON, error)
	FindByPage(offset int, limit int) (result []*model.AmAPIRequestBodyJSON, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmAPIRequestBodyJSONDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amAPIRequestBodyJSONDo) Debug() IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Debug())
}

func (a amAPIRequestBodyJSONDo) WithContext(ctx context.Context) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amAPIRequestBodyJSONDo) ReadDB() IAmAPIRequestBodyJSONDo {
	return a.Clauses(dbresolver.Read)
}

func (a amAPIRequestBodyJSONDo) WriteDB() IAmAPIRequestBodyJSONDo {
	return a.Clauses(dbresolver.Write)
}

func (a amAPIRequestBodyJSONDo) Session(config *gorm.Session) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Session(config))
}

func (a amAPIRequestBodyJSONDo) Clauses(conds ...clause.Expression) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amAPIRequestBodyJSONDo) Returning(value interface{}, columns ...string) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amAPIRequestBodyJSONDo) Not(conds ...gen.Condition) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amAPIRequestBodyJSONDo) Or(conds ...gen.Condition) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amAPIRequestBodyJSONDo) Select(conds ...field.Expr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amAPIRequestBodyJSONDo) Where(conds ...gen.Condition) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amAPIRequestBodyJSONDo) Order(conds ...field.Expr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amAPIRequestBodyJSONDo) Distinct(cols ...field.Expr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amAPIRequestBodyJSONDo) Omit(cols ...field.Expr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amAPIRequestBodyJSONDo) Join(table schema.Tabler, on ...field.Expr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amAPIRequestBodyJSONDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amAPIRequestBodyJSONDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amAPIRequestBodyJSONDo) Group(cols ...field.Expr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amAPIRequestBodyJSONDo) Having(conds ...gen.Condition) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amAPIRequestBodyJSONDo) Limit(limit int) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amAPIRequestBodyJSONDo) Offset(offset int) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amAPIRequestBodyJSONDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amAPIRequestBodyJSONDo) Unscoped() IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amAPIRequestBodyJSONDo) Create(values ...*model.AmAPIRequestBodyJSON) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amAPIRequestBodyJSONDo) CreateInBatches(values []*model.AmAPIRequestBodyJSON, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amAPIRequestBodyJSONDo) Save(values ...*model.AmAPIRequestBodyJSON) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amAPIRequestBodyJSONDo) First() (*model.AmAPIRequestBodyJSON, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIRequestBodyJSON), nil
	}
}

func (a amAPIRequestBodyJSONDo) Take() (*model.AmAPIRequestBodyJSON, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIRequestBodyJSON), nil
	}
}

func (a amAPIRequestBodyJSONDo) Last() (*model.AmAPIRequestBodyJSON, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIRequestBodyJSON), nil
	}
}

func (a amAPIRequestBodyJSONDo) Find() ([]*model.AmAPIRequestBodyJSON, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmAPIRequestBodyJSON), err
}

func (a amAPIRequestBodyJSONDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPIRequestBodyJSON, err error) {
	buf := make([]*model.AmAPIRequestBodyJSON, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amAPIRequestBodyJSONDo) FindInBatches(result *[]*model.AmAPIRequestBodyJSON, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amAPIRequestBodyJSONDo) Attrs(attrs ...field.AssignExpr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amAPIRequestBodyJSONDo) Assign(attrs ...field.AssignExpr) IAmAPIRequestBodyJSONDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amAPIRequestBodyJSONDo) Joins(fields ...field.RelationField) IAmAPIRequestBodyJSONDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amAPIRequestBodyJSONDo) Preload(fields ...field.RelationField) IAmAPIRequestBodyJSONDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amAPIRequestBodyJSONDo) FirstOrInit() (*model.AmAPIRequestBodyJSON, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIRequestBodyJSON), nil
	}
}

func (a amAPIRequestBodyJSONDo) FirstOrCreate() (*model.AmAPIRequestBodyJSON, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIRequestBodyJSON), nil
	}
}

func (a amAPIRequestBodyJSONDo) FindByPage(offset int, limit int) (result []*model.AmAPIRequestBodyJSON, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amAPIRequestBodyJSONDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amAPIRequestBodyJSONDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amAPIRequestBodyJSONDo) Delete(models ...*model.AmAPIRequestBodyJSON) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amAPIRequestBodyJSONDo) withDO(do gen.Dao) *amAPIRequestBodyJSONDo {
	a.DO = *do.(*gen.DO)
	return a
}
