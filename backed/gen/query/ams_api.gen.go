// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmsAPI(db *gorm.DB, opts ...gen.DOOption) amsAPI {
	_amsAPI := amsAPI{}

	_amsAPI.amsAPIDo.UseDB(db, opts...)
	_amsAPI.amsAPIDo.UseModel(&model.AmsAPI{})

	tableName := _amsAPI.amsAPIDo.TableName()
	_amsAPI.ALL = field.NewAsterisk(tableName)
	_amsAPI.ID = field.NewInt64(tableName, "id")
	_amsAPI.Name = field.NewString(tableName, "name")
	_amsAPI.Path = field.NewString(tableName, "path")
	_amsAPI.Status = field.NewString(tableName, "status")
	_amsAPI.CreateBy = field.NewInt64(tableName, "create_by")
	_amsAPI.CreateByName = field.NewString(tableName, "create_by_name")
	_amsAPI.UpdateBy = field.NewInt64(tableName, "update_by")
	_amsAPI.UpdateByName = field.NewString(tableName, "update_by_name")
	_amsAPI.CreateTime = field.NewTime(tableName, "create_time")
	_amsAPI.UpdateTime = field.NewTime(tableName, "update_time")
	_amsAPI.IsDeleted = field.NewBool(tableName, "is_deleted")
	_amsAPI.Manager = field.NewString(tableName, "manager")
	_amsAPI.Tag = field.NewString(tableName, "tag")
	_amsAPI.Method = field.NewString(tableName, "method")
	_amsAPI.ParentID = field.NewInt64(tableName, "parent_id")
	_amsAPI.Remark = field.NewString(tableName, "remark")
	_amsAPI.ServerID = field.NewString(tableName, "server_id")
	_amsAPI.ProjectID = field.NewInt64(tableName, "project_id")
	_amsAPI.Responsible = field.NewString(tableName, "responsible")
	_amsAPI.Parameters = field.NewString(tableName, "parameters")
	_amsAPI.Responses = field.NewString(tableName, "responses")
	_amsAPI.ResponseExamples = field.NewString(tableName, "response_examples")

	_amsAPI.fillFieldMap()

	return _amsAPI
}

// amsAPI 接口表
type amsAPI struct {
	amsAPIDo amsAPIDo

	ALL              field.Asterisk
	ID               field.Int64
	Name             field.String
	Path             field.String
	Status           field.String
	CreateBy         field.Int64
	CreateByName     field.String
	UpdateBy         field.Int64
	UpdateByName     field.String
	CreateTime       field.Time
	UpdateTime       field.Time
	IsDeleted        field.Bool
	Manager          field.String // 负责人
	Tag              field.String
	Method           field.String
	ParentID         field.Int64
	Remark           field.String // 备注
	ServerID         field.String
	ProjectID        field.Int64
	Responsible      field.String // 负责人
	Parameters       field.String
	Responses        field.String
	ResponseExamples field.String

	fieldMap map[string]field.Expr
}

func (a amsAPI) Table(newTableName string) *amsAPI {
	a.amsAPIDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amsAPI) As(alias string) *amsAPI {
	a.amsAPIDo.DO = *(a.amsAPIDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amsAPI) updateTableName(table string) *amsAPI {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Path = field.NewString(table, "path")
	a.Status = field.NewString(table, "status")
	a.CreateBy = field.NewInt64(table, "create_by")
	a.CreateByName = field.NewString(table, "create_by_name")
	a.UpdateBy = field.NewInt64(table, "update_by")
	a.UpdateByName = field.NewString(table, "update_by_name")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.Manager = field.NewString(table, "manager")
	a.Tag = field.NewString(table, "tag")
	a.Method = field.NewString(table, "method")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.Remark = field.NewString(table, "remark")
	a.ServerID = field.NewString(table, "server_id")
	a.ProjectID = field.NewInt64(table, "project_id")
	a.Responsible = field.NewString(table, "responsible")
	a.Parameters = field.NewString(table, "parameters")
	a.Responses = field.NewString(table, "responses")
	a.ResponseExamples = field.NewString(table, "response_examples")

	a.fillFieldMap()

	return a
}

func (a *amsAPI) WithContext(ctx context.Context) IAmsAPIDo { return a.amsAPIDo.WithContext(ctx) }

func (a amsAPI) TableName() string { return a.amsAPIDo.TableName() }

func (a amsAPI) Alias() string { return a.amsAPIDo.Alias() }

func (a amsAPI) Columns(cols ...field.Expr) gen.Columns { return a.amsAPIDo.Columns(cols...) }

func (a *amsAPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amsAPI) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 22)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["path"] = a.Path
	a.fieldMap["status"] = a.Status
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_by_name"] = a.CreateByName
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_by_name"] = a.UpdateByName
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["manager"] = a.Manager
	a.fieldMap["tag"] = a.Tag
	a.fieldMap["method"] = a.Method
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["server_id"] = a.ServerID
	a.fieldMap["project_id"] = a.ProjectID
	a.fieldMap["responsible"] = a.Responsible
	a.fieldMap["parameters"] = a.Parameters
	a.fieldMap["responses"] = a.Responses
	a.fieldMap["response_examples"] = a.ResponseExamples
}

func (a amsAPI) clone(db *gorm.DB) amsAPI {
	a.amsAPIDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amsAPI) replaceDB(db *gorm.DB) amsAPI {
	a.amsAPIDo.ReplaceDB(db)
	return a
}

type amsAPIDo struct{ gen.DO }

type IAmsAPIDo interface {
	gen.SubQuery
	Debug() IAmsAPIDo
	WithContext(ctx context.Context) IAmsAPIDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmsAPIDo
	WriteDB() IAmsAPIDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmsAPIDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmsAPIDo
	Not(conds ...gen.Condition) IAmsAPIDo
	Or(conds ...gen.Condition) IAmsAPIDo
	Select(conds ...field.Expr) IAmsAPIDo
	Where(conds ...gen.Condition) IAmsAPIDo
	Order(conds ...field.Expr) IAmsAPIDo
	Distinct(cols ...field.Expr) IAmsAPIDo
	Omit(cols ...field.Expr) IAmsAPIDo
	Join(table schema.Tabler, on ...field.Expr) IAmsAPIDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmsAPIDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmsAPIDo
	Group(cols ...field.Expr) IAmsAPIDo
	Having(conds ...gen.Condition) IAmsAPIDo
	Limit(limit int) IAmsAPIDo
	Offset(offset int) IAmsAPIDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmsAPIDo
	Unscoped() IAmsAPIDo
	Create(values ...*model.AmsAPI) error
	CreateInBatches(values []*model.AmsAPI, batchSize int) error
	Save(values ...*model.AmsAPI) error
	First() (*model.AmsAPI, error)
	Take() (*model.AmsAPI, error)
	Last() (*model.AmsAPI, error)
	Find() ([]*model.AmsAPI, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmsAPI, err error)
	FindInBatches(result *[]*model.AmsAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmsAPI) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmsAPIDo
	Assign(attrs ...field.AssignExpr) IAmsAPIDo
	Joins(fields ...field.RelationField) IAmsAPIDo
	Preload(fields ...field.RelationField) IAmsAPIDo
	FirstOrInit() (*model.AmsAPI, error)
	FirstOrCreate() (*model.AmsAPI, error)
	FindByPage(offset int, limit int) (result []*model.AmsAPI, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmsAPIDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amsAPIDo) Debug() IAmsAPIDo {
	return a.withDO(a.DO.Debug())
}

func (a amsAPIDo) WithContext(ctx context.Context) IAmsAPIDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amsAPIDo) ReadDB() IAmsAPIDo {
	return a.Clauses(dbresolver.Read)
}

func (a amsAPIDo) WriteDB() IAmsAPIDo {
	return a.Clauses(dbresolver.Write)
}

func (a amsAPIDo) Session(config *gorm.Session) IAmsAPIDo {
	return a.withDO(a.DO.Session(config))
}

func (a amsAPIDo) Clauses(conds ...clause.Expression) IAmsAPIDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amsAPIDo) Returning(value interface{}, columns ...string) IAmsAPIDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amsAPIDo) Not(conds ...gen.Condition) IAmsAPIDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amsAPIDo) Or(conds ...gen.Condition) IAmsAPIDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amsAPIDo) Select(conds ...field.Expr) IAmsAPIDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amsAPIDo) Where(conds ...gen.Condition) IAmsAPIDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amsAPIDo) Order(conds ...field.Expr) IAmsAPIDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amsAPIDo) Distinct(cols ...field.Expr) IAmsAPIDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amsAPIDo) Omit(cols ...field.Expr) IAmsAPIDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amsAPIDo) Join(table schema.Tabler, on ...field.Expr) IAmsAPIDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amsAPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmsAPIDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amsAPIDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmsAPIDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amsAPIDo) Group(cols ...field.Expr) IAmsAPIDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amsAPIDo) Having(conds ...gen.Condition) IAmsAPIDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amsAPIDo) Limit(limit int) IAmsAPIDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amsAPIDo) Offset(offset int) IAmsAPIDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amsAPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmsAPIDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amsAPIDo) Unscoped() IAmsAPIDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amsAPIDo) Create(values ...*model.AmsAPI) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amsAPIDo) CreateInBatches(values []*model.AmsAPI, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amsAPIDo) Save(values ...*model.AmsAPI) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amsAPIDo) First() (*model.AmsAPI, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsAPI), nil
	}
}

func (a amsAPIDo) Take() (*model.AmsAPI, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsAPI), nil
	}
}

func (a amsAPIDo) Last() (*model.AmsAPI, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsAPI), nil
	}
}

func (a amsAPIDo) Find() ([]*model.AmsAPI, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmsAPI), err
}

func (a amsAPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmsAPI, err error) {
	buf := make([]*model.AmsAPI, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amsAPIDo) FindInBatches(result *[]*model.AmsAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amsAPIDo) Attrs(attrs ...field.AssignExpr) IAmsAPIDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amsAPIDo) Assign(attrs ...field.AssignExpr) IAmsAPIDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amsAPIDo) Joins(fields ...field.RelationField) IAmsAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amsAPIDo) Preload(fields ...field.RelationField) IAmsAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amsAPIDo) FirstOrInit() (*model.AmsAPI, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsAPI), nil
	}
}

func (a amsAPIDo) FirstOrCreate() (*model.AmsAPI, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsAPI), nil
	}
}

func (a amsAPIDo) FindByPage(offset int, limit int) (result []*model.AmsAPI, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amsAPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amsAPIDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amsAPIDo) Delete(models ...*model.AmsAPI) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amsAPIDo) withDO(do gen.Dao) *amsAPIDo {
	a.DO = *do.(*gen.DO)
	return a
}
