// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newGsTrafficManagerHeader(db *gorm.DB, opts ...gen.DOOption) gsTrafficManagerHeader {
	_gsTrafficManagerHeader := gsTrafficManagerHeader{}

	_gsTrafficManagerHeader.gsTrafficManagerHeaderDo.UseDB(db, opts...)
	_gsTrafficManagerHeader.gsTrafficManagerHeaderDo.UseModel(&model.GsTrafficManagerHeader{})

	tableName := _gsTrafficManagerHeader.gsTrafficManagerHeaderDo.TableName()
	_gsTrafficManagerHeader.ALL = field.NewAsterisk(tableName)
	_gsTrafficManagerHeader.ID = field.NewInt64(tableName, "id")
	_gsTrafficManagerHeader.Key = field.NewString(tableName, "key")
	_gsTrafficManagerHeader.Value = field.NewString(tableName, "value")
	_gsTrafficManagerHeader.TrafficID = field.NewInt64(tableName, "traffic_id")
	_gsTrafficManagerHeader.RecordTime = field.NewTime(tableName, "record_time")

	_gsTrafficManagerHeader.fillFieldMap()

	return _gsTrafficManagerHeader
}

type gsTrafficManagerHeader struct {
	gsTrafficManagerHeaderDo gsTrafficManagerHeaderDo

	ALL        field.Asterisk
	ID         field.Int64
	Key        field.String
	Value      field.String
	TrafficID  field.Int64
	RecordTime field.Time

	fieldMap map[string]field.Expr
}

func (g gsTrafficManagerHeader) Table(newTableName string) *gsTrafficManagerHeader {
	g.gsTrafficManagerHeaderDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gsTrafficManagerHeader) As(alias string) *gsTrafficManagerHeader {
	g.gsTrafficManagerHeaderDo.DO = *(g.gsTrafficManagerHeaderDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gsTrafficManagerHeader) updateTableName(table string) *gsTrafficManagerHeader {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Key = field.NewString(table, "key")
	g.Value = field.NewString(table, "value")
	g.TrafficID = field.NewInt64(table, "traffic_id")
	g.RecordTime = field.NewTime(table, "record_time")

	g.fillFieldMap()

	return g
}

func (g *gsTrafficManagerHeader) WithContext(ctx context.Context) IGsTrafficManagerHeaderDo {
	return g.gsTrafficManagerHeaderDo.WithContext(ctx)
}

func (g gsTrafficManagerHeader) TableName() string { return g.gsTrafficManagerHeaderDo.TableName() }

func (g gsTrafficManagerHeader) Alias() string { return g.gsTrafficManagerHeaderDo.Alias() }

func (g gsTrafficManagerHeader) Columns(cols ...field.Expr) gen.Columns {
	return g.gsTrafficManagerHeaderDo.Columns(cols...)
}

func (g *gsTrafficManagerHeader) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gsTrafficManagerHeader) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["id"] = g.ID
	g.fieldMap["key"] = g.Key
	g.fieldMap["value"] = g.Value
	g.fieldMap["traffic_id"] = g.TrafficID
	g.fieldMap["record_time"] = g.RecordTime
}

func (g gsTrafficManagerHeader) clone(db *gorm.DB) gsTrafficManagerHeader {
	g.gsTrafficManagerHeaderDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gsTrafficManagerHeader) replaceDB(db *gorm.DB) gsTrafficManagerHeader {
	g.gsTrafficManagerHeaderDo.ReplaceDB(db)
	return g
}

type gsTrafficManagerHeaderDo struct{ gen.DO }

type IGsTrafficManagerHeaderDo interface {
	gen.SubQuery
	Debug() IGsTrafficManagerHeaderDo
	WithContext(ctx context.Context) IGsTrafficManagerHeaderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGsTrafficManagerHeaderDo
	WriteDB() IGsTrafficManagerHeaderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGsTrafficManagerHeaderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGsTrafficManagerHeaderDo
	Not(conds ...gen.Condition) IGsTrafficManagerHeaderDo
	Or(conds ...gen.Condition) IGsTrafficManagerHeaderDo
	Select(conds ...field.Expr) IGsTrafficManagerHeaderDo
	Where(conds ...gen.Condition) IGsTrafficManagerHeaderDo
	Order(conds ...field.Expr) IGsTrafficManagerHeaderDo
	Distinct(cols ...field.Expr) IGsTrafficManagerHeaderDo
	Omit(cols ...field.Expr) IGsTrafficManagerHeaderDo
	Join(table schema.Tabler, on ...field.Expr) IGsTrafficManagerHeaderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerHeaderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerHeaderDo
	Group(cols ...field.Expr) IGsTrafficManagerHeaderDo
	Having(conds ...gen.Condition) IGsTrafficManagerHeaderDo
	Limit(limit int) IGsTrafficManagerHeaderDo
	Offset(offset int) IGsTrafficManagerHeaderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGsTrafficManagerHeaderDo
	Unscoped() IGsTrafficManagerHeaderDo
	Create(values ...*model.GsTrafficManagerHeader) error
	CreateInBatches(values []*model.GsTrafficManagerHeader, batchSize int) error
	Save(values ...*model.GsTrafficManagerHeader) error
	First() (*model.GsTrafficManagerHeader, error)
	Take() (*model.GsTrafficManagerHeader, error)
	Last() (*model.GsTrafficManagerHeader, error)
	Find() ([]*model.GsTrafficManagerHeader, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GsTrafficManagerHeader, err error)
	FindInBatches(result *[]*model.GsTrafficManagerHeader, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GsTrafficManagerHeader) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGsTrafficManagerHeaderDo
	Assign(attrs ...field.AssignExpr) IGsTrafficManagerHeaderDo
	Joins(fields ...field.RelationField) IGsTrafficManagerHeaderDo
	Preload(fields ...field.RelationField) IGsTrafficManagerHeaderDo
	FirstOrInit() (*model.GsTrafficManagerHeader, error)
	FirstOrCreate() (*model.GsTrafficManagerHeader, error)
	FindByPage(offset int, limit int) (result []*model.GsTrafficManagerHeader, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGsTrafficManagerHeaderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gsTrafficManagerHeaderDo) Debug() IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Debug())
}

func (g gsTrafficManagerHeaderDo) WithContext(ctx context.Context) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gsTrafficManagerHeaderDo) ReadDB() IGsTrafficManagerHeaderDo {
	return g.Clauses(dbresolver.Read)
}

func (g gsTrafficManagerHeaderDo) WriteDB() IGsTrafficManagerHeaderDo {
	return g.Clauses(dbresolver.Write)
}

func (g gsTrafficManagerHeaderDo) Session(config *gorm.Session) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Session(config))
}

func (g gsTrafficManagerHeaderDo) Clauses(conds ...clause.Expression) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gsTrafficManagerHeaderDo) Returning(value interface{}, columns ...string) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gsTrafficManagerHeaderDo) Not(conds ...gen.Condition) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gsTrafficManagerHeaderDo) Or(conds ...gen.Condition) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gsTrafficManagerHeaderDo) Select(conds ...field.Expr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gsTrafficManagerHeaderDo) Where(conds ...gen.Condition) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gsTrafficManagerHeaderDo) Order(conds ...field.Expr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gsTrafficManagerHeaderDo) Distinct(cols ...field.Expr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gsTrafficManagerHeaderDo) Omit(cols ...field.Expr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gsTrafficManagerHeaderDo) Join(table schema.Tabler, on ...field.Expr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gsTrafficManagerHeaderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gsTrafficManagerHeaderDo) RightJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gsTrafficManagerHeaderDo) Group(cols ...field.Expr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gsTrafficManagerHeaderDo) Having(conds ...gen.Condition) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gsTrafficManagerHeaderDo) Limit(limit int) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gsTrafficManagerHeaderDo) Offset(offset int) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gsTrafficManagerHeaderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gsTrafficManagerHeaderDo) Unscoped() IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gsTrafficManagerHeaderDo) Create(values ...*model.GsTrafficManagerHeader) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gsTrafficManagerHeaderDo) CreateInBatches(values []*model.GsTrafficManagerHeader, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gsTrafficManagerHeaderDo) Save(values ...*model.GsTrafficManagerHeader) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gsTrafficManagerHeaderDo) First() (*model.GsTrafficManagerHeader, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerHeader), nil
	}
}

func (g gsTrafficManagerHeaderDo) Take() (*model.GsTrafficManagerHeader, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerHeader), nil
	}
}

func (g gsTrafficManagerHeaderDo) Last() (*model.GsTrafficManagerHeader, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerHeader), nil
	}
}

func (g gsTrafficManagerHeaderDo) Find() ([]*model.GsTrafficManagerHeader, error) {
	result, err := g.DO.Find()
	return result.([]*model.GsTrafficManagerHeader), err
}

func (g gsTrafficManagerHeaderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GsTrafficManagerHeader, err error) {
	buf := make([]*model.GsTrafficManagerHeader, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gsTrafficManagerHeaderDo) FindInBatches(result *[]*model.GsTrafficManagerHeader, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gsTrafficManagerHeaderDo) Attrs(attrs ...field.AssignExpr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gsTrafficManagerHeaderDo) Assign(attrs ...field.AssignExpr) IGsTrafficManagerHeaderDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gsTrafficManagerHeaderDo) Joins(fields ...field.RelationField) IGsTrafficManagerHeaderDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gsTrafficManagerHeaderDo) Preload(fields ...field.RelationField) IGsTrafficManagerHeaderDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gsTrafficManagerHeaderDo) FirstOrInit() (*model.GsTrafficManagerHeader, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerHeader), nil
	}
}

func (g gsTrafficManagerHeaderDo) FirstOrCreate() (*model.GsTrafficManagerHeader, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerHeader), nil
	}
}

func (g gsTrafficManagerHeaderDo) FindByPage(offset int, limit int) (result []*model.GsTrafficManagerHeader, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gsTrafficManagerHeaderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gsTrafficManagerHeaderDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gsTrafficManagerHeaderDo) Delete(models ...*model.GsTrafficManagerHeader) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gsTrafficManagerHeaderDo) withDO(do gen.Dao) *gsTrafficManagerHeaderDo {
	g.DO = *do.(*gen.DO)
	return g
}
