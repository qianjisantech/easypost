// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmsFolder(db *gorm.DB, opts ...gen.DOOption) amsFolder {
	_amsFolder := amsFolder{}

	_amsFolder.amsFolderDo.UseDB(db, opts...)
	_amsFolder.amsFolderDo.UseModel(&model.AmsFolder{})

	tableName := _amsFolder.amsFolderDo.TableName()
	_amsFolder.ALL = field.NewAsterisk(tableName)
	_amsFolder.ID = field.NewInt64(tableName, "id")
	_amsFolder.Name = field.NewString(tableName, "name")
	_amsFolder.CreateBy = field.NewInt64(tableName, "create_by")
	_amsFolder.CreateByName = field.NewString(tableName, "create_by_name")
	_amsFolder.CreateTime = field.NewTime(tableName, "create_time")
	_amsFolder.IsDeleted = field.NewBool(tableName, "is_deleted")
	_amsFolder.UpdateBy = field.NewInt64(tableName, "update_by")
	_amsFolder.UpdateByName = field.NewString(tableName, "update_by_name")
	_amsFolder.UpdateTime = field.NewTime(tableName, "update_time")
	_amsFolder.Remark = field.NewString(tableName, "remark")
	_amsFolder.ParentID = field.NewInt64(tableName, "parent_id")
	_amsFolder.ProjectID = field.NewInt64(tableName, "project_id")

	_amsFolder.fillFieldMap()

	return _amsFolder
}

type amsFolder struct {
	amsFolderDo amsFolderDo

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String
	CreateBy     field.Int64
	CreateByName field.String
	CreateTime   field.Time
	IsDeleted    field.Bool
	UpdateBy     field.Int64
	UpdateByName field.String
	UpdateTime   field.Time
	Remark       field.String
	ParentID     field.Int64 // 父级目录id
	ProjectID    field.Int64

	fieldMap map[string]field.Expr
}

func (a amsFolder) Table(newTableName string) *amsFolder {
	a.amsFolderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amsFolder) As(alias string) *amsFolder {
	a.amsFolderDo.DO = *(a.amsFolderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amsFolder) updateTableName(table string) *amsFolder {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.CreateBy = field.NewInt64(table, "create_by")
	a.CreateByName = field.NewString(table, "create_by_name")
	a.CreateTime = field.NewTime(table, "create_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.UpdateBy = field.NewInt64(table, "update_by")
	a.UpdateByName = field.NewString(table, "update_by_name")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.Remark = field.NewString(table, "remark")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ProjectID = field.NewInt64(table, "project_id")

	a.fillFieldMap()

	return a
}

func (a *amsFolder) WithContext(ctx context.Context) IAmsFolderDo {
	return a.amsFolderDo.WithContext(ctx)
}

func (a amsFolder) TableName() string { return a.amsFolderDo.TableName() }

func (a amsFolder) Alias() string { return a.amsFolderDo.Alias() }

func (a amsFolder) Columns(cols ...field.Expr) gen.Columns { return a.amsFolderDo.Columns(cols...) }

func (a *amsFolder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amsFolder) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_by_name"] = a.CreateByName
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_by_name"] = a.UpdateByName
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["project_id"] = a.ProjectID
}

func (a amsFolder) clone(db *gorm.DB) amsFolder {
	a.amsFolderDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amsFolder) replaceDB(db *gorm.DB) amsFolder {
	a.amsFolderDo.ReplaceDB(db)
	return a
}

type amsFolderDo struct{ gen.DO }

type IAmsFolderDo interface {
	gen.SubQuery
	Debug() IAmsFolderDo
	WithContext(ctx context.Context) IAmsFolderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmsFolderDo
	WriteDB() IAmsFolderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmsFolderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmsFolderDo
	Not(conds ...gen.Condition) IAmsFolderDo
	Or(conds ...gen.Condition) IAmsFolderDo
	Select(conds ...field.Expr) IAmsFolderDo
	Where(conds ...gen.Condition) IAmsFolderDo
	Order(conds ...field.Expr) IAmsFolderDo
	Distinct(cols ...field.Expr) IAmsFolderDo
	Omit(cols ...field.Expr) IAmsFolderDo
	Join(table schema.Tabler, on ...field.Expr) IAmsFolderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmsFolderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmsFolderDo
	Group(cols ...field.Expr) IAmsFolderDo
	Having(conds ...gen.Condition) IAmsFolderDo
	Limit(limit int) IAmsFolderDo
	Offset(offset int) IAmsFolderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmsFolderDo
	Unscoped() IAmsFolderDo
	Create(values ...*model.AmsFolder) error
	CreateInBatches(values []*model.AmsFolder, batchSize int) error
	Save(values ...*model.AmsFolder) error
	First() (*model.AmsFolder, error)
	Take() (*model.AmsFolder, error)
	Last() (*model.AmsFolder, error)
	Find() ([]*model.AmsFolder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmsFolder, err error)
	FindInBatches(result *[]*model.AmsFolder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmsFolder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmsFolderDo
	Assign(attrs ...field.AssignExpr) IAmsFolderDo
	Joins(fields ...field.RelationField) IAmsFolderDo
	Preload(fields ...field.RelationField) IAmsFolderDo
	FirstOrInit() (*model.AmsFolder, error)
	FirstOrCreate() (*model.AmsFolder, error)
	FindByPage(offset int, limit int) (result []*model.AmsFolder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmsFolderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amsFolderDo) Debug() IAmsFolderDo {
	return a.withDO(a.DO.Debug())
}

func (a amsFolderDo) WithContext(ctx context.Context) IAmsFolderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amsFolderDo) ReadDB() IAmsFolderDo {
	return a.Clauses(dbresolver.Read)
}

func (a amsFolderDo) WriteDB() IAmsFolderDo {
	return a.Clauses(dbresolver.Write)
}

func (a amsFolderDo) Session(config *gorm.Session) IAmsFolderDo {
	return a.withDO(a.DO.Session(config))
}

func (a amsFolderDo) Clauses(conds ...clause.Expression) IAmsFolderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amsFolderDo) Returning(value interface{}, columns ...string) IAmsFolderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amsFolderDo) Not(conds ...gen.Condition) IAmsFolderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amsFolderDo) Or(conds ...gen.Condition) IAmsFolderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amsFolderDo) Select(conds ...field.Expr) IAmsFolderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amsFolderDo) Where(conds ...gen.Condition) IAmsFolderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amsFolderDo) Order(conds ...field.Expr) IAmsFolderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amsFolderDo) Distinct(cols ...field.Expr) IAmsFolderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amsFolderDo) Omit(cols ...field.Expr) IAmsFolderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amsFolderDo) Join(table schema.Tabler, on ...field.Expr) IAmsFolderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amsFolderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmsFolderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amsFolderDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmsFolderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amsFolderDo) Group(cols ...field.Expr) IAmsFolderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amsFolderDo) Having(conds ...gen.Condition) IAmsFolderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amsFolderDo) Limit(limit int) IAmsFolderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amsFolderDo) Offset(offset int) IAmsFolderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amsFolderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmsFolderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amsFolderDo) Unscoped() IAmsFolderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amsFolderDo) Create(values ...*model.AmsFolder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amsFolderDo) CreateInBatches(values []*model.AmsFolder, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amsFolderDo) Save(values ...*model.AmsFolder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amsFolderDo) First() (*model.AmsFolder, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsFolder), nil
	}
}

func (a amsFolderDo) Take() (*model.AmsFolder, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsFolder), nil
	}
}

func (a amsFolderDo) Last() (*model.AmsFolder, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsFolder), nil
	}
}

func (a amsFolderDo) Find() ([]*model.AmsFolder, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmsFolder), err
}

func (a amsFolderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmsFolder, err error) {
	buf := make([]*model.AmsFolder, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amsFolderDo) FindInBatches(result *[]*model.AmsFolder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amsFolderDo) Attrs(attrs ...field.AssignExpr) IAmsFolderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amsFolderDo) Assign(attrs ...field.AssignExpr) IAmsFolderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amsFolderDo) Joins(fields ...field.RelationField) IAmsFolderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amsFolderDo) Preload(fields ...field.RelationField) IAmsFolderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amsFolderDo) FirstOrInit() (*model.AmsFolder, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsFolder), nil
	}
}

func (a amsFolderDo) FirstOrCreate() (*model.AmsFolder, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsFolder), nil
	}
}

func (a amsFolderDo) FindByPage(offset int, limit int) (result []*model.AmsFolder, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amsFolderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amsFolderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amsFolderDo) Delete(models ...*model.AmsFolder) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amsFolderDo) withDO(do gen.Dao) *amsFolderDo {
	a.DO = *do.(*gen.DO)
	return a
}
