// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newSysUserTeam(db *gorm.DB, opts ...gen.DOOption) sysUserTeam {
	_sysUserTeam := sysUserTeam{}

	_sysUserTeam.sysUserTeamDo.UseDB(db, opts...)
	_sysUserTeam.sysUserTeamDo.UseModel(&model.SysUserTeam{})

	tableName := _sysUserTeam.sysUserTeamDo.TableName()
	_sysUserTeam.ALL = field.NewAsterisk(tableName)
	_sysUserTeam.ID = field.NewInt64(tableName, "id")
	_sysUserTeam.UserID = field.NewInt64(tableName, "user_id")
	_sysUserTeam.TeamID = field.NewInt64(tableName, "team_id")

	_sysUserTeam.fillFieldMap()

	return _sysUserTeam
}

type sysUserTeam struct {
	sysUserTeamDo sysUserTeamDo

	ALL    field.Asterisk
	ID     field.Int64
	UserID field.Int64
	TeamID field.Int64

	fieldMap map[string]field.Expr
}

func (s sysUserTeam) Table(newTableName string) *sysUserTeam {
	s.sysUserTeamDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysUserTeam) As(alias string) *sysUserTeam {
	s.sysUserTeamDo.DO = *(s.sysUserTeamDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysUserTeam) updateTableName(table string) *sysUserTeam {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.TeamID = field.NewInt64(table, "team_id")

	s.fillFieldMap()

	return s
}

func (s *sysUserTeam) WithContext(ctx context.Context) ISysUserTeamDo {
	return s.sysUserTeamDo.WithContext(ctx)
}

func (s sysUserTeam) TableName() string { return s.sysUserTeamDo.TableName() }

func (s sysUserTeam) Alias() string { return s.sysUserTeamDo.Alias() }

func (s sysUserTeam) Columns(cols ...field.Expr) gen.Columns { return s.sysUserTeamDo.Columns(cols...) }

func (s *sysUserTeam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysUserTeam) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["team_id"] = s.TeamID
}

func (s sysUserTeam) clone(db *gorm.DB) sysUserTeam {
	s.sysUserTeamDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysUserTeam) replaceDB(db *gorm.DB) sysUserTeam {
	s.sysUserTeamDo.ReplaceDB(db)
	return s
}

type sysUserTeamDo struct{ gen.DO }

type ISysUserTeamDo interface {
	gen.SubQuery
	Debug() ISysUserTeamDo
	WithContext(ctx context.Context) ISysUserTeamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysUserTeamDo
	WriteDB() ISysUserTeamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysUserTeamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysUserTeamDo
	Not(conds ...gen.Condition) ISysUserTeamDo
	Or(conds ...gen.Condition) ISysUserTeamDo
	Select(conds ...field.Expr) ISysUserTeamDo
	Where(conds ...gen.Condition) ISysUserTeamDo
	Order(conds ...field.Expr) ISysUserTeamDo
	Distinct(cols ...field.Expr) ISysUserTeamDo
	Omit(cols ...field.Expr) ISysUserTeamDo
	Join(table schema.Tabler, on ...field.Expr) ISysUserTeamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserTeamDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysUserTeamDo
	Group(cols ...field.Expr) ISysUserTeamDo
	Having(conds ...gen.Condition) ISysUserTeamDo
	Limit(limit int) ISysUserTeamDo
	Offset(offset int) ISysUserTeamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserTeamDo
	Unscoped() ISysUserTeamDo
	Create(values ...*model.SysUserTeam) error
	CreateInBatches(values []*model.SysUserTeam, batchSize int) error
	Save(values ...*model.SysUserTeam) error
	First() (*model.SysUserTeam, error)
	Take() (*model.SysUserTeam, error)
	Last() (*model.SysUserTeam, error)
	Find() ([]*model.SysUserTeam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserTeam, err error)
	FindInBatches(result *[]*model.SysUserTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysUserTeam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysUserTeamDo
	Assign(attrs ...field.AssignExpr) ISysUserTeamDo
	Joins(fields ...field.RelationField) ISysUserTeamDo
	Preload(fields ...field.RelationField) ISysUserTeamDo
	FirstOrInit() (*model.SysUserTeam, error)
	FirstOrCreate() (*model.SysUserTeam, error)
	FindByPage(offset int, limit int) (result []*model.SysUserTeam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysUserTeamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysUserTeamDo) Debug() ISysUserTeamDo {
	return s.withDO(s.DO.Debug())
}

func (s sysUserTeamDo) WithContext(ctx context.Context) ISysUserTeamDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysUserTeamDo) ReadDB() ISysUserTeamDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysUserTeamDo) WriteDB() ISysUserTeamDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysUserTeamDo) Session(config *gorm.Session) ISysUserTeamDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysUserTeamDo) Clauses(conds ...clause.Expression) ISysUserTeamDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysUserTeamDo) Returning(value interface{}, columns ...string) ISysUserTeamDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysUserTeamDo) Not(conds ...gen.Condition) ISysUserTeamDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysUserTeamDo) Or(conds ...gen.Condition) ISysUserTeamDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysUserTeamDo) Select(conds ...field.Expr) ISysUserTeamDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysUserTeamDo) Where(conds ...gen.Condition) ISysUserTeamDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysUserTeamDo) Order(conds ...field.Expr) ISysUserTeamDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysUserTeamDo) Distinct(cols ...field.Expr) ISysUserTeamDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysUserTeamDo) Omit(cols ...field.Expr) ISysUserTeamDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysUserTeamDo) Join(table schema.Tabler, on ...field.Expr) ISysUserTeamDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysUserTeamDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserTeamDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysUserTeamDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysUserTeamDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysUserTeamDo) Group(cols ...field.Expr) ISysUserTeamDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysUserTeamDo) Having(conds ...gen.Condition) ISysUserTeamDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysUserTeamDo) Limit(limit int) ISysUserTeamDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysUserTeamDo) Offset(offset int) ISysUserTeamDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysUserTeamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserTeamDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysUserTeamDo) Unscoped() ISysUserTeamDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysUserTeamDo) Create(values ...*model.SysUserTeam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysUserTeamDo) CreateInBatches(values []*model.SysUserTeam, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysUserTeamDo) Save(values ...*model.SysUserTeam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysUserTeamDo) First() (*model.SysUserTeam, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserTeam), nil
	}
}

func (s sysUserTeamDo) Take() (*model.SysUserTeam, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserTeam), nil
	}
}

func (s sysUserTeamDo) Last() (*model.SysUserTeam, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserTeam), nil
	}
}

func (s sysUserTeamDo) Find() ([]*model.SysUserTeam, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysUserTeam), err
}

func (s sysUserTeamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserTeam, err error) {
	buf := make([]*model.SysUserTeam, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysUserTeamDo) FindInBatches(result *[]*model.SysUserTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysUserTeamDo) Attrs(attrs ...field.AssignExpr) ISysUserTeamDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysUserTeamDo) Assign(attrs ...field.AssignExpr) ISysUserTeamDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysUserTeamDo) Joins(fields ...field.RelationField) ISysUserTeamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysUserTeamDo) Preload(fields ...field.RelationField) ISysUserTeamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysUserTeamDo) FirstOrInit() (*model.SysUserTeam, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserTeam), nil
	}
}

func (s sysUserTeamDo) FirstOrCreate() (*model.SysUserTeam, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserTeam), nil
	}
}

func (s sysUserTeamDo) FindByPage(offset int, limit int) (result []*model.SysUserTeam, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysUserTeamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysUserTeamDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysUserTeamDo) Delete(models ...*model.SysUserTeam) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysUserTeamDo) withDO(do gen.Dao) *sysUserTeamDo {
	s.DO = *do.(*gen.DO)
	return s
}
