// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAPIApiInfo(db *gorm.DB, opts ...gen.DOOption) aPIApiInfo {
	_aPIApiInfo := aPIApiInfo{}

	_aPIApiInfo.aPIApiInfoDo.UseDB(db, opts...)
	_aPIApiInfo.aPIApiInfoDo.UseModel(&model.APIApiInfo{})

	tableName := _aPIApiInfo.aPIApiInfoDo.TableName()
	_aPIApiInfo.ALL = field.NewAsterisk(tableName)
	_aPIApiInfo.ID = field.NewInt32(tableName, "id")
	_aPIApiInfo.Name = field.NewString(tableName, "name")
	_aPIApiInfo.Type = field.NewString(tableName, "type")
	_aPIApiInfo.Path = field.NewString(tableName, "path")
	_aPIApiInfo.Status = field.NewString(tableName, "status")
	_aPIApiInfo.CreateBy = field.NewString(tableName, "create_by")
	_aPIApiInfo.CreateTime = field.NewTime(tableName, "create_time")
	_aPIApiInfo.IsDeleted = field.NewBool(tableName, "is_deleted")
	_aPIApiInfo.Manager = field.NewString(tableName, "manager")
	_aPIApiInfo.Tag = field.NewString(tableName, "tag")
	_aPIApiInfo.Method = field.NewString(tableName, "method")
	_aPIApiInfo.ParentID = field.NewInt64(tableName, "parent_id")
	_aPIApiInfo.Content = field.NewString(tableName, "content")
	_aPIApiInfo.Remark = field.NewString(tableName, "remark")

	_aPIApiInfo.fillFieldMap()

	return _aPIApiInfo
}

type aPIApiInfo struct {
	aPIApiInfoDo aPIApiInfoDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Type       field.String
	Path       field.String
	Status     field.String
	CreateBy   field.String
	CreateTime field.Time
	IsDeleted  field.Bool
	Manager    field.String // 负责人
	Tag        field.String
	Method     field.String
	ParentID   field.Int64
	Content    field.String
	Remark     field.String

	fieldMap map[string]field.Expr
}

func (a aPIApiInfo) Table(newTableName string) *aPIApiInfo {
	a.aPIApiInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIApiInfo) As(alias string) *aPIApiInfo {
	a.aPIApiInfoDo.DO = *(a.aPIApiInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIApiInfo) updateTableName(table string) *aPIApiInfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewString(table, "type")
	a.Path = field.NewString(table, "path")
	a.Status = field.NewString(table, "status")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.Manager = field.NewString(table, "manager")
	a.Tag = field.NewString(table, "tag")
	a.Method = field.NewString(table, "method")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.Content = field.NewString(table, "content")
	a.Remark = field.NewString(table, "remark")

	a.fillFieldMap()

	return a
}

func (a *aPIApiInfo) WithContext(ctx context.Context) IAPIApiInfoDo {
	return a.aPIApiInfoDo.WithContext(ctx)
}

func (a aPIApiInfo) TableName() string { return a.aPIApiInfoDo.TableName() }

func (a aPIApiInfo) Alias() string { return a.aPIApiInfoDo.Alias() }

func (a aPIApiInfo) Columns(cols ...field.Expr) gen.Columns { return a.aPIApiInfoDo.Columns(cols...) }

func (a *aPIApiInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIApiInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["path"] = a.Path
	a.fieldMap["status"] = a.Status
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["manager"] = a.Manager
	a.fieldMap["tag"] = a.Tag
	a.fieldMap["method"] = a.Method
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["content"] = a.Content
	a.fieldMap["remark"] = a.Remark
}

func (a aPIApiInfo) clone(db *gorm.DB) aPIApiInfo {
	a.aPIApiInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIApiInfo) replaceDB(db *gorm.DB) aPIApiInfo {
	a.aPIApiInfoDo.ReplaceDB(db)
	return a
}

type aPIApiInfoDo struct{ gen.DO }

type IAPIApiInfoDo interface {
	gen.SubQuery
	Debug() IAPIApiInfoDo
	WithContext(ctx context.Context) IAPIApiInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIApiInfoDo
	WriteDB() IAPIApiInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIApiInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIApiInfoDo
	Not(conds ...gen.Condition) IAPIApiInfoDo
	Or(conds ...gen.Condition) IAPIApiInfoDo
	Select(conds ...field.Expr) IAPIApiInfoDo
	Where(conds ...gen.Condition) IAPIApiInfoDo
	Order(conds ...field.Expr) IAPIApiInfoDo
	Distinct(cols ...field.Expr) IAPIApiInfoDo
	Omit(cols ...field.Expr) IAPIApiInfoDo
	Join(table schema.Tabler, on ...field.Expr) IAPIApiInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIApiInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIApiInfoDo
	Group(cols ...field.Expr) IAPIApiInfoDo
	Having(conds ...gen.Condition) IAPIApiInfoDo
	Limit(limit int) IAPIApiInfoDo
	Offset(offset int) IAPIApiInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIApiInfoDo
	Unscoped() IAPIApiInfoDo
	Create(values ...*model.APIApiInfo) error
	CreateInBatches(values []*model.APIApiInfo, batchSize int) error
	Save(values ...*model.APIApiInfo) error
	First() (*model.APIApiInfo, error)
	Take() (*model.APIApiInfo, error)
	Last() (*model.APIApiInfo, error)
	Find() ([]*model.APIApiInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIApiInfo, err error)
	FindInBatches(result *[]*model.APIApiInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIApiInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIApiInfoDo
	Assign(attrs ...field.AssignExpr) IAPIApiInfoDo
	Joins(fields ...field.RelationField) IAPIApiInfoDo
	Preload(fields ...field.RelationField) IAPIApiInfoDo
	FirstOrInit() (*model.APIApiInfo, error)
	FirstOrCreate() (*model.APIApiInfo, error)
	FindByPage(offset int, limit int) (result []*model.APIApiInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIApiInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIApiInfoDo) Debug() IAPIApiInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIApiInfoDo) WithContext(ctx context.Context) IAPIApiInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIApiInfoDo) ReadDB() IAPIApiInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIApiInfoDo) WriteDB() IAPIApiInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIApiInfoDo) Session(config *gorm.Session) IAPIApiInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIApiInfoDo) Clauses(conds ...clause.Expression) IAPIApiInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIApiInfoDo) Returning(value interface{}, columns ...string) IAPIApiInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIApiInfoDo) Not(conds ...gen.Condition) IAPIApiInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIApiInfoDo) Or(conds ...gen.Condition) IAPIApiInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIApiInfoDo) Select(conds ...field.Expr) IAPIApiInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIApiInfoDo) Where(conds ...gen.Condition) IAPIApiInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIApiInfoDo) Order(conds ...field.Expr) IAPIApiInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIApiInfoDo) Distinct(cols ...field.Expr) IAPIApiInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIApiInfoDo) Omit(cols ...field.Expr) IAPIApiInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIApiInfoDo) Join(table schema.Tabler, on ...field.Expr) IAPIApiInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIApiInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIApiInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIApiInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIApiInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIApiInfoDo) Group(cols ...field.Expr) IAPIApiInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIApiInfoDo) Having(conds ...gen.Condition) IAPIApiInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIApiInfoDo) Limit(limit int) IAPIApiInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIApiInfoDo) Offset(offset int) IAPIApiInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIApiInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIApiInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIApiInfoDo) Unscoped() IAPIApiInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIApiInfoDo) Create(values ...*model.APIApiInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIApiInfoDo) CreateInBatches(values []*model.APIApiInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIApiInfoDo) Save(values ...*model.APIApiInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIApiInfoDo) First() (*model.APIApiInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiInfo), nil
	}
}

func (a aPIApiInfoDo) Take() (*model.APIApiInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiInfo), nil
	}
}

func (a aPIApiInfoDo) Last() (*model.APIApiInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiInfo), nil
	}
}

func (a aPIApiInfoDo) Find() ([]*model.APIApiInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIApiInfo), err
}

func (a aPIApiInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIApiInfo, err error) {
	buf := make([]*model.APIApiInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIApiInfoDo) FindInBatches(result *[]*model.APIApiInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIApiInfoDo) Attrs(attrs ...field.AssignExpr) IAPIApiInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIApiInfoDo) Assign(attrs ...field.AssignExpr) IAPIApiInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIApiInfoDo) Joins(fields ...field.RelationField) IAPIApiInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIApiInfoDo) Preload(fields ...field.RelationField) IAPIApiInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIApiInfoDo) FirstOrInit() (*model.APIApiInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiInfo), nil
	}
}

func (a aPIApiInfoDo) FirstOrCreate() (*model.APIApiInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiInfo), nil
	}
}

func (a aPIApiInfoDo) FindByPage(offset int, limit int) (result []*model.APIApiInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIApiInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIApiInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIApiInfoDo) Delete(models ...*model.APIApiInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIApiInfoDo) withDO(do gen.Dao) *aPIApiInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
