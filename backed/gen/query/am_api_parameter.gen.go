// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmAPIParameter(db *gorm.DB, opts ...gen.DOOption) amAPIParameter {
	_amAPIParameter := amAPIParameter{}

	_amAPIParameter.amAPIParameterDo.UseDB(db, opts...)
	_amAPIParameter.amAPIParameterDo.UseModel(&model.AmAPIParameter{})

	tableName := _amAPIParameter.amAPIParameterDo.TableName()
	_amAPIParameter.ALL = field.NewAsterisk(tableName)
	_amAPIParameter.ID = field.NewInt64(tableName, "id")
	_amAPIParameter.Name = field.NewString(tableName, "name")
	_amAPIParameter.Type = field.NewString(tableName, "type")
	_amAPIParameter.Example = field.NewString(tableName, "example")
	_amAPIParameter.CreateBy = field.NewString(tableName, "create_by")
	_amAPIParameter.CreateTime = field.NewTime(tableName, "create_time")
	_amAPIParameter.APIID = field.NewInt64(tableName, "api_id")
	_amAPIParameter.Description = field.NewString(tableName, "description")
	_amAPIParameter.UpdateBy = field.NewString(tableName, "update_by")
	_amAPIParameter.UpdateTime = field.NewTime(tableName, "update_time")
	_amAPIParameter.IsDeleted = field.NewBool(tableName, "is_deleted")
	_amAPIParameter.IsEnabled = field.NewInt32(tableName, "is_enabled")
	_amAPIParameter.IsRequired = field.NewInt32(tableName, "is_required")
	_amAPIParameter.ParameterType = field.NewString(tableName, "parameter_type")

	_amAPIParameter.fillFieldMap()

	return _amAPIParameter
}

type amAPIParameter struct {
	amAPIParameterDo amAPIParameterDo

	ALL           field.Asterisk
	ID            field.Int64
	Name          field.String
	Type          field.String
	Example       field.String
	CreateBy      field.String
	CreateTime    field.Time
	APIID         field.Int64
	Description   field.String // 说明
	UpdateBy      field.String
	UpdateTime    field.Time
	IsDeleted     field.Bool
	IsEnabled     field.Int32
	IsRequired    field.Int32
	ParameterType field.String // 参数类型

	fieldMap map[string]field.Expr
}

func (a amAPIParameter) Table(newTableName string) *amAPIParameter {
	a.amAPIParameterDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amAPIParameter) As(alias string) *amAPIParameter {
	a.amAPIParameterDo.DO = *(a.amAPIParameterDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amAPIParameter) updateTableName(table string) *amAPIParameter {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewString(table, "type")
	a.Example = field.NewString(table, "example")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.APIID = field.NewInt64(table, "api_id")
	a.Description = field.NewString(table, "description")
	a.UpdateBy = field.NewString(table, "update_by")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.IsEnabled = field.NewInt32(table, "is_enabled")
	a.IsRequired = field.NewInt32(table, "is_required")
	a.ParameterType = field.NewString(table, "parameter_type")

	a.fillFieldMap()

	return a
}

func (a *amAPIParameter) WithContext(ctx context.Context) IAmAPIParameterDo {
	return a.amAPIParameterDo.WithContext(ctx)
}

func (a amAPIParameter) TableName() string { return a.amAPIParameterDo.TableName() }

func (a amAPIParameter) Alias() string { return a.amAPIParameterDo.Alias() }

func (a amAPIParameter) Columns(cols ...field.Expr) gen.Columns {
	return a.amAPIParameterDo.Columns(cols...)
}

func (a *amAPIParameter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amAPIParameter) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["example"] = a.Example
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["api_id"] = a.APIID
	a.fieldMap["description"] = a.Description
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["is_enabled"] = a.IsEnabled
	a.fieldMap["is_required"] = a.IsRequired
	a.fieldMap["parameter_type"] = a.ParameterType
}

func (a amAPIParameter) clone(db *gorm.DB) amAPIParameter {
	a.amAPIParameterDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amAPIParameter) replaceDB(db *gorm.DB) amAPIParameter {
	a.amAPIParameterDo.ReplaceDB(db)
	return a
}

type amAPIParameterDo struct{ gen.DO }

type IAmAPIParameterDo interface {
	gen.SubQuery
	Debug() IAmAPIParameterDo
	WithContext(ctx context.Context) IAmAPIParameterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmAPIParameterDo
	WriteDB() IAmAPIParameterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmAPIParameterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmAPIParameterDo
	Not(conds ...gen.Condition) IAmAPIParameterDo
	Or(conds ...gen.Condition) IAmAPIParameterDo
	Select(conds ...field.Expr) IAmAPIParameterDo
	Where(conds ...gen.Condition) IAmAPIParameterDo
	Order(conds ...field.Expr) IAmAPIParameterDo
	Distinct(cols ...field.Expr) IAmAPIParameterDo
	Omit(cols ...field.Expr) IAmAPIParameterDo
	Join(table schema.Tabler, on ...field.Expr) IAmAPIParameterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIParameterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIParameterDo
	Group(cols ...field.Expr) IAmAPIParameterDo
	Having(conds ...gen.Condition) IAmAPIParameterDo
	Limit(limit int) IAmAPIParameterDo
	Offset(offset int) IAmAPIParameterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIParameterDo
	Unscoped() IAmAPIParameterDo
	Create(values ...*model.AmAPIParameter) error
	CreateInBatches(values []*model.AmAPIParameter, batchSize int) error
	Save(values ...*model.AmAPIParameter) error
	First() (*model.AmAPIParameter, error)
	Take() (*model.AmAPIParameter, error)
	Last() (*model.AmAPIParameter, error)
	Find() ([]*model.AmAPIParameter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPIParameter, err error)
	FindInBatches(result *[]*model.AmAPIParameter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmAPIParameter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmAPIParameterDo
	Assign(attrs ...field.AssignExpr) IAmAPIParameterDo
	Joins(fields ...field.RelationField) IAmAPIParameterDo
	Preload(fields ...field.RelationField) IAmAPIParameterDo
	FirstOrInit() (*model.AmAPIParameter, error)
	FirstOrCreate() (*model.AmAPIParameter, error)
	FindByPage(offset int, limit int) (result []*model.AmAPIParameter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmAPIParameterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amAPIParameterDo) Debug() IAmAPIParameterDo {
	return a.withDO(a.DO.Debug())
}

func (a amAPIParameterDo) WithContext(ctx context.Context) IAmAPIParameterDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amAPIParameterDo) ReadDB() IAmAPIParameterDo {
	return a.Clauses(dbresolver.Read)
}

func (a amAPIParameterDo) WriteDB() IAmAPIParameterDo {
	return a.Clauses(dbresolver.Write)
}

func (a amAPIParameterDo) Session(config *gorm.Session) IAmAPIParameterDo {
	return a.withDO(a.DO.Session(config))
}

func (a amAPIParameterDo) Clauses(conds ...clause.Expression) IAmAPIParameterDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amAPIParameterDo) Returning(value interface{}, columns ...string) IAmAPIParameterDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amAPIParameterDo) Not(conds ...gen.Condition) IAmAPIParameterDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amAPIParameterDo) Or(conds ...gen.Condition) IAmAPIParameterDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amAPIParameterDo) Select(conds ...field.Expr) IAmAPIParameterDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amAPIParameterDo) Where(conds ...gen.Condition) IAmAPIParameterDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amAPIParameterDo) Order(conds ...field.Expr) IAmAPIParameterDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amAPIParameterDo) Distinct(cols ...field.Expr) IAmAPIParameterDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amAPIParameterDo) Omit(cols ...field.Expr) IAmAPIParameterDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amAPIParameterDo) Join(table schema.Tabler, on ...field.Expr) IAmAPIParameterDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amAPIParameterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIParameterDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amAPIParameterDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIParameterDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amAPIParameterDo) Group(cols ...field.Expr) IAmAPIParameterDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amAPIParameterDo) Having(conds ...gen.Condition) IAmAPIParameterDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amAPIParameterDo) Limit(limit int) IAmAPIParameterDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amAPIParameterDo) Offset(offset int) IAmAPIParameterDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amAPIParameterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIParameterDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amAPIParameterDo) Unscoped() IAmAPIParameterDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amAPIParameterDo) Create(values ...*model.AmAPIParameter) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amAPIParameterDo) CreateInBatches(values []*model.AmAPIParameter, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amAPIParameterDo) Save(values ...*model.AmAPIParameter) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amAPIParameterDo) First() (*model.AmAPIParameter, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIParameter), nil
	}
}

func (a amAPIParameterDo) Take() (*model.AmAPIParameter, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIParameter), nil
	}
}

func (a amAPIParameterDo) Last() (*model.AmAPIParameter, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIParameter), nil
	}
}

func (a amAPIParameterDo) Find() ([]*model.AmAPIParameter, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmAPIParameter), err
}

func (a amAPIParameterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPIParameter, err error) {
	buf := make([]*model.AmAPIParameter, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amAPIParameterDo) FindInBatches(result *[]*model.AmAPIParameter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amAPIParameterDo) Attrs(attrs ...field.AssignExpr) IAmAPIParameterDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amAPIParameterDo) Assign(attrs ...field.AssignExpr) IAmAPIParameterDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amAPIParameterDo) Joins(fields ...field.RelationField) IAmAPIParameterDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amAPIParameterDo) Preload(fields ...field.RelationField) IAmAPIParameterDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amAPIParameterDo) FirstOrInit() (*model.AmAPIParameter, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIParameter), nil
	}
}

func (a amAPIParameterDo) FirstOrCreate() (*model.AmAPIParameter, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIParameter), nil
	}
}

func (a amAPIParameterDo) FindByPage(offset int, limit int) (result []*model.AmAPIParameter, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amAPIParameterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amAPIParameterDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amAPIParameterDo) Delete(models ...*model.AmAPIParameter) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amAPIParameterDo) withDO(do gen.Dao) *amAPIParameterDo {
	a.DO = *do.(*gen.DO)
	return a
}
