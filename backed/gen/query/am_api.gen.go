// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmAPI(db *gorm.DB, opts ...gen.DOOption) amAPI {
	_amAPI := amAPI{}

	_amAPI.amAPIDo.UseDB(db, opts...)
	_amAPI.amAPIDo.UseModel(&model.AmAPI{})

	tableName := _amAPI.amAPIDo.TableName()
	_amAPI.ALL = field.NewAsterisk(tableName)
	_amAPI.ID = field.NewInt32(tableName, "id")
	_amAPI.Name = field.NewString(tableName, "name")
	_amAPI.Type = field.NewString(tableName, "type")
	_amAPI.Path = field.NewString(tableName, "path")
	_amAPI.Status = field.NewString(tableName, "status")
	_amAPI.CreateBy = field.NewString(tableName, "create_by")
	_amAPI.UpdateBy = field.NewString(tableName, "update_by")
	_amAPI.CreateTime = field.NewTime(tableName, "create_time")
	_amAPI.UpdateTime = field.NewTime(tableName, "update_time")
	_amAPI.IsDeleted = field.NewBool(tableName, "is_deleted")
	_amAPI.Manager = field.NewString(tableName, "manager")
	_amAPI.Tag = field.NewString(tableName, "tag")
	_amAPI.Method = field.NewString(tableName, "method")
	_amAPI.ParentID = field.NewInt64(tableName, "parent_id")
	_amAPI.Content = field.NewString(tableName, "content")
	_amAPI.Remark = field.NewString(tableName, "remark")
	_amAPI.ServerID = field.NewString(tableName, "server_id")
	_amAPI.ProjectID = field.NewInt64(tableName, "project_id")

	_amAPI.fillFieldMap()

	return _amAPI
}

type amAPI struct {
	amAPIDo amAPIDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Type       field.String
	Path       field.String
	Status     field.String
	CreateBy   field.String
	UpdateBy   field.String
	CreateTime field.Time
	UpdateTime field.Time
	IsDeleted  field.Bool
	Manager    field.String // 负责人
	Tag        field.String
	Method     field.String
	ParentID   field.Int64
	Content    field.String
	Remark     field.String
	ServerID   field.String
	ProjectID  field.Int64

	fieldMap map[string]field.Expr
}

func (a amAPI) Table(newTableName string) *amAPI {
	a.amAPIDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amAPI) As(alias string) *amAPI {
	a.amAPIDo.DO = *(a.amAPIDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amAPI) updateTableName(table string) *amAPI {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewString(table, "type")
	a.Path = field.NewString(table, "path")
	a.Status = field.NewString(table, "status")
	a.CreateBy = field.NewString(table, "create_by")
	a.UpdateBy = field.NewString(table, "update_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.Manager = field.NewString(table, "manager")
	a.Tag = field.NewString(table, "tag")
	a.Method = field.NewString(table, "method")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.Content = field.NewString(table, "content")
	a.Remark = field.NewString(table, "remark")
	a.ServerID = field.NewString(table, "server_id")
	a.ProjectID = field.NewInt64(table, "project_id")

	a.fillFieldMap()

	return a
}

func (a *amAPI) WithContext(ctx context.Context) IAmAPIDo { return a.amAPIDo.WithContext(ctx) }

func (a amAPI) TableName() string { return a.amAPIDo.TableName() }

func (a amAPI) Alias() string { return a.amAPIDo.Alias() }

func (a amAPI) Columns(cols ...field.Expr) gen.Columns { return a.amAPIDo.Columns(cols...) }

func (a *amAPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amAPI) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["path"] = a.Path
	a.fieldMap["status"] = a.Status
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["manager"] = a.Manager
	a.fieldMap["tag"] = a.Tag
	a.fieldMap["method"] = a.Method
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["content"] = a.Content
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["server_id"] = a.ServerID
	a.fieldMap["project_id"] = a.ProjectID
}

func (a amAPI) clone(db *gorm.DB) amAPI {
	a.amAPIDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amAPI) replaceDB(db *gorm.DB) amAPI {
	a.amAPIDo.ReplaceDB(db)
	return a
}

type amAPIDo struct{ gen.DO }

type IAmAPIDo interface {
	gen.SubQuery
	Debug() IAmAPIDo
	WithContext(ctx context.Context) IAmAPIDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmAPIDo
	WriteDB() IAmAPIDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmAPIDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmAPIDo
	Not(conds ...gen.Condition) IAmAPIDo
	Or(conds ...gen.Condition) IAmAPIDo
	Select(conds ...field.Expr) IAmAPIDo
	Where(conds ...gen.Condition) IAmAPIDo
	Order(conds ...field.Expr) IAmAPIDo
	Distinct(cols ...field.Expr) IAmAPIDo
	Omit(cols ...field.Expr) IAmAPIDo
	Join(table schema.Tabler, on ...field.Expr) IAmAPIDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIDo
	Group(cols ...field.Expr) IAmAPIDo
	Having(conds ...gen.Condition) IAmAPIDo
	Limit(limit int) IAmAPIDo
	Offset(offset int) IAmAPIDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIDo
	Unscoped() IAmAPIDo
	Create(values ...*model.AmAPI) error
	CreateInBatches(values []*model.AmAPI, batchSize int) error
	Save(values ...*model.AmAPI) error
	First() (*model.AmAPI, error)
	Take() (*model.AmAPI, error)
	Last() (*model.AmAPI, error)
	Find() ([]*model.AmAPI, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPI, err error)
	FindInBatches(result *[]*model.AmAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmAPI) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmAPIDo
	Assign(attrs ...field.AssignExpr) IAmAPIDo
	Joins(fields ...field.RelationField) IAmAPIDo
	Preload(fields ...field.RelationField) IAmAPIDo
	FirstOrInit() (*model.AmAPI, error)
	FirstOrCreate() (*model.AmAPI, error)
	FindByPage(offset int, limit int) (result []*model.AmAPI, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmAPIDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amAPIDo) Debug() IAmAPIDo {
	return a.withDO(a.DO.Debug())
}

func (a amAPIDo) WithContext(ctx context.Context) IAmAPIDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amAPIDo) ReadDB() IAmAPIDo {
	return a.Clauses(dbresolver.Read)
}

func (a amAPIDo) WriteDB() IAmAPIDo {
	return a.Clauses(dbresolver.Write)
}

func (a amAPIDo) Session(config *gorm.Session) IAmAPIDo {
	return a.withDO(a.DO.Session(config))
}

func (a amAPIDo) Clauses(conds ...clause.Expression) IAmAPIDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amAPIDo) Returning(value interface{}, columns ...string) IAmAPIDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amAPIDo) Not(conds ...gen.Condition) IAmAPIDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amAPIDo) Or(conds ...gen.Condition) IAmAPIDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amAPIDo) Select(conds ...field.Expr) IAmAPIDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amAPIDo) Where(conds ...gen.Condition) IAmAPIDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amAPIDo) Order(conds ...field.Expr) IAmAPIDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amAPIDo) Distinct(cols ...field.Expr) IAmAPIDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amAPIDo) Omit(cols ...field.Expr) IAmAPIDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amAPIDo) Join(table schema.Tabler, on ...field.Expr) IAmAPIDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amAPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amAPIDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amAPIDo) Group(cols ...field.Expr) IAmAPIDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amAPIDo) Having(conds ...gen.Condition) IAmAPIDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amAPIDo) Limit(limit int) IAmAPIDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amAPIDo) Offset(offset int) IAmAPIDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amAPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amAPIDo) Unscoped() IAmAPIDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amAPIDo) Create(values ...*model.AmAPI) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amAPIDo) CreateInBatches(values []*model.AmAPI, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amAPIDo) Save(values ...*model.AmAPI) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amAPIDo) First() (*model.AmAPI, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPI), nil
	}
}

func (a amAPIDo) Take() (*model.AmAPI, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPI), nil
	}
}

func (a amAPIDo) Last() (*model.AmAPI, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPI), nil
	}
}

func (a amAPIDo) Find() ([]*model.AmAPI, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmAPI), err
}

func (a amAPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPI, err error) {
	buf := make([]*model.AmAPI, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amAPIDo) FindInBatches(result *[]*model.AmAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amAPIDo) Attrs(attrs ...field.AssignExpr) IAmAPIDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amAPIDo) Assign(attrs ...field.AssignExpr) IAmAPIDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amAPIDo) Joins(fields ...field.RelationField) IAmAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amAPIDo) Preload(fields ...field.RelationField) IAmAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amAPIDo) FirstOrInit() (*model.AmAPI, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPI), nil
	}
}

func (a amAPIDo) FirstOrCreate() (*model.AmAPI, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPI), nil
	}
}

func (a amAPIDo) FindByPage(offset int, limit int) (result []*model.AmAPI, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amAPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amAPIDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amAPIDo) Delete(models ...*model.AmAPI) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amAPIDo) withDO(do gen.Dao) *amAPIDo {
	a.DO = *do.(*gen.DO)
	return a
}
