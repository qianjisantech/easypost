// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newGsTrafficManagerRequestBody(db *gorm.DB, opts ...gen.DOOption) gsTrafficManagerRequestBody {
	_gsTrafficManagerRequestBody := gsTrafficManagerRequestBody{}

	_gsTrafficManagerRequestBody.gsTrafficManagerRequestBodyDo.UseDB(db, opts...)
	_gsTrafficManagerRequestBody.gsTrafficManagerRequestBodyDo.UseModel(&model.GsTrafficManagerRequestBody{})

	tableName := _gsTrafficManagerRequestBody.gsTrafficManagerRequestBodyDo.TableName()
	_gsTrafficManagerRequestBody.ALL = field.NewAsterisk(tableName)
	_gsTrafficManagerRequestBody.ID = field.NewInt64(tableName, "id")
	_gsTrafficManagerRequestBody.Value = field.NewString(tableName, "value")
	_gsTrafficManagerRequestBody.TrafficID = field.NewInt64(tableName, "traffic_id")
	_gsTrafficManagerRequestBody.RecordTime = field.NewTime(tableName, "record_time")

	_gsTrafficManagerRequestBody.fillFieldMap()

	return _gsTrafficManagerRequestBody
}

type gsTrafficManagerRequestBody struct {
	gsTrafficManagerRequestBodyDo gsTrafficManagerRequestBodyDo

	ALL        field.Asterisk
	ID         field.Int64
	Value      field.String
	TrafficID  field.Int64
	RecordTime field.Time

	fieldMap map[string]field.Expr
}

func (g gsTrafficManagerRequestBody) Table(newTableName string) *gsTrafficManagerRequestBody {
	g.gsTrafficManagerRequestBodyDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gsTrafficManagerRequestBody) As(alias string) *gsTrafficManagerRequestBody {
	g.gsTrafficManagerRequestBodyDo.DO = *(g.gsTrafficManagerRequestBodyDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gsTrafficManagerRequestBody) updateTableName(table string) *gsTrafficManagerRequestBody {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Value = field.NewString(table, "value")
	g.TrafficID = field.NewInt64(table, "traffic_id")
	g.RecordTime = field.NewTime(table, "record_time")

	g.fillFieldMap()

	return g
}

func (g *gsTrafficManagerRequestBody) WithContext(ctx context.Context) IGsTrafficManagerRequestBodyDo {
	return g.gsTrafficManagerRequestBodyDo.WithContext(ctx)
}

func (g gsTrafficManagerRequestBody) TableName() string {
	return g.gsTrafficManagerRequestBodyDo.TableName()
}

func (g gsTrafficManagerRequestBody) Alias() string { return g.gsTrafficManagerRequestBodyDo.Alias() }

func (g gsTrafficManagerRequestBody) Columns(cols ...field.Expr) gen.Columns {
	return g.gsTrafficManagerRequestBodyDo.Columns(cols...)
}

func (g *gsTrafficManagerRequestBody) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gsTrafficManagerRequestBody) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["id"] = g.ID
	g.fieldMap["value"] = g.Value
	g.fieldMap["traffic_id"] = g.TrafficID
	g.fieldMap["record_time"] = g.RecordTime
}

func (g gsTrafficManagerRequestBody) clone(db *gorm.DB) gsTrafficManagerRequestBody {
	g.gsTrafficManagerRequestBodyDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gsTrafficManagerRequestBody) replaceDB(db *gorm.DB) gsTrafficManagerRequestBody {
	g.gsTrafficManagerRequestBodyDo.ReplaceDB(db)
	return g
}

type gsTrafficManagerRequestBodyDo struct{ gen.DO }

type IGsTrafficManagerRequestBodyDo interface {
	gen.SubQuery
	Debug() IGsTrafficManagerRequestBodyDo
	WithContext(ctx context.Context) IGsTrafficManagerRequestBodyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGsTrafficManagerRequestBodyDo
	WriteDB() IGsTrafficManagerRequestBodyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGsTrafficManagerRequestBodyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGsTrafficManagerRequestBodyDo
	Not(conds ...gen.Condition) IGsTrafficManagerRequestBodyDo
	Or(conds ...gen.Condition) IGsTrafficManagerRequestBodyDo
	Select(conds ...field.Expr) IGsTrafficManagerRequestBodyDo
	Where(conds ...gen.Condition) IGsTrafficManagerRequestBodyDo
	Order(conds ...field.Expr) IGsTrafficManagerRequestBodyDo
	Distinct(cols ...field.Expr) IGsTrafficManagerRequestBodyDo
	Omit(cols ...field.Expr) IGsTrafficManagerRequestBodyDo
	Join(table schema.Tabler, on ...field.Expr) IGsTrafficManagerRequestBodyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerRequestBodyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerRequestBodyDo
	Group(cols ...field.Expr) IGsTrafficManagerRequestBodyDo
	Having(conds ...gen.Condition) IGsTrafficManagerRequestBodyDo
	Limit(limit int) IGsTrafficManagerRequestBodyDo
	Offset(offset int) IGsTrafficManagerRequestBodyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGsTrafficManagerRequestBodyDo
	Unscoped() IGsTrafficManagerRequestBodyDo
	Create(values ...*model.GsTrafficManagerRequestBody) error
	CreateInBatches(values []*model.GsTrafficManagerRequestBody, batchSize int) error
	Save(values ...*model.GsTrafficManagerRequestBody) error
	First() (*model.GsTrafficManagerRequestBody, error)
	Take() (*model.GsTrafficManagerRequestBody, error)
	Last() (*model.GsTrafficManagerRequestBody, error)
	Find() ([]*model.GsTrafficManagerRequestBody, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GsTrafficManagerRequestBody, err error)
	FindInBatches(result *[]*model.GsTrafficManagerRequestBody, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GsTrafficManagerRequestBody) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGsTrafficManagerRequestBodyDo
	Assign(attrs ...field.AssignExpr) IGsTrafficManagerRequestBodyDo
	Joins(fields ...field.RelationField) IGsTrafficManagerRequestBodyDo
	Preload(fields ...field.RelationField) IGsTrafficManagerRequestBodyDo
	FirstOrInit() (*model.GsTrafficManagerRequestBody, error)
	FirstOrCreate() (*model.GsTrafficManagerRequestBody, error)
	FindByPage(offset int, limit int) (result []*model.GsTrafficManagerRequestBody, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGsTrafficManagerRequestBodyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gsTrafficManagerRequestBodyDo) Debug() IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Debug())
}

func (g gsTrafficManagerRequestBodyDo) WithContext(ctx context.Context) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gsTrafficManagerRequestBodyDo) ReadDB() IGsTrafficManagerRequestBodyDo {
	return g.Clauses(dbresolver.Read)
}

func (g gsTrafficManagerRequestBodyDo) WriteDB() IGsTrafficManagerRequestBodyDo {
	return g.Clauses(dbresolver.Write)
}

func (g gsTrafficManagerRequestBodyDo) Session(config *gorm.Session) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Session(config))
}

func (g gsTrafficManagerRequestBodyDo) Clauses(conds ...clause.Expression) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gsTrafficManagerRequestBodyDo) Returning(value interface{}, columns ...string) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gsTrafficManagerRequestBodyDo) Not(conds ...gen.Condition) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gsTrafficManagerRequestBodyDo) Or(conds ...gen.Condition) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gsTrafficManagerRequestBodyDo) Select(conds ...field.Expr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gsTrafficManagerRequestBodyDo) Where(conds ...gen.Condition) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gsTrafficManagerRequestBodyDo) Order(conds ...field.Expr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gsTrafficManagerRequestBodyDo) Distinct(cols ...field.Expr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gsTrafficManagerRequestBodyDo) Omit(cols ...field.Expr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gsTrafficManagerRequestBodyDo) Join(table schema.Tabler, on ...field.Expr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gsTrafficManagerRequestBodyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gsTrafficManagerRequestBodyDo) RightJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gsTrafficManagerRequestBodyDo) Group(cols ...field.Expr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gsTrafficManagerRequestBodyDo) Having(conds ...gen.Condition) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gsTrafficManagerRequestBodyDo) Limit(limit int) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gsTrafficManagerRequestBodyDo) Offset(offset int) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gsTrafficManagerRequestBodyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gsTrafficManagerRequestBodyDo) Unscoped() IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gsTrafficManagerRequestBodyDo) Create(values ...*model.GsTrafficManagerRequestBody) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gsTrafficManagerRequestBodyDo) CreateInBatches(values []*model.GsTrafficManagerRequestBody, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gsTrafficManagerRequestBodyDo) Save(values ...*model.GsTrafficManagerRequestBody) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gsTrafficManagerRequestBodyDo) First() (*model.GsTrafficManagerRequestBody, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerRequestBody), nil
	}
}

func (g gsTrafficManagerRequestBodyDo) Take() (*model.GsTrafficManagerRequestBody, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerRequestBody), nil
	}
}

func (g gsTrafficManagerRequestBodyDo) Last() (*model.GsTrafficManagerRequestBody, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerRequestBody), nil
	}
}

func (g gsTrafficManagerRequestBodyDo) Find() ([]*model.GsTrafficManagerRequestBody, error) {
	result, err := g.DO.Find()
	return result.([]*model.GsTrafficManagerRequestBody), err
}

func (g gsTrafficManagerRequestBodyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GsTrafficManagerRequestBody, err error) {
	buf := make([]*model.GsTrafficManagerRequestBody, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gsTrafficManagerRequestBodyDo) FindInBatches(result *[]*model.GsTrafficManagerRequestBody, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gsTrafficManagerRequestBodyDo) Attrs(attrs ...field.AssignExpr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gsTrafficManagerRequestBodyDo) Assign(attrs ...field.AssignExpr) IGsTrafficManagerRequestBodyDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gsTrafficManagerRequestBodyDo) Joins(fields ...field.RelationField) IGsTrafficManagerRequestBodyDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gsTrafficManagerRequestBodyDo) Preload(fields ...field.RelationField) IGsTrafficManagerRequestBodyDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gsTrafficManagerRequestBodyDo) FirstOrInit() (*model.GsTrafficManagerRequestBody, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerRequestBody), nil
	}
}

func (g gsTrafficManagerRequestBodyDo) FirstOrCreate() (*model.GsTrafficManagerRequestBody, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerRequestBody), nil
	}
}

func (g gsTrafficManagerRequestBodyDo) FindByPage(offset int, limit int) (result []*model.GsTrafficManagerRequestBody, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gsTrafficManagerRequestBodyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gsTrafficManagerRequestBodyDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gsTrafficManagerRequestBodyDo) Delete(models ...*model.GsTrafficManagerRequestBody) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gsTrafficManagerRequestBodyDo) withDO(do gen.Dao) *gsTrafficManagerRequestBodyDo {
	g.DO = *do.(*gen.DO)
	return g
}
