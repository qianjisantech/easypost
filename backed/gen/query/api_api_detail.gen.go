// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAPIApiDetail(db *gorm.DB, opts ...gen.DOOption) aPIApiDetail {
	_aPIApiDetail := aPIApiDetail{}

	_aPIApiDetail.aPIApiDetailDo.UseDB(db, opts...)
	_aPIApiDetail.aPIApiDetailDo.UseModel(&model.APIApiDetail{})

	tableName := _aPIApiDetail.aPIApiDetailDo.TableName()
	_aPIApiDetail.ALL = field.NewAsterisk(tableName)
	_aPIApiDetail.ID = field.NewInt32(tableName, "id")
	_aPIApiDetail.Name = field.NewString(tableName, "name")
	_aPIApiDetail.Type = field.NewString(tableName, "type")
	_aPIApiDetail.Path = field.NewString(tableName, "path")
	_aPIApiDetail.Status = field.NewString(tableName, "status")
	_aPIApiDetail.CreateBy = field.NewString(tableName, "create_by")
	_aPIApiDetail.UpdateBy = field.NewString(tableName, "update_by")
	_aPIApiDetail.CreateTime = field.NewTime(tableName, "create_time")
	_aPIApiDetail.UpdateTime = field.NewTime(tableName, "update_time")
	_aPIApiDetail.IsDeleted = field.NewBool(tableName, "is_deleted")
	_aPIApiDetail.Manager = field.NewString(tableName, "manager")
	_aPIApiDetail.Tag = field.NewString(tableName, "tag")
	_aPIApiDetail.Method = field.NewString(tableName, "method")
	_aPIApiDetail.ParentID = field.NewString(tableName, "parent_id")
	_aPIApiDetail.Content = field.NewString(tableName, "content")
	_aPIApiDetail.Remark = field.NewString(tableName, "remark")
	_aPIApiDetail.ServerID = field.NewString(tableName, "server_id")

	_aPIApiDetail.fillFieldMap()

	return _aPIApiDetail
}

type aPIApiDetail struct {
	aPIApiDetailDo aPIApiDetailDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Type       field.String
	Path       field.String
	Status     field.String
	CreateBy   field.String
	UpdateBy   field.String
	CreateTime field.Time
	UpdateTime field.Time
	IsDeleted  field.Bool
	Manager    field.String // 负责人
	Tag        field.String
	Method     field.String
	ParentID   field.String
	Content    field.String
	Remark     field.String
	ServerID   field.String

	fieldMap map[string]field.Expr
}

func (a aPIApiDetail) Table(newTableName string) *aPIApiDetail {
	a.aPIApiDetailDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIApiDetail) As(alias string) *aPIApiDetail {
	a.aPIApiDetailDo.DO = *(a.aPIApiDetailDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIApiDetail) updateTableName(table string) *aPIApiDetail {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewString(table, "type")
	a.Path = field.NewString(table, "path")
	a.Status = field.NewString(table, "status")
	a.CreateBy = field.NewString(table, "create_by")
	a.UpdateBy = field.NewString(table, "update_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.Manager = field.NewString(table, "manager")
	a.Tag = field.NewString(table, "tag")
	a.Method = field.NewString(table, "method")
	a.ParentID = field.NewString(table, "parent_id")
	a.Content = field.NewString(table, "content")
	a.Remark = field.NewString(table, "remark")
	a.ServerID = field.NewString(table, "server_id")

	a.fillFieldMap()

	return a
}

func (a *aPIApiDetail) WithContext(ctx context.Context) IAPIApiDetailDo {
	return a.aPIApiDetailDo.WithContext(ctx)
}

func (a aPIApiDetail) TableName() string { return a.aPIApiDetailDo.TableName() }

func (a aPIApiDetail) Alias() string { return a.aPIApiDetailDo.Alias() }

func (a aPIApiDetail) Columns(cols ...field.Expr) gen.Columns {
	return a.aPIApiDetailDo.Columns(cols...)
}

func (a *aPIApiDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIApiDetail) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["path"] = a.Path
	a.fieldMap["status"] = a.Status
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["manager"] = a.Manager
	a.fieldMap["tag"] = a.Tag
	a.fieldMap["method"] = a.Method
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["content"] = a.Content
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["server_id"] = a.ServerID
}

func (a aPIApiDetail) clone(db *gorm.DB) aPIApiDetail {
	a.aPIApiDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIApiDetail) replaceDB(db *gorm.DB) aPIApiDetail {
	a.aPIApiDetailDo.ReplaceDB(db)
	return a
}

type aPIApiDetailDo struct{ gen.DO }

type IAPIApiDetailDo interface {
	gen.SubQuery
	Debug() IAPIApiDetailDo
	WithContext(ctx context.Context) IAPIApiDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIApiDetailDo
	WriteDB() IAPIApiDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIApiDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIApiDetailDo
	Not(conds ...gen.Condition) IAPIApiDetailDo
	Or(conds ...gen.Condition) IAPIApiDetailDo
	Select(conds ...field.Expr) IAPIApiDetailDo
	Where(conds ...gen.Condition) IAPIApiDetailDo
	Order(conds ...field.Expr) IAPIApiDetailDo
	Distinct(cols ...field.Expr) IAPIApiDetailDo
	Omit(cols ...field.Expr) IAPIApiDetailDo
	Join(table schema.Tabler, on ...field.Expr) IAPIApiDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIApiDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIApiDetailDo
	Group(cols ...field.Expr) IAPIApiDetailDo
	Having(conds ...gen.Condition) IAPIApiDetailDo
	Limit(limit int) IAPIApiDetailDo
	Offset(offset int) IAPIApiDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIApiDetailDo
	Unscoped() IAPIApiDetailDo
	Create(values ...*model.APIApiDetail) error
	CreateInBatches(values []*model.APIApiDetail, batchSize int) error
	Save(values ...*model.APIApiDetail) error
	First() (*model.APIApiDetail, error)
	Take() (*model.APIApiDetail, error)
	Last() (*model.APIApiDetail, error)
	Find() ([]*model.APIApiDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIApiDetail, err error)
	FindInBatches(result *[]*model.APIApiDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIApiDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIApiDetailDo
	Assign(attrs ...field.AssignExpr) IAPIApiDetailDo
	Joins(fields ...field.RelationField) IAPIApiDetailDo
	Preload(fields ...field.RelationField) IAPIApiDetailDo
	FirstOrInit() (*model.APIApiDetail, error)
	FirstOrCreate() (*model.APIApiDetail, error)
	FindByPage(offset int, limit int) (result []*model.APIApiDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIApiDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIApiDetailDo) Debug() IAPIApiDetailDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIApiDetailDo) WithContext(ctx context.Context) IAPIApiDetailDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIApiDetailDo) ReadDB() IAPIApiDetailDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIApiDetailDo) WriteDB() IAPIApiDetailDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIApiDetailDo) Session(config *gorm.Session) IAPIApiDetailDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIApiDetailDo) Clauses(conds ...clause.Expression) IAPIApiDetailDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIApiDetailDo) Returning(value interface{}, columns ...string) IAPIApiDetailDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIApiDetailDo) Not(conds ...gen.Condition) IAPIApiDetailDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIApiDetailDo) Or(conds ...gen.Condition) IAPIApiDetailDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIApiDetailDo) Select(conds ...field.Expr) IAPIApiDetailDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIApiDetailDo) Where(conds ...gen.Condition) IAPIApiDetailDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIApiDetailDo) Order(conds ...field.Expr) IAPIApiDetailDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIApiDetailDo) Distinct(cols ...field.Expr) IAPIApiDetailDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIApiDetailDo) Omit(cols ...field.Expr) IAPIApiDetailDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIApiDetailDo) Join(table schema.Tabler, on ...field.Expr) IAPIApiDetailDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIApiDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIApiDetailDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIApiDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIApiDetailDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIApiDetailDo) Group(cols ...field.Expr) IAPIApiDetailDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIApiDetailDo) Having(conds ...gen.Condition) IAPIApiDetailDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIApiDetailDo) Limit(limit int) IAPIApiDetailDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIApiDetailDo) Offset(offset int) IAPIApiDetailDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIApiDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIApiDetailDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIApiDetailDo) Unscoped() IAPIApiDetailDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIApiDetailDo) Create(values ...*model.APIApiDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIApiDetailDo) CreateInBatches(values []*model.APIApiDetail, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIApiDetailDo) Save(values ...*model.APIApiDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIApiDetailDo) First() (*model.APIApiDetail, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiDetail), nil
	}
}

func (a aPIApiDetailDo) Take() (*model.APIApiDetail, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiDetail), nil
	}
}

func (a aPIApiDetailDo) Last() (*model.APIApiDetail, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiDetail), nil
	}
}

func (a aPIApiDetailDo) Find() ([]*model.APIApiDetail, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIApiDetail), err
}

func (a aPIApiDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIApiDetail, err error) {
	buf := make([]*model.APIApiDetail, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIApiDetailDo) FindInBatches(result *[]*model.APIApiDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIApiDetailDo) Attrs(attrs ...field.AssignExpr) IAPIApiDetailDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIApiDetailDo) Assign(attrs ...field.AssignExpr) IAPIApiDetailDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIApiDetailDo) Joins(fields ...field.RelationField) IAPIApiDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIApiDetailDo) Preload(fields ...field.RelationField) IAPIApiDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIApiDetailDo) FirstOrInit() (*model.APIApiDetail, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiDetail), nil
	}
}

func (a aPIApiDetailDo) FirstOrCreate() (*model.APIApiDetail, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiDetail), nil
	}
}

func (a aPIApiDetailDo) FindByPage(offset int, limit int) (result []*model.APIApiDetail, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIApiDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIApiDetailDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIApiDetailDo) Delete(models ...*model.APIApiDetail) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIApiDetailDo) withDO(do gen.Dao) *aPIApiDetailDo {
	a.DO = *do.(*gen.DO)
	return a
}
