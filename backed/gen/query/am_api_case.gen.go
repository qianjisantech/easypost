// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmAPICase(db *gorm.DB, opts ...gen.DOOption) amAPICase {
	_amAPICase := amAPICase{}

	_amAPICase.amAPICaseDo.UseDB(db, opts...)
	_amAPICase.amAPICaseDo.UseModel(&model.AmAPICase{})

	tableName := _amAPICase.amAPICaseDo.TableName()
	_amAPICase.ALL = field.NewAsterisk(tableName)
	_amAPICase.ID = field.NewInt64(tableName, "id")
	_amAPICase.Name = field.NewString(tableName, "name")
	_amAPICase.Path = field.NewString(tableName, "path")
	_amAPICase.CreateBy = field.NewInt64(tableName, "create_by")
	_amAPICase.CreateByName = field.NewString(tableName, "create_by_name")
	_amAPICase.UpdateBy = field.NewInt64(tableName, "update_by")
	_amAPICase.UpdateByName = field.NewString(tableName, "update_by_name")
	_amAPICase.CreateTime = field.NewTime(tableName, "create_time")
	_amAPICase.UpdateTime = field.NewTime(tableName, "update_time")
	_amAPICase.IsDeleted = field.NewBool(tableName, "is_deleted")
	_amAPICase.Method = field.NewString(tableName, "method")
	_amAPICase.ParentID = field.NewInt64(tableName, "parent_id")
	_amAPICase.ProjectID = field.NewInt64(tableName, "project_id")
	_amAPICase.Parameters = field.NewString(tableName, "parameters")
	_amAPICase.Responses = field.NewString(tableName, "responses")
	_amAPICase.RequestBody = field.NewString(tableName, "request_body")

	_amAPICase.fillFieldMap()

	return _amAPICase
}

// amAPICase 接口用例表
type amAPICase struct {
	amAPICaseDo amAPICaseDo

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String
	Path         field.String
	CreateBy     field.Int64
	CreateByName field.String
	UpdateBy     field.Int64
	UpdateByName field.String
	CreateTime   field.Time
	UpdateTime   field.Time
	IsDeleted    field.Bool
	Method       field.String
	ParentID     field.Int64
	ProjectID    field.Int64
	Parameters   field.String
	Responses    field.String
	RequestBody  field.String

	fieldMap map[string]field.Expr
}

func (a amAPICase) Table(newTableName string) *amAPICase {
	a.amAPICaseDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amAPICase) As(alias string) *amAPICase {
	a.amAPICaseDo.DO = *(a.amAPICaseDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amAPICase) updateTableName(table string) *amAPICase {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Path = field.NewString(table, "path")
	a.CreateBy = field.NewInt64(table, "create_by")
	a.CreateByName = field.NewString(table, "create_by_name")
	a.UpdateBy = field.NewInt64(table, "update_by")
	a.UpdateByName = field.NewString(table, "update_by_name")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.Method = field.NewString(table, "method")
	a.ParentID = field.NewInt64(table, "parent_id")
	a.ProjectID = field.NewInt64(table, "project_id")
	a.Parameters = field.NewString(table, "parameters")
	a.Responses = field.NewString(table, "responses")
	a.RequestBody = field.NewString(table, "request_body")

	a.fillFieldMap()

	return a
}

func (a *amAPICase) WithContext(ctx context.Context) IAmAPICaseDo {
	return a.amAPICaseDo.WithContext(ctx)
}

func (a amAPICase) TableName() string { return a.amAPICaseDo.TableName() }

func (a amAPICase) Alias() string { return a.amAPICaseDo.Alias() }

func (a amAPICase) Columns(cols ...field.Expr) gen.Columns { return a.amAPICaseDo.Columns(cols...) }

func (a *amAPICase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amAPICase) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["path"] = a.Path
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_by_name"] = a.CreateByName
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_by_name"] = a.UpdateByName
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["method"] = a.Method
	a.fieldMap["parent_id"] = a.ParentID
	a.fieldMap["project_id"] = a.ProjectID
	a.fieldMap["parameters"] = a.Parameters
	a.fieldMap["responses"] = a.Responses
	a.fieldMap["request_body"] = a.RequestBody
}

func (a amAPICase) clone(db *gorm.DB) amAPICase {
	a.amAPICaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amAPICase) replaceDB(db *gorm.DB) amAPICase {
	a.amAPICaseDo.ReplaceDB(db)
	return a
}

type amAPICaseDo struct{ gen.DO }

type IAmAPICaseDo interface {
	gen.SubQuery
	Debug() IAmAPICaseDo
	WithContext(ctx context.Context) IAmAPICaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmAPICaseDo
	WriteDB() IAmAPICaseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmAPICaseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmAPICaseDo
	Not(conds ...gen.Condition) IAmAPICaseDo
	Or(conds ...gen.Condition) IAmAPICaseDo
	Select(conds ...field.Expr) IAmAPICaseDo
	Where(conds ...gen.Condition) IAmAPICaseDo
	Order(conds ...field.Expr) IAmAPICaseDo
	Distinct(cols ...field.Expr) IAmAPICaseDo
	Omit(cols ...field.Expr) IAmAPICaseDo
	Join(table schema.Tabler, on ...field.Expr) IAmAPICaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPICaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmAPICaseDo
	Group(cols ...field.Expr) IAmAPICaseDo
	Having(conds ...gen.Condition) IAmAPICaseDo
	Limit(limit int) IAmAPICaseDo
	Offset(offset int) IAmAPICaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPICaseDo
	Unscoped() IAmAPICaseDo
	Create(values ...*model.AmAPICase) error
	CreateInBatches(values []*model.AmAPICase, batchSize int) error
	Save(values ...*model.AmAPICase) error
	First() (*model.AmAPICase, error)
	Take() (*model.AmAPICase, error)
	Last() (*model.AmAPICase, error)
	Find() ([]*model.AmAPICase, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPICase, err error)
	FindInBatches(result *[]*model.AmAPICase, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmAPICase) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmAPICaseDo
	Assign(attrs ...field.AssignExpr) IAmAPICaseDo
	Joins(fields ...field.RelationField) IAmAPICaseDo
	Preload(fields ...field.RelationField) IAmAPICaseDo
	FirstOrInit() (*model.AmAPICase, error)
	FirstOrCreate() (*model.AmAPICase, error)
	FindByPage(offset int, limit int) (result []*model.AmAPICase, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmAPICaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amAPICaseDo) Debug() IAmAPICaseDo {
	return a.withDO(a.DO.Debug())
}

func (a amAPICaseDo) WithContext(ctx context.Context) IAmAPICaseDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amAPICaseDo) ReadDB() IAmAPICaseDo {
	return a.Clauses(dbresolver.Read)
}

func (a amAPICaseDo) WriteDB() IAmAPICaseDo {
	return a.Clauses(dbresolver.Write)
}

func (a amAPICaseDo) Session(config *gorm.Session) IAmAPICaseDo {
	return a.withDO(a.DO.Session(config))
}

func (a amAPICaseDo) Clauses(conds ...clause.Expression) IAmAPICaseDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amAPICaseDo) Returning(value interface{}, columns ...string) IAmAPICaseDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amAPICaseDo) Not(conds ...gen.Condition) IAmAPICaseDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amAPICaseDo) Or(conds ...gen.Condition) IAmAPICaseDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amAPICaseDo) Select(conds ...field.Expr) IAmAPICaseDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amAPICaseDo) Where(conds ...gen.Condition) IAmAPICaseDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amAPICaseDo) Order(conds ...field.Expr) IAmAPICaseDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amAPICaseDo) Distinct(cols ...field.Expr) IAmAPICaseDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amAPICaseDo) Omit(cols ...field.Expr) IAmAPICaseDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amAPICaseDo) Join(table schema.Tabler, on ...field.Expr) IAmAPICaseDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amAPICaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPICaseDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amAPICaseDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmAPICaseDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amAPICaseDo) Group(cols ...field.Expr) IAmAPICaseDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amAPICaseDo) Having(conds ...gen.Condition) IAmAPICaseDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amAPICaseDo) Limit(limit int) IAmAPICaseDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amAPICaseDo) Offset(offset int) IAmAPICaseDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amAPICaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPICaseDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amAPICaseDo) Unscoped() IAmAPICaseDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amAPICaseDo) Create(values ...*model.AmAPICase) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amAPICaseDo) CreateInBatches(values []*model.AmAPICase, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amAPICaseDo) Save(values ...*model.AmAPICase) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amAPICaseDo) First() (*model.AmAPICase, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPICase), nil
	}
}

func (a amAPICaseDo) Take() (*model.AmAPICase, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPICase), nil
	}
}

func (a amAPICaseDo) Last() (*model.AmAPICase, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPICase), nil
	}
}

func (a amAPICaseDo) Find() ([]*model.AmAPICase, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmAPICase), err
}

func (a amAPICaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPICase, err error) {
	buf := make([]*model.AmAPICase, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amAPICaseDo) FindInBatches(result *[]*model.AmAPICase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amAPICaseDo) Attrs(attrs ...field.AssignExpr) IAmAPICaseDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amAPICaseDo) Assign(attrs ...field.AssignExpr) IAmAPICaseDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amAPICaseDo) Joins(fields ...field.RelationField) IAmAPICaseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amAPICaseDo) Preload(fields ...field.RelationField) IAmAPICaseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amAPICaseDo) FirstOrInit() (*model.AmAPICase, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPICase), nil
	}
}

func (a amAPICaseDo) FirstOrCreate() (*model.AmAPICase, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPICase), nil
	}
}

func (a amAPICaseDo) FindByPage(offset int, limit int) (result []*model.AmAPICase, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amAPICaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amAPICaseDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amAPICaseDo) Delete(models ...*model.AmAPICase) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amAPICaseDo) withDO(do gen.Dao) *amAPICaseDo {
	a.DO = *do.(*gen.DO)
	return a
}
