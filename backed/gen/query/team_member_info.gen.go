// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newTeamMemberInfo(db *gorm.DB, opts ...gen.DOOption) teamMemberInfo {
	_teamMemberInfo := teamMemberInfo{}

	_teamMemberInfo.teamMemberInfoDo.UseDB(db, opts...)
	_teamMemberInfo.teamMemberInfoDo.UseModel(&model.TeamMemberInfo{})

	tableName := _teamMemberInfo.teamMemberInfoDo.TableName()
	_teamMemberInfo.ALL = field.NewAsterisk(tableName)
	_teamMemberInfo.ID = field.NewInt64(tableName, "id")
	_teamMemberInfo.Username = field.NewString(tableName, "username")
	_teamMemberInfo.CreateBy = field.NewString(tableName, "create_by")
	_teamMemberInfo.CreateTime = field.NewTime(tableName, "create_time")
	_teamMemberInfo.UpdateBy = field.NewString(tableName, "update_by")
	_teamMemberInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_teamMemberInfo.IsDeleted = field.NewBool(tableName, "is_deleted")

	_teamMemberInfo.fillFieldMap()

	return _teamMemberInfo
}

type teamMemberInfo struct {
	teamMemberInfoDo teamMemberInfoDo

	ALL        field.Asterisk
	ID         field.Int64
	Username   field.String
	CreateBy   field.String
	CreateTime field.Time
	UpdateBy   field.String
	UpdateTime field.Time
	IsDeleted  field.Bool

	fieldMap map[string]field.Expr
}

func (t teamMemberInfo) Table(newTableName string) *teamMemberInfo {
	t.teamMemberInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teamMemberInfo) As(alias string) *teamMemberInfo {
	t.teamMemberInfoDo.DO = *(t.teamMemberInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teamMemberInfo) updateTableName(table string) *teamMemberInfo {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Username = field.NewString(table, "username")
	t.CreateBy = field.NewString(table, "create_by")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateBy = field.NewString(table, "update_by")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.IsDeleted = field.NewBool(table, "is_deleted")

	t.fillFieldMap()

	return t
}

func (t *teamMemberInfo) WithContext(ctx context.Context) ITeamMemberInfoDo {
	return t.teamMemberInfoDo.WithContext(ctx)
}

func (t teamMemberInfo) TableName() string { return t.teamMemberInfoDo.TableName() }

func (t teamMemberInfo) Alias() string { return t.teamMemberInfoDo.Alias() }

func (t teamMemberInfo) Columns(cols ...field.Expr) gen.Columns {
	return t.teamMemberInfoDo.Columns(cols...)
}

func (t *teamMemberInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teamMemberInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["username"] = t.Username
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_by"] = t.UpdateBy
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["is_deleted"] = t.IsDeleted
}

func (t teamMemberInfo) clone(db *gorm.DB) teamMemberInfo {
	t.teamMemberInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teamMemberInfo) replaceDB(db *gorm.DB) teamMemberInfo {
	t.teamMemberInfoDo.ReplaceDB(db)
	return t
}

type teamMemberInfoDo struct{ gen.DO }

type ITeamMemberInfoDo interface {
	gen.SubQuery
	Debug() ITeamMemberInfoDo
	WithContext(ctx context.Context) ITeamMemberInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeamMemberInfoDo
	WriteDB() ITeamMemberInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeamMemberInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeamMemberInfoDo
	Not(conds ...gen.Condition) ITeamMemberInfoDo
	Or(conds ...gen.Condition) ITeamMemberInfoDo
	Select(conds ...field.Expr) ITeamMemberInfoDo
	Where(conds ...gen.Condition) ITeamMemberInfoDo
	Order(conds ...field.Expr) ITeamMemberInfoDo
	Distinct(cols ...field.Expr) ITeamMemberInfoDo
	Omit(cols ...field.Expr) ITeamMemberInfoDo
	Join(table schema.Tabler, on ...field.Expr) ITeamMemberInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeamMemberInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeamMemberInfoDo
	Group(cols ...field.Expr) ITeamMemberInfoDo
	Having(conds ...gen.Condition) ITeamMemberInfoDo
	Limit(limit int) ITeamMemberInfoDo
	Offset(offset int) ITeamMemberInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamMemberInfoDo
	Unscoped() ITeamMemberInfoDo
	Create(values ...*model.TeamMemberInfo) error
	CreateInBatches(values []*model.TeamMemberInfo, batchSize int) error
	Save(values ...*model.TeamMemberInfo) error
	First() (*model.TeamMemberInfo, error)
	Take() (*model.TeamMemberInfo, error)
	Last() (*model.TeamMemberInfo, error)
	Find() ([]*model.TeamMemberInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamMemberInfo, err error)
	FindInBatches(result *[]*model.TeamMemberInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TeamMemberInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeamMemberInfoDo
	Assign(attrs ...field.AssignExpr) ITeamMemberInfoDo
	Joins(fields ...field.RelationField) ITeamMemberInfoDo
	Preload(fields ...field.RelationField) ITeamMemberInfoDo
	FirstOrInit() (*model.TeamMemberInfo, error)
	FirstOrCreate() (*model.TeamMemberInfo, error)
	FindByPage(offset int, limit int) (result []*model.TeamMemberInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeamMemberInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teamMemberInfoDo) Debug() ITeamMemberInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t teamMemberInfoDo) WithContext(ctx context.Context) ITeamMemberInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teamMemberInfoDo) ReadDB() ITeamMemberInfoDo {
	return t.Clauses(dbresolver.Read)
}

func (t teamMemberInfoDo) WriteDB() ITeamMemberInfoDo {
	return t.Clauses(dbresolver.Write)
}

func (t teamMemberInfoDo) Session(config *gorm.Session) ITeamMemberInfoDo {
	return t.withDO(t.DO.Session(config))
}

func (t teamMemberInfoDo) Clauses(conds ...clause.Expression) ITeamMemberInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teamMemberInfoDo) Returning(value interface{}, columns ...string) ITeamMemberInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teamMemberInfoDo) Not(conds ...gen.Condition) ITeamMemberInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teamMemberInfoDo) Or(conds ...gen.Condition) ITeamMemberInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teamMemberInfoDo) Select(conds ...field.Expr) ITeamMemberInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teamMemberInfoDo) Where(conds ...gen.Condition) ITeamMemberInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teamMemberInfoDo) Order(conds ...field.Expr) ITeamMemberInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teamMemberInfoDo) Distinct(cols ...field.Expr) ITeamMemberInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teamMemberInfoDo) Omit(cols ...field.Expr) ITeamMemberInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teamMemberInfoDo) Join(table schema.Tabler, on ...field.Expr) ITeamMemberInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teamMemberInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeamMemberInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teamMemberInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeamMemberInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teamMemberInfoDo) Group(cols ...field.Expr) ITeamMemberInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teamMemberInfoDo) Having(conds ...gen.Condition) ITeamMemberInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teamMemberInfoDo) Limit(limit int) ITeamMemberInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teamMemberInfoDo) Offset(offset int) ITeamMemberInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teamMemberInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamMemberInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teamMemberInfoDo) Unscoped() ITeamMemberInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teamMemberInfoDo) Create(values ...*model.TeamMemberInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teamMemberInfoDo) CreateInBatches(values []*model.TeamMemberInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teamMemberInfoDo) Save(values ...*model.TeamMemberInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teamMemberInfoDo) First() (*model.TeamMemberInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamMemberInfo), nil
	}
}

func (t teamMemberInfoDo) Take() (*model.TeamMemberInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamMemberInfo), nil
	}
}

func (t teamMemberInfoDo) Last() (*model.TeamMemberInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamMemberInfo), nil
	}
}

func (t teamMemberInfoDo) Find() ([]*model.TeamMemberInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeamMemberInfo), err
}

func (t teamMemberInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamMemberInfo, err error) {
	buf := make([]*model.TeamMemberInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teamMemberInfoDo) FindInBatches(result *[]*model.TeamMemberInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teamMemberInfoDo) Attrs(attrs ...field.AssignExpr) ITeamMemberInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teamMemberInfoDo) Assign(attrs ...field.AssignExpr) ITeamMemberInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teamMemberInfoDo) Joins(fields ...field.RelationField) ITeamMemberInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teamMemberInfoDo) Preload(fields ...field.RelationField) ITeamMemberInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teamMemberInfoDo) FirstOrInit() (*model.TeamMemberInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamMemberInfo), nil
	}
}

func (t teamMemberInfoDo) FirstOrCreate() (*model.TeamMemberInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamMemberInfo), nil
	}
}

func (t teamMemberInfoDo) FindByPage(offset int, limit int) (result []*model.TeamMemberInfo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teamMemberInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teamMemberInfoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teamMemberInfoDo) Delete(models ...*model.TeamMemberInfo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teamMemberInfoDo) withDO(do gen.Dao) *teamMemberInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
