// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAPIParametersQuery(db *gorm.DB, opts ...gen.DOOption) aPIParametersQuery {
	_aPIParametersQuery := aPIParametersQuery{}

	_aPIParametersQuery.aPIParametersQueryDo.UseDB(db, opts...)
	_aPIParametersQuery.aPIParametersQueryDo.UseModel(&model.APIParametersQuery{})

	tableName := _aPIParametersQuery.aPIParametersQueryDo.TableName()
	_aPIParametersQuery.ALL = field.NewAsterisk(tableName)
	_aPIParametersQuery.ID = field.NewInt64(tableName, "id")
	_aPIParametersQuery.Name = field.NewString(tableName, "name")
	_aPIParametersQuery.Type = field.NewString(tableName, "type")
	_aPIParametersQuery.Example = field.NewString(tableName, "example")
	_aPIParametersQuery.CreateBy = field.NewString(tableName, "create_by")
	_aPIParametersQuery.CreateTime = field.NewTime(tableName, "create_time")
	_aPIParametersQuery.APIID = field.NewInt64(tableName, "api_id")

	_aPIParametersQuery.fillFieldMap()

	return _aPIParametersQuery
}

type aPIParametersQuery struct {
	aPIParametersQueryDo aPIParametersQueryDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	Type       field.String
	Example    field.String
	CreateBy   field.String
	CreateTime field.Time
	APIID      field.Int64

	fieldMap map[string]field.Expr
}

func (a aPIParametersQuery) Table(newTableName string) *aPIParametersQuery {
	a.aPIParametersQueryDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIParametersQuery) As(alias string) *aPIParametersQuery {
	a.aPIParametersQueryDo.DO = *(a.aPIParametersQueryDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIParametersQuery) updateTableName(table string) *aPIParametersQuery {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewString(table, "type")
	a.Example = field.NewString(table, "example")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.APIID = field.NewInt64(table, "api_id")

	a.fillFieldMap()

	return a
}

func (a *aPIParametersQuery) WithContext(ctx context.Context) IAPIParametersQueryDo {
	return a.aPIParametersQueryDo.WithContext(ctx)
}

func (a aPIParametersQuery) TableName() string { return a.aPIParametersQueryDo.TableName() }

func (a aPIParametersQuery) Alias() string { return a.aPIParametersQueryDo.Alias() }

func (a aPIParametersQuery) Columns(cols ...field.Expr) gen.Columns {
	return a.aPIParametersQueryDo.Columns(cols...)
}

func (a *aPIParametersQuery) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIParametersQuery) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["example"] = a.Example
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["api_id"] = a.APIID
}

func (a aPIParametersQuery) clone(db *gorm.DB) aPIParametersQuery {
	a.aPIParametersQueryDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIParametersQuery) replaceDB(db *gorm.DB) aPIParametersQuery {
	a.aPIParametersQueryDo.ReplaceDB(db)
	return a
}

type aPIParametersQueryDo struct{ gen.DO }

type IAPIParametersQueryDo interface {
	gen.SubQuery
	Debug() IAPIParametersQueryDo
	WithContext(ctx context.Context) IAPIParametersQueryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIParametersQueryDo
	WriteDB() IAPIParametersQueryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIParametersQueryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIParametersQueryDo
	Not(conds ...gen.Condition) IAPIParametersQueryDo
	Or(conds ...gen.Condition) IAPIParametersQueryDo
	Select(conds ...field.Expr) IAPIParametersQueryDo
	Where(conds ...gen.Condition) IAPIParametersQueryDo
	Order(conds ...field.Expr) IAPIParametersQueryDo
	Distinct(cols ...field.Expr) IAPIParametersQueryDo
	Omit(cols ...field.Expr) IAPIParametersQueryDo
	Join(table schema.Tabler, on ...field.Expr) IAPIParametersQueryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIParametersQueryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIParametersQueryDo
	Group(cols ...field.Expr) IAPIParametersQueryDo
	Having(conds ...gen.Condition) IAPIParametersQueryDo
	Limit(limit int) IAPIParametersQueryDo
	Offset(offset int) IAPIParametersQueryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIParametersQueryDo
	Unscoped() IAPIParametersQueryDo
	Create(values ...*model.APIParametersQuery) error
	CreateInBatches(values []*model.APIParametersQuery, batchSize int) error
	Save(values ...*model.APIParametersQuery) error
	First() (*model.APIParametersQuery, error)
	Take() (*model.APIParametersQuery, error)
	Last() (*model.APIParametersQuery, error)
	Find() ([]*model.APIParametersQuery, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIParametersQuery, err error)
	FindInBatches(result *[]*model.APIParametersQuery, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIParametersQuery) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIParametersQueryDo
	Assign(attrs ...field.AssignExpr) IAPIParametersQueryDo
	Joins(fields ...field.RelationField) IAPIParametersQueryDo
	Preload(fields ...field.RelationField) IAPIParametersQueryDo
	FirstOrInit() (*model.APIParametersQuery, error)
	FirstOrCreate() (*model.APIParametersQuery, error)
	FindByPage(offset int, limit int) (result []*model.APIParametersQuery, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIParametersQueryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIParametersQueryDo) Debug() IAPIParametersQueryDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIParametersQueryDo) WithContext(ctx context.Context) IAPIParametersQueryDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIParametersQueryDo) ReadDB() IAPIParametersQueryDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIParametersQueryDo) WriteDB() IAPIParametersQueryDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIParametersQueryDo) Session(config *gorm.Session) IAPIParametersQueryDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIParametersQueryDo) Clauses(conds ...clause.Expression) IAPIParametersQueryDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIParametersQueryDo) Returning(value interface{}, columns ...string) IAPIParametersQueryDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIParametersQueryDo) Not(conds ...gen.Condition) IAPIParametersQueryDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIParametersQueryDo) Or(conds ...gen.Condition) IAPIParametersQueryDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIParametersQueryDo) Select(conds ...field.Expr) IAPIParametersQueryDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIParametersQueryDo) Where(conds ...gen.Condition) IAPIParametersQueryDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIParametersQueryDo) Order(conds ...field.Expr) IAPIParametersQueryDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIParametersQueryDo) Distinct(cols ...field.Expr) IAPIParametersQueryDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIParametersQueryDo) Omit(cols ...field.Expr) IAPIParametersQueryDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIParametersQueryDo) Join(table schema.Tabler, on ...field.Expr) IAPIParametersQueryDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIParametersQueryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIParametersQueryDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIParametersQueryDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIParametersQueryDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIParametersQueryDo) Group(cols ...field.Expr) IAPIParametersQueryDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIParametersQueryDo) Having(conds ...gen.Condition) IAPIParametersQueryDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIParametersQueryDo) Limit(limit int) IAPIParametersQueryDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIParametersQueryDo) Offset(offset int) IAPIParametersQueryDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIParametersQueryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIParametersQueryDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIParametersQueryDo) Unscoped() IAPIParametersQueryDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIParametersQueryDo) Create(values ...*model.APIParametersQuery) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIParametersQueryDo) CreateInBatches(values []*model.APIParametersQuery, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIParametersQueryDo) Save(values ...*model.APIParametersQuery) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIParametersQueryDo) First() (*model.APIParametersQuery, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersQuery), nil
	}
}

func (a aPIParametersQueryDo) Take() (*model.APIParametersQuery, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersQuery), nil
	}
}

func (a aPIParametersQueryDo) Last() (*model.APIParametersQuery, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersQuery), nil
	}
}

func (a aPIParametersQueryDo) Find() ([]*model.APIParametersQuery, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIParametersQuery), err
}

func (a aPIParametersQueryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIParametersQuery, err error) {
	buf := make([]*model.APIParametersQuery, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIParametersQueryDo) FindInBatches(result *[]*model.APIParametersQuery, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIParametersQueryDo) Attrs(attrs ...field.AssignExpr) IAPIParametersQueryDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIParametersQueryDo) Assign(attrs ...field.AssignExpr) IAPIParametersQueryDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIParametersQueryDo) Joins(fields ...field.RelationField) IAPIParametersQueryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIParametersQueryDo) Preload(fields ...field.RelationField) IAPIParametersQueryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIParametersQueryDo) FirstOrInit() (*model.APIParametersQuery, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersQuery), nil
	}
}

func (a aPIParametersQueryDo) FirstOrCreate() (*model.APIParametersQuery, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIParametersQuery), nil
	}
}

func (a aPIParametersQueryDo) FindByPage(offset int, limit int) (result []*model.APIParametersQuery, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIParametersQueryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIParametersQueryDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIParametersQueryDo) Delete(models ...*model.APIParametersQuery) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIParametersQueryDo) withDO(do gen.Dao) *aPIParametersQueryDo {
	a.DO = *do.(*gen.DO)
	return a
}
