// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmsEnvironmentManage(db *gorm.DB, opts ...gen.DOOption) amsEnvironmentManage {
	_amsEnvironmentManage := amsEnvironmentManage{}

	_amsEnvironmentManage.amsEnvironmentManageDo.UseDB(db, opts...)
	_amsEnvironmentManage.amsEnvironmentManageDo.UseModel(&model.AmsEnvironmentManage{})

	tableName := _amsEnvironmentManage.amsEnvironmentManageDo.TableName()
	_amsEnvironmentManage.ALL = field.NewAsterisk(tableName)
	_amsEnvironmentManage.ID = field.NewInt64(tableName, "id")
	_amsEnvironmentManage.GlobalParameter = field.NewString(tableName, "global_parameter")
	_amsEnvironmentManage.GlobalVariable = field.NewString(tableName, "global_variable")
	_amsEnvironmentManage.KeyStores = field.NewString(tableName, "key_stores")
	_amsEnvironmentManage.EnvironmentSettings = field.NewString(tableName, "environment_settings")
	_amsEnvironmentManage.LocalMock = field.NewString(tableName, "local_mock")
	_amsEnvironmentManage.CloudMock = field.NewString(tableName, "cloud_mock")
	_amsEnvironmentManage.SelfHostMock = field.NewString(tableName, "self_host_mock")
	_amsEnvironmentManage.IsDeleted = field.NewBool(tableName, "is_deleted")
	_amsEnvironmentManage.CreateBy = field.NewInt64(tableName, "create_by")
	_amsEnvironmentManage.CreateTime = field.NewTime(tableName, "create_time")
	_amsEnvironmentManage.UpdateBy = field.NewInt64(tableName, "update_by")
	_amsEnvironmentManage.UpdateTime = field.NewTime(tableName, "update_time")
	_amsEnvironmentManage.CreateByName = field.NewString(tableName, "create_by_name")
	_amsEnvironmentManage.UpdateByName = field.NewString(tableName, "update_by_name")
	_amsEnvironmentManage.ProjectID = field.NewInt64(tableName, "project_id")

	_amsEnvironmentManage.fillFieldMap()

	return _amsEnvironmentManage
}

type amsEnvironmentManage struct {
	amsEnvironmentManageDo amsEnvironmentManageDo

	ALL                 field.Asterisk
	ID                  field.Int64
	GlobalParameter     field.String // 全局参数
	GlobalVariable      field.String
	KeyStores           field.String
	EnvironmentSettings field.String
	LocalMock           field.String
	CloudMock           field.String
	SelfHostMock        field.String
	IsDeleted           field.Bool
	CreateBy            field.Int64
	CreateTime          field.Time
	UpdateBy            field.Int64
	UpdateTime          field.Time
	CreateByName        field.String
	UpdateByName        field.String
	ProjectID           field.Int64

	fieldMap map[string]field.Expr
}

func (a amsEnvironmentManage) Table(newTableName string) *amsEnvironmentManage {
	a.amsEnvironmentManageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amsEnvironmentManage) As(alias string) *amsEnvironmentManage {
	a.amsEnvironmentManageDo.DO = *(a.amsEnvironmentManageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amsEnvironmentManage) updateTableName(table string) *amsEnvironmentManage {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.GlobalParameter = field.NewString(table, "global_parameter")
	a.GlobalVariable = field.NewString(table, "global_variable")
	a.KeyStores = field.NewString(table, "key_stores")
	a.EnvironmentSettings = field.NewString(table, "environment_settings")
	a.LocalMock = field.NewString(table, "local_mock")
	a.CloudMock = field.NewString(table, "cloud_mock")
	a.SelfHostMock = field.NewString(table, "self_host_mock")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.CreateBy = field.NewInt64(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateBy = field.NewInt64(table, "update_by")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.CreateByName = field.NewString(table, "create_by_name")
	a.UpdateByName = field.NewString(table, "update_by_name")
	a.ProjectID = field.NewInt64(table, "project_id")

	a.fillFieldMap()

	return a
}

func (a *amsEnvironmentManage) WithContext(ctx context.Context) IAmsEnvironmentManageDo {
	return a.amsEnvironmentManageDo.WithContext(ctx)
}

func (a amsEnvironmentManage) TableName() string { return a.amsEnvironmentManageDo.TableName() }

func (a amsEnvironmentManage) Alias() string { return a.amsEnvironmentManageDo.Alias() }

func (a amsEnvironmentManage) Columns(cols ...field.Expr) gen.Columns {
	return a.amsEnvironmentManageDo.Columns(cols...)
}

func (a *amsEnvironmentManage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amsEnvironmentManage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["global_parameter"] = a.GlobalParameter
	a.fieldMap["global_variable"] = a.GlobalVariable
	a.fieldMap["key_stores"] = a.KeyStores
	a.fieldMap["environment_settings"] = a.EnvironmentSettings
	a.fieldMap["local_mock"] = a.LocalMock
	a.fieldMap["cloud_mock"] = a.CloudMock
	a.fieldMap["self_host_mock"] = a.SelfHostMock
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["create_by_name"] = a.CreateByName
	a.fieldMap["update_by_name"] = a.UpdateByName
	a.fieldMap["project_id"] = a.ProjectID
}

func (a amsEnvironmentManage) clone(db *gorm.DB) amsEnvironmentManage {
	a.amsEnvironmentManageDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amsEnvironmentManage) replaceDB(db *gorm.DB) amsEnvironmentManage {
	a.amsEnvironmentManageDo.ReplaceDB(db)
	return a
}

type amsEnvironmentManageDo struct{ gen.DO }

type IAmsEnvironmentManageDo interface {
	gen.SubQuery
	Debug() IAmsEnvironmentManageDo
	WithContext(ctx context.Context) IAmsEnvironmentManageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmsEnvironmentManageDo
	WriteDB() IAmsEnvironmentManageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmsEnvironmentManageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmsEnvironmentManageDo
	Not(conds ...gen.Condition) IAmsEnvironmentManageDo
	Or(conds ...gen.Condition) IAmsEnvironmentManageDo
	Select(conds ...field.Expr) IAmsEnvironmentManageDo
	Where(conds ...gen.Condition) IAmsEnvironmentManageDo
	Order(conds ...field.Expr) IAmsEnvironmentManageDo
	Distinct(cols ...field.Expr) IAmsEnvironmentManageDo
	Omit(cols ...field.Expr) IAmsEnvironmentManageDo
	Join(table schema.Tabler, on ...field.Expr) IAmsEnvironmentManageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmsEnvironmentManageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmsEnvironmentManageDo
	Group(cols ...field.Expr) IAmsEnvironmentManageDo
	Having(conds ...gen.Condition) IAmsEnvironmentManageDo
	Limit(limit int) IAmsEnvironmentManageDo
	Offset(offset int) IAmsEnvironmentManageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmsEnvironmentManageDo
	Unscoped() IAmsEnvironmentManageDo
	Create(values ...*model.AmsEnvironmentManage) error
	CreateInBatches(values []*model.AmsEnvironmentManage, batchSize int) error
	Save(values ...*model.AmsEnvironmentManage) error
	First() (*model.AmsEnvironmentManage, error)
	Take() (*model.AmsEnvironmentManage, error)
	Last() (*model.AmsEnvironmentManage, error)
	Find() ([]*model.AmsEnvironmentManage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmsEnvironmentManage, err error)
	FindInBatches(result *[]*model.AmsEnvironmentManage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmsEnvironmentManage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmsEnvironmentManageDo
	Assign(attrs ...field.AssignExpr) IAmsEnvironmentManageDo
	Joins(fields ...field.RelationField) IAmsEnvironmentManageDo
	Preload(fields ...field.RelationField) IAmsEnvironmentManageDo
	FirstOrInit() (*model.AmsEnvironmentManage, error)
	FirstOrCreate() (*model.AmsEnvironmentManage, error)
	FindByPage(offset int, limit int) (result []*model.AmsEnvironmentManage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmsEnvironmentManageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amsEnvironmentManageDo) Debug() IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Debug())
}

func (a amsEnvironmentManageDo) WithContext(ctx context.Context) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amsEnvironmentManageDo) ReadDB() IAmsEnvironmentManageDo {
	return a.Clauses(dbresolver.Read)
}

func (a amsEnvironmentManageDo) WriteDB() IAmsEnvironmentManageDo {
	return a.Clauses(dbresolver.Write)
}

func (a amsEnvironmentManageDo) Session(config *gorm.Session) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Session(config))
}

func (a amsEnvironmentManageDo) Clauses(conds ...clause.Expression) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amsEnvironmentManageDo) Returning(value interface{}, columns ...string) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amsEnvironmentManageDo) Not(conds ...gen.Condition) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amsEnvironmentManageDo) Or(conds ...gen.Condition) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amsEnvironmentManageDo) Select(conds ...field.Expr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amsEnvironmentManageDo) Where(conds ...gen.Condition) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amsEnvironmentManageDo) Order(conds ...field.Expr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amsEnvironmentManageDo) Distinct(cols ...field.Expr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amsEnvironmentManageDo) Omit(cols ...field.Expr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amsEnvironmentManageDo) Join(table schema.Tabler, on ...field.Expr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amsEnvironmentManageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amsEnvironmentManageDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amsEnvironmentManageDo) Group(cols ...field.Expr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amsEnvironmentManageDo) Having(conds ...gen.Condition) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amsEnvironmentManageDo) Limit(limit int) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amsEnvironmentManageDo) Offset(offset int) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amsEnvironmentManageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amsEnvironmentManageDo) Unscoped() IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amsEnvironmentManageDo) Create(values ...*model.AmsEnvironmentManage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amsEnvironmentManageDo) CreateInBatches(values []*model.AmsEnvironmentManage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amsEnvironmentManageDo) Save(values ...*model.AmsEnvironmentManage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amsEnvironmentManageDo) First() (*model.AmsEnvironmentManage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsEnvironmentManage), nil
	}
}

func (a amsEnvironmentManageDo) Take() (*model.AmsEnvironmentManage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsEnvironmentManage), nil
	}
}

func (a amsEnvironmentManageDo) Last() (*model.AmsEnvironmentManage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsEnvironmentManage), nil
	}
}

func (a amsEnvironmentManageDo) Find() ([]*model.AmsEnvironmentManage, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmsEnvironmentManage), err
}

func (a amsEnvironmentManageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmsEnvironmentManage, err error) {
	buf := make([]*model.AmsEnvironmentManage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amsEnvironmentManageDo) FindInBatches(result *[]*model.AmsEnvironmentManage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amsEnvironmentManageDo) Attrs(attrs ...field.AssignExpr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amsEnvironmentManageDo) Assign(attrs ...field.AssignExpr) IAmsEnvironmentManageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amsEnvironmentManageDo) Joins(fields ...field.RelationField) IAmsEnvironmentManageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amsEnvironmentManageDo) Preload(fields ...field.RelationField) IAmsEnvironmentManageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amsEnvironmentManageDo) FirstOrInit() (*model.AmsEnvironmentManage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsEnvironmentManage), nil
	}
}

func (a amsEnvironmentManageDo) FirstOrCreate() (*model.AmsEnvironmentManage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmsEnvironmentManage), nil
	}
}

func (a amsEnvironmentManageDo) FindByPage(offset int, limit int) (result []*model.AmsEnvironmentManage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amsEnvironmentManageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amsEnvironmentManageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amsEnvironmentManageDo) Delete(models ...*model.AmsEnvironmentManage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amsEnvironmentManageDo) withDO(do gen.Dao) *amsEnvironmentManageDo {
	a.DO = *do.(*gen.DO)
	return a
}
