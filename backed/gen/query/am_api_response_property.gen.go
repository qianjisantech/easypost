// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmAPIResponseProperty(db *gorm.DB, opts ...gen.DOOption) amAPIResponseProperty {
	_amAPIResponseProperty := amAPIResponseProperty{}

	_amAPIResponseProperty.amAPIResponsePropertyDo.UseDB(db, opts...)
	_amAPIResponseProperty.amAPIResponsePropertyDo.UseModel(&model.AmAPIResponseProperty{})

	tableName := _amAPIResponseProperty.amAPIResponsePropertyDo.TableName()
	_amAPIResponseProperty.ALL = field.NewAsterisk(tableName)
	_amAPIResponseProperty.ID = field.NewInt64(tableName, "id")
	_amAPIResponseProperty.Type = field.NewString(tableName, "type")
	_amAPIResponseProperty.DisplayName = field.NewString(tableName, "display_name")
	_amAPIResponseProperty.ResponseID = field.NewInt64(tableName, "response_id")
	_amAPIResponseProperty.CreateBy = field.NewString(tableName, "create_by")
	_amAPIResponseProperty.CreateTime = field.NewTime(tableName, "create_time")
	_amAPIResponseProperty.Name = field.NewString(tableName, "name")
	_amAPIResponseProperty.Description = field.NewString(tableName, "description")
	_amAPIResponseProperty.UpdateBy = field.NewString(tableName, "update_by")
	_amAPIResponseProperty.UpdateTime = field.NewTime(tableName, "update_time")
	_amAPIResponseProperty.IsDeleted = field.NewBool(tableName, "is_deleted")

	_amAPIResponseProperty.fillFieldMap()

	return _amAPIResponseProperty
}

type amAPIResponseProperty struct {
	amAPIResponsePropertyDo amAPIResponsePropertyDo

	ALL         field.Asterisk
	ID          field.Int64
	Type        field.String
	DisplayName field.String // 中文名
	ResponseID  field.Int64
	CreateBy    field.String
	CreateTime  field.Time
	Name        field.String
	Description field.String // 说明
	UpdateBy    field.String
	UpdateTime  field.Time
	IsDeleted   field.Bool

	fieldMap map[string]field.Expr
}

func (a amAPIResponseProperty) Table(newTableName string) *amAPIResponseProperty {
	a.amAPIResponsePropertyDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amAPIResponseProperty) As(alias string) *amAPIResponseProperty {
	a.amAPIResponsePropertyDo.DO = *(a.amAPIResponsePropertyDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amAPIResponseProperty) updateTableName(table string) *amAPIResponseProperty {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Type = field.NewString(table, "type")
	a.DisplayName = field.NewString(table, "display_name")
	a.ResponseID = field.NewInt64(table, "response_id")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.Name = field.NewString(table, "name")
	a.Description = field.NewString(table, "description")
	a.UpdateBy = field.NewString(table, "update_by")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")

	a.fillFieldMap()

	return a
}

func (a *amAPIResponseProperty) WithContext(ctx context.Context) IAmAPIResponsePropertyDo {
	return a.amAPIResponsePropertyDo.WithContext(ctx)
}

func (a amAPIResponseProperty) TableName() string { return a.amAPIResponsePropertyDo.TableName() }

func (a amAPIResponseProperty) Alias() string { return a.amAPIResponsePropertyDo.Alias() }

func (a amAPIResponseProperty) Columns(cols ...field.Expr) gen.Columns {
	return a.amAPIResponsePropertyDo.Columns(cols...)
}

func (a *amAPIResponseProperty) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amAPIResponseProperty) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["type"] = a.Type
	a.fieldMap["display_name"] = a.DisplayName
	a.fieldMap["response_id"] = a.ResponseID
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["name"] = a.Name
	a.fieldMap["description"] = a.Description
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
}

func (a amAPIResponseProperty) clone(db *gorm.DB) amAPIResponseProperty {
	a.amAPIResponsePropertyDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amAPIResponseProperty) replaceDB(db *gorm.DB) amAPIResponseProperty {
	a.amAPIResponsePropertyDo.ReplaceDB(db)
	return a
}

type amAPIResponsePropertyDo struct{ gen.DO }

type IAmAPIResponsePropertyDo interface {
	gen.SubQuery
	Debug() IAmAPIResponsePropertyDo
	WithContext(ctx context.Context) IAmAPIResponsePropertyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmAPIResponsePropertyDo
	WriteDB() IAmAPIResponsePropertyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmAPIResponsePropertyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmAPIResponsePropertyDo
	Not(conds ...gen.Condition) IAmAPIResponsePropertyDo
	Or(conds ...gen.Condition) IAmAPIResponsePropertyDo
	Select(conds ...field.Expr) IAmAPIResponsePropertyDo
	Where(conds ...gen.Condition) IAmAPIResponsePropertyDo
	Order(conds ...field.Expr) IAmAPIResponsePropertyDo
	Distinct(cols ...field.Expr) IAmAPIResponsePropertyDo
	Omit(cols ...field.Expr) IAmAPIResponsePropertyDo
	Join(table schema.Tabler, on ...field.Expr) IAmAPIResponsePropertyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIResponsePropertyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIResponsePropertyDo
	Group(cols ...field.Expr) IAmAPIResponsePropertyDo
	Having(conds ...gen.Condition) IAmAPIResponsePropertyDo
	Limit(limit int) IAmAPIResponsePropertyDo
	Offset(offset int) IAmAPIResponsePropertyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIResponsePropertyDo
	Unscoped() IAmAPIResponsePropertyDo
	Create(values ...*model.AmAPIResponseProperty) error
	CreateInBatches(values []*model.AmAPIResponseProperty, batchSize int) error
	Save(values ...*model.AmAPIResponseProperty) error
	First() (*model.AmAPIResponseProperty, error)
	Take() (*model.AmAPIResponseProperty, error)
	Last() (*model.AmAPIResponseProperty, error)
	Find() ([]*model.AmAPIResponseProperty, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPIResponseProperty, err error)
	FindInBatches(result *[]*model.AmAPIResponseProperty, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmAPIResponseProperty) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmAPIResponsePropertyDo
	Assign(attrs ...field.AssignExpr) IAmAPIResponsePropertyDo
	Joins(fields ...field.RelationField) IAmAPIResponsePropertyDo
	Preload(fields ...field.RelationField) IAmAPIResponsePropertyDo
	FirstOrInit() (*model.AmAPIResponseProperty, error)
	FirstOrCreate() (*model.AmAPIResponseProperty, error)
	FindByPage(offset int, limit int) (result []*model.AmAPIResponseProperty, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmAPIResponsePropertyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amAPIResponsePropertyDo) Debug() IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Debug())
}

func (a amAPIResponsePropertyDo) WithContext(ctx context.Context) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amAPIResponsePropertyDo) ReadDB() IAmAPIResponsePropertyDo {
	return a.Clauses(dbresolver.Read)
}

func (a amAPIResponsePropertyDo) WriteDB() IAmAPIResponsePropertyDo {
	return a.Clauses(dbresolver.Write)
}

func (a amAPIResponsePropertyDo) Session(config *gorm.Session) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Session(config))
}

func (a amAPIResponsePropertyDo) Clauses(conds ...clause.Expression) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amAPIResponsePropertyDo) Returning(value interface{}, columns ...string) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amAPIResponsePropertyDo) Not(conds ...gen.Condition) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amAPIResponsePropertyDo) Or(conds ...gen.Condition) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amAPIResponsePropertyDo) Select(conds ...field.Expr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amAPIResponsePropertyDo) Where(conds ...gen.Condition) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amAPIResponsePropertyDo) Order(conds ...field.Expr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amAPIResponsePropertyDo) Distinct(cols ...field.Expr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amAPIResponsePropertyDo) Omit(cols ...field.Expr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amAPIResponsePropertyDo) Join(table schema.Tabler, on ...field.Expr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amAPIResponsePropertyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amAPIResponsePropertyDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amAPIResponsePropertyDo) Group(cols ...field.Expr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amAPIResponsePropertyDo) Having(conds ...gen.Condition) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amAPIResponsePropertyDo) Limit(limit int) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amAPIResponsePropertyDo) Offset(offset int) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amAPIResponsePropertyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amAPIResponsePropertyDo) Unscoped() IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amAPIResponsePropertyDo) Create(values ...*model.AmAPIResponseProperty) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amAPIResponsePropertyDo) CreateInBatches(values []*model.AmAPIResponseProperty, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amAPIResponsePropertyDo) Save(values ...*model.AmAPIResponseProperty) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amAPIResponsePropertyDo) First() (*model.AmAPIResponseProperty, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponseProperty), nil
	}
}

func (a amAPIResponsePropertyDo) Take() (*model.AmAPIResponseProperty, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponseProperty), nil
	}
}

func (a amAPIResponsePropertyDo) Last() (*model.AmAPIResponseProperty, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponseProperty), nil
	}
}

func (a amAPIResponsePropertyDo) Find() ([]*model.AmAPIResponseProperty, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmAPIResponseProperty), err
}

func (a amAPIResponsePropertyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPIResponseProperty, err error) {
	buf := make([]*model.AmAPIResponseProperty, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amAPIResponsePropertyDo) FindInBatches(result *[]*model.AmAPIResponseProperty, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amAPIResponsePropertyDo) Attrs(attrs ...field.AssignExpr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amAPIResponsePropertyDo) Assign(attrs ...field.AssignExpr) IAmAPIResponsePropertyDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amAPIResponsePropertyDo) Joins(fields ...field.RelationField) IAmAPIResponsePropertyDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amAPIResponsePropertyDo) Preload(fields ...field.RelationField) IAmAPIResponsePropertyDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amAPIResponsePropertyDo) FirstOrInit() (*model.AmAPIResponseProperty, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponseProperty), nil
	}
}

func (a amAPIResponsePropertyDo) FirstOrCreate() (*model.AmAPIResponseProperty, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponseProperty), nil
	}
}

func (a amAPIResponsePropertyDo) FindByPage(offset int, limit int) (result []*model.AmAPIResponseProperty, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amAPIResponsePropertyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amAPIResponsePropertyDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amAPIResponsePropertyDo) Delete(models ...*model.AmAPIResponseProperty) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amAPIResponsePropertyDo) withDO(do gen.Dao) *amAPIResponsePropertyDo {
	a.DO = *do.(*gen.DO)
	return a
}
