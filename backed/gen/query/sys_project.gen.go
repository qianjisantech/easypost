// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newSysProject(db *gorm.DB, opts ...gen.DOOption) sysProject {
	_sysProject := sysProject{}

	_sysProject.sysProjectDo.UseDB(db, opts...)
	_sysProject.sysProjectDo.UseModel(&model.SysProject{})

	tableName := _sysProject.sysProjectDo.TableName()
	_sysProject.ALL = field.NewAsterisk(tableName)
	_sysProject.ID = field.NewInt64(tableName, "id")
	_sysProject.ProjectName = field.NewString(tableName, "project_name")
	_sysProject.ProjectIcon = field.NewString(tableName, "project_icon")
	_sysProject.CreateBy = field.NewString(tableName, "create_by")
	_sysProject.CreateTime = field.NewTime(tableName, "create_time")
	_sysProject.UpdateBy = field.NewString(tableName, "update_by")
	_sysProject.UpdateTime = field.NewTime(tableName, "update_time")
	_sysProject.IsPublic = field.NewBool(tableName, "is_public")
	_sysProject.IsDeleted = field.NewBool(tableName, "is_deleted")
	_sysProject.TeamID = field.NewInt64(tableName, "team_id")

	_sysProject.fillFieldMap()

	return _sysProject
}

type sysProject struct {
	sysProjectDo sysProjectDo

	ALL         field.Asterisk
	ID          field.Int64
	ProjectName field.String
	ProjectIcon field.String
	CreateBy    field.String
	CreateTime  field.Time
	UpdateBy    field.String
	UpdateTime  field.Time
	IsPublic    field.Bool
	IsDeleted   field.Bool
	TeamID      field.Int64

	fieldMap map[string]field.Expr
}

func (s sysProject) Table(newTableName string) *sysProject {
	s.sysProjectDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysProject) As(alias string) *sysProject {
	s.sysProjectDo.DO = *(s.sysProjectDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysProject) updateTableName(table string) *sysProject {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ProjectName = field.NewString(table, "project_name")
	s.ProjectIcon = field.NewString(table, "project_icon")
	s.CreateBy = field.NewString(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewString(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsPublic = field.NewBool(table, "is_public")
	s.IsDeleted = field.NewBool(table, "is_deleted")
	s.TeamID = field.NewInt64(table, "team_id")

	s.fillFieldMap()

	return s
}

func (s *sysProject) WithContext(ctx context.Context) ISysProjectDo {
	return s.sysProjectDo.WithContext(ctx)
}

func (s sysProject) TableName() string { return s.sysProjectDo.TableName() }

func (s sysProject) Alias() string { return s.sysProjectDo.Alias() }

func (s sysProject) Columns(cols ...field.Expr) gen.Columns { return s.sysProjectDo.Columns(cols...) }

func (s *sysProject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysProject) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["project_name"] = s.ProjectName
	s.fieldMap["project_icon"] = s.ProjectIcon
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_public"] = s.IsPublic
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["team_id"] = s.TeamID
}

func (s sysProject) clone(db *gorm.DB) sysProject {
	s.sysProjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysProject) replaceDB(db *gorm.DB) sysProject {
	s.sysProjectDo.ReplaceDB(db)
	return s
}

type sysProjectDo struct{ gen.DO }

type ISysProjectDo interface {
	gen.SubQuery
	Debug() ISysProjectDo
	WithContext(ctx context.Context) ISysProjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysProjectDo
	WriteDB() ISysProjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysProjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysProjectDo
	Not(conds ...gen.Condition) ISysProjectDo
	Or(conds ...gen.Condition) ISysProjectDo
	Select(conds ...field.Expr) ISysProjectDo
	Where(conds ...gen.Condition) ISysProjectDo
	Order(conds ...field.Expr) ISysProjectDo
	Distinct(cols ...field.Expr) ISysProjectDo
	Omit(cols ...field.Expr) ISysProjectDo
	Join(table schema.Tabler, on ...field.Expr) ISysProjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysProjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysProjectDo
	Group(cols ...field.Expr) ISysProjectDo
	Having(conds ...gen.Condition) ISysProjectDo
	Limit(limit int) ISysProjectDo
	Offset(offset int) ISysProjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysProjectDo
	Unscoped() ISysProjectDo
	Create(values ...*model.SysProject) error
	CreateInBatches(values []*model.SysProject, batchSize int) error
	Save(values ...*model.SysProject) error
	First() (*model.SysProject, error)
	Take() (*model.SysProject, error)
	Last() (*model.SysProject, error)
	Find() ([]*model.SysProject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysProject, err error)
	FindInBatches(result *[]*model.SysProject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysProject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysProjectDo
	Assign(attrs ...field.AssignExpr) ISysProjectDo
	Joins(fields ...field.RelationField) ISysProjectDo
	Preload(fields ...field.RelationField) ISysProjectDo
	FirstOrInit() (*model.SysProject, error)
	FirstOrCreate() (*model.SysProject, error)
	FindByPage(offset int, limit int) (result []*model.SysProject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysProjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysProjectDo) Debug() ISysProjectDo {
	return s.withDO(s.DO.Debug())
}

func (s sysProjectDo) WithContext(ctx context.Context) ISysProjectDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysProjectDo) ReadDB() ISysProjectDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysProjectDo) WriteDB() ISysProjectDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysProjectDo) Session(config *gorm.Session) ISysProjectDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysProjectDo) Clauses(conds ...clause.Expression) ISysProjectDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysProjectDo) Returning(value interface{}, columns ...string) ISysProjectDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysProjectDo) Not(conds ...gen.Condition) ISysProjectDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysProjectDo) Or(conds ...gen.Condition) ISysProjectDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysProjectDo) Select(conds ...field.Expr) ISysProjectDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysProjectDo) Where(conds ...gen.Condition) ISysProjectDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysProjectDo) Order(conds ...field.Expr) ISysProjectDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysProjectDo) Distinct(cols ...field.Expr) ISysProjectDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysProjectDo) Omit(cols ...field.Expr) ISysProjectDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysProjectDo) Join(table schema.Tabler, on ...field.Expr) ISysProjectDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysProjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysProjectDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysProjectDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysProjectDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysProjectDo) Group(cols ...field.Expr) ISysProjectDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysProjectDo) Having(conds ...gen.Condition) ISysProjectDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysProjectDo) Limit(limit int) ISysProjectDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysProjectDo) Offset(offset int) ISysProjectDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysProjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysProjectDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysProjectDo) Unscoped() ISysProjectDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysProjectDo) Create(values ...*model.SysProject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysProjectDo) CreateInBatches(values []*model.SysProject, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysProjectDo) Save(values ...*model.SysProject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysProjectDo) First() (*model.SysProject, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProject), nil
	}
}

func (s sysProjectDo) Take() (*model.SysProject, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProject), nil
	}
}

func (s sysProjectDo) Last() (*model.SysProject, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProject), nil
	}
}

func (s sysProjectDo) Find() ([]*model.SysProject, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysProject), err
}

func (s sysProjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysProject, err error) {
	buf := make([]*model.SysProject, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysProjectDo) FindInBatches(result *[]*model.SysProject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysProjectDo) Attrs(attrs ...field.AssignExpr) ISysProjectDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysProjectDo) Assign(attrs ...field.AssignExpr) ISysProjectDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysProjectDo) Joins(fields ...field.RelationField) ISysProjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysProjectDo) Preload(fields ...field.RelationField) ISysProjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysProjectDo) FirstOrInit() (*model.SysProject, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProject), nil
	}
}

func (s sysProjectDo) FirstOrCreate() (*model.SysProject, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProject), nil
	}
}

func (s sysProjectDo) FindByPage(offset int, limit int) (result []*model.SysProject, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysProjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysProjectDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysProjectDo) Delete(models ...*model.SysProject) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysProjectDo) withDO(do gen.Dao) *sysProjectDo {
	s.DO = *do.(*gen.DO)
	return s
}
