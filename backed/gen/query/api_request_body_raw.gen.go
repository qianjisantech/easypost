// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAPIRequestBodyRaw(db *gorm.DB, opts ...gen.DOOption) aPIRequestBodyRaw {
	_aPIRequestBodyRaw := aPIRequestBodyRaw{}

	_aPIRequestBodyRaw.aPIRequestBodyRawDo.UseDB(db, opts...)
	_aPIRequestBodyRaw.aPIRequestBodyRawDo.UseModel(&model.APIRequestBodyRaw{})

	tableName := _aPIRequestBodyRaw.aPIRequestBodyRawDo.TableName()
	_aPIRequestBodyRaw.ALL = field.NewAsterisk(tableName)
	_aPIRequestBodyRaw.ID = field.NewInt64(tableName, "id")
	_aPIRequestBodyRaw.Type = field.NewString(tableName, "type")
	_aPIRequestBodyRaw.JSONSchema = field.NewString(tableName, "json_schema")
	_aPIRequestBodyRaw.CreateBy = field.NewString(tableName, "create_by")
	_aPIRequestBodyRaw.CreateTime = field.NewTime(tableName, "create_time")
	_aPIRequestBodyRaw.APIID = field.NewInt64(tableName, "api_id")

	_aPIRequestBodyRaw.fillFieldMap()

	return _aPIRequestBodyRaw
}

type aPIRequestBodyRaw struct {
	aPIRequestBodyRawDo aPIRequestBodyRawDo

	ALL        field.Asterisk
	ID         field.Int64
	Type       field.String
	JSONSchema field.String
	CreateBy   field.String
	CreateTime field.Time
	APIID      field.Int64

	fieldMap map[string]field.Expr
}

func (a aPIRequestBodyRaw) Table(newTableName string) *aPIRequestBodyRaw {
	a.aPIRequestBodyRawDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIRequestBodyRaw) As(alias string) *aPIRequestBodyRaw {
	a.aPIRequestBodyRawDo.DO = *(a.aPIRequestBodyRawDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIRequestBodyRaw) updateTableName(table string) *aPIRequestBodyRaw {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Type = field.NewString(table, "type")
	a.JSONSchema = field.NewString(table, "json_schema")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.APIID = field.NewInt64(table, "api_id")

	a.fillFieldMap()

	return a
}

func (a *aPIRequestBodyRaw) WithContext(ctx context.Context) IAPIRequestBodyRawDo {
	return a.aPIRequestBodyRawDo.WithContext(ctx)
}

func (a aPIRequestBodyRaw) TableName() string { return a.aPIRequestBodyRawDo.TableName() }

func (a aPIRequestBodyRaw) Alias() string { return a.aPIRequestBodyRawDo.Alias() }

func (a aPIRequestBodyRaw) Columns(cols ...field.Expr) gen.Columns {
	return a.aPIRequestBodyRawDo.Columns(cols...)
}

func (a *aPIRequestBodyRaw) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIRequestBodyRaw) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["type"] = a.Type
	a.fieldMap["json_schema"] = a.JSONSchema
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["api_id"] = a.APIID
}

func (a aPIRequestBodyRaw) clone(db *gorm.DB) aPIRequestBodyRaw {
	a.aPIRequestBodyRawDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIRequestBodyRaw) replaceDB(db *gorm.DB) aPIRequestBodyRaw {
	a.aPIRequestBodyRawDo.ReplaceDB(db)
	return a
}

type aPIRequestBodyRawDo struct{ gen.DO }

type IAPIRequestBodyRawDo interface {
	gen.SubQuery
	Debug() IAPIRequestBodyRawDo
	WithContext(ctx context.Context) IAPIRequestBodyRawDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIRequestBodyRawDo
	WriteDB() IAPIRequestBodyRawDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIRequestBodyRawDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIRequestBodyRawDo
	Not(conds ...gen.Condition) IAPIRequestBodyRawDo
	Or(conds ...gen.Condition) IAPIRequestBodyRawDo
	Select(conds ...field.Expr) IAPIRequestBodyRawDo
	Where(conds ...gen.Condition) IAPIRequestBodyRawDo
	Order(conds ...field.Expr) IAPIRequestBodyRawDo
	Distinct(cols ...field.Expr) IAPIRequestBodyRawDo
	Omit(cols ...field.Expr) IAPIRequestBodyRawDo
	Join(table schema.Tabler, on ...field.Expr) IAPIRequestBodyRawDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIRequestBodyRawDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIRequestBodyRawDo
	Group(cols ...field.Expr) IAPIRequestBodyRawDo
	Having(conds ...gen.Condition) IAPIRequestBodyRawDo
	Limit(limit int) IAPIRequestBodyRawDo
	Offset(offset int) IAPIRequestBodyRawDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIRequestBodyRawDo
	Unscoped() IAPIRequestBodyRawDo
	Create(values ...*model.APIRequestBodyRaw) error
	CreateInBatches(values []*model.APIRequestBodyRaw, batchSize int) error
	Save(values ...*model.APIRequestBodyRaw) error
	First() (*model.APIRequestBodyRaw, error)
	Take() (*model.APIRequestBodyRaw, error)
	Last() (*model.APIRequestBodyRaw, error)
	Find() ([]*model.APIRequestBodyRaw, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIRequestBodyRaw, err error)
	FindInBatches(result *[]*model.APIRequestBodyRaw, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIRequestBodyRaw) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIRequestBodyRawDo
	Assign(attrs ...field.AssignExpr) IAPIRequestBodyRawDo
	Joins(fields ...field.RelationField) IAPIRequestBodyRawDo
	Preload(fields ...field.RelationField) IAPIRequestBodyRawDo
	FirstOrInit() (*model.APIRequestBodyRaw, error)
	FirstOrCreate() (*model.APIRequestBodyRaw, error)
	FindByPage(offset int, limit int) (result []*model.APIRequestBodyRaw, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIRequestBodyRawDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIRequestBodyRawDo) Debug() IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIRequestBodyRawDo) WithContext(ctx context.Context) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIRequestBodyRawDo) ReadDB() IAPIRequestBodyRawDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIRequestBodyRawDo) WriteDB() IAPIRequestBodyRawDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIRequestBodyRawDo) Session(config *gorm.Session) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIRequestBodyRawDo) Clauses(conds ...clause.Expression) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIRequestBodyRawDo) Returning(value interface{}, columns ...string) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIRequestBodyRawDo) Not(conds ...gen.Condition) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIRequestBodyRawDo) Or(conds ...gen.Condition) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIRequestBodyRawDo) Select(conds ...field.Expr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIRequestBodyRawDo) Where(conds ...gen.Condition) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIRequestBodyRawDo) Order(conds ...field.Expr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIRequestBodyRawDo) Distinct(cols ...field.Expr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIRequestBodyRawDo) Omit(cols ...field.Expr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIRequestBodyRawDo) Join(table schema.Tabler, on ...field.Expr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIRequestBodyRawDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIRequestBodyRawDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIRequestBodyRawDo) Group(cols ...field.Expr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIRequestBodyRawDo) Having(conds ...gen.Condition) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIRequestBodyRawDo) Limit(limit int) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIRequestBodyRawDo) Offset(offset int) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIRequestBodyRawDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIRequestBodyRawDo) Unscoped() IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIRequestBodyRawDo) Create(values ...*model.APIRequestBodyRaw) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIRequestBodyRawDo) CreateInBatches(values []*model.APIRequestBodyRaw, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIRequestBodyRawDo) Save(values ...*model.APIRequestBodyRaw) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIRequestBodyRawDo) First() (*model.APIRequestBodyRaw, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyRaw), nil
	}
}

func (a aPIRequestBodyRawDo) Take() (*model.APIRequestBodyRaw, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyRaw), nil
	}
}

func (a aPIRequestBodyRawDo) Last() (*model.APIRequestBodyRaw, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyRaw), nil
	}
}

func (a aPIRequestBodyRawDo) Find() ([]*model.APIRequestBodyRaw, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIRequestBodyRaw), err
}

func (a aPIRequestBodyRawDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIRequestBodyRaw, err error) {
	buf := make([]*model.APIRequestBodyRaw, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIRequestBodyRawDo) FindInBatches(result *[]*model.APIRequestBodyRaw, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIRequestBodyRawDo) Attrs(attrs ...field.AssignExpr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIRequestBodyRawDo) Assign(attrs ...field.AssignExpr) IAPIRequestBodyRawDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIRequestBodyRawDo) Joins(fields ...field.RelationField) IAPIRequestBodyRawDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIRequestBodyRawDo) Preload(fields ...field.RelationField) IAPIRequestBodyRawDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIRequestBodyRawDo) FirstOrInit() (*model.APIRequestBodyRaw, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyRaw), nil
	}
}

func (a aPIRequestBodyRawDo) FirstOrCreate() (*model.APIRequestBodyRaw, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyRaw), nil
	}
}

func (a aPIRequestBodyRawDo) FindByPage(offset int, limit int) (result []*model.APIRequestBodyRaw, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIRequestBodyRawDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIRequestBodyRawDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIRequestBodyRawDo) Delete(models ...*model.APIRequestBodyRaw) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIRequestBodyRawDo) withDO(do gen.Dao) *aPIRequestBodyRawDo {
	a.DO = *do.(*gen.DO)
	return a
}
