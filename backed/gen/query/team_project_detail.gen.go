// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newTeamProjectDetail(db *gorm.DB, opts ...gen.DOOption) teamProjectDetail {
	_teamProjectDetail := teamProjectDetail{}

	_teamProjectDetail.teamProjectDetailDo.UseDB(db, opts...)
	_teamProjectDetail.teamProjectDetailDo.UseModel(&model.TeamProjectDetail{})

	tableName := _teamProjectDetail.teamProjectDetailDo.TableName()
	_teamProjectDetail.ALL = field.NewAsterisk(tableName)
	_teamProjectDetail.ID = field.NewInt64(tableName, "id")
	_teamProjectDetail.ProjectName = field.NewString(tableName, "project_name")
	_teamProjectDetail.ProjectIcon = field.NewString(tableName, "project_icon")
	_teamProjectDetail.CreateBy = field.NewString(tableName, "create_by")
	_teamProjectDetail.CreateTime = field.NewTime(tableName, "create_time")
	_teamProjectDetail.UpdateBy = field.NewString(tableName, "update_by")
	_teamProjectDetail.UpdateTime = field.NewTime(tableName, "update_time")
	_teamProjectDetail.IsPublic = field.NewBool(tableName, "is_public")
	_teamProjectDetail.IsDeleted = field.NewBool(tableName, "is_deleted")

	_teamProjectDetail.fillFieldMap()

	return _teamProjectDetail
}

type teamProjectDetail struct {
	teamProjectDetailDo teamProjectDetailDo

	ALL         field.Asterisk
	ID          field.Int64
	ProjectName field.String
	ProjectIcon field.String
	CreateBy    field.String
	CreateTime  field.Time
	UpdateBy    field.String
	UpdateTime  field.Time
	IsPublic    field.Bool
	IsDeleted   field.Bool

	fieldMap map[string]field.Expr
}

func (t teamProjectDetail) Table(newTableName string) *teamProjectDetail {
	t.teamProjectDetailDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teamProjectDetail) As(alias string) *teamProjectDetail {
	t.teamProjectDetailDo.DO = *(t.teamProjectDetailDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teamProjectDetail) updateTableName(table string) *teamProjectDetail {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.ProjectName = field.NewString(table, "project_name")
	t.ProjectIcon = field.NewString(table, "project_icon")
	t.CreateBy = field.NewString(table, "create_by")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateBy = field.NewString(table, "update_by")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.IsPublic = field.NewBool(table, "is_public")
	t.IsDeleted = field.NewBool(table, "is_deleted")

	t.fillFieldMap()

	return t
}

func (t *teamProjectDetail) WithContext(ctx context.Context) ITeamProjectDetailDo {
	return t.teamProjectDetailDo.WithContext(ctx)
}

func (t teamProjectDetail) TableName() string { return t.teamProjectDetailDo.TableName() }

func (t teamProjectDetail) Alias() string { return t.teamProjectDetailDo.Alias() }

func (t teamProjectDetail) Columns(cols ...field.Expr) gen.Columns {
	return t.teamProjectDetailDo.Columns(cols...)
}

func (t *teamProjectDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teamProjectDetail) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["project_name"] = t.ProjectName
	t.fieldMap["project_icon"] = t.ProjectIcon
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_by"] = t.UpdateBy
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["is_public"] = t.IsPublic
	t.fieldMap["is_deleted"] = t.IsDeleted
}

func (t teamProjectDetail) clone(db *gorm.DB) teamProjectDetail {
	t.teamProjectDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teamProjectDetail) replaceDB(db *gorm.DB) teamProjectDetail {
	t.teamProjectDetailDo.ReplaceDB(db)
	return t
}

type teamProjectDetailDo struct{ gen.DO }

type ITeamProjectDetailDo interface {
	gen.SubQuery
	Debug() ITeamProjectDetailDo
	WithContext(ctx context.Context) ITeamProjectDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeamProjectDetailDo
	WriteDB() ITeamProjectDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeamProjectDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeamProjectDetailDo
	Not(conds ...gen.Condition) ITeamProjectDetailDo
	Or(conds ...gen.Condition) ITeamProjectDetailDo
	Select(conds ...field.Expr) ITeamProjectDetailDo
	Where(conds ...gen.Condition) ITeamProjectDetailDo
	Order(conds ...field.Expr) ITeamProjectDetailDo
	Distinct(cols ...field.Expr) ITeamProjectDetailDo
	Omit(cols ...field.Expr) ITeamProjectDetailDo
	Join(table schema.Tabler, on ...field.Expr) ITeamProjectDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeamProjectDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeamProjectDetailDo
	Group(cols ...field.Expr) ITeamProjectDetailDo
	Having(conds ...gen.Condition) ITeamProjectDetailDo
	Limit(limit int) ITeamProjectDetailDo
	Offset(offset int) ITeamProjectDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamProjectDetailDo
	Unscoped() ITeamProjectDetailDo
	Create(values ...*model.TeamProjectDetail) error
	CreateInBatches(values []*model.TeamProjectDetail, batchSize int) error
	Save(values ...*model.TeamProjectDetail) error
	First() (*model.TeamProjectDetail, error)
	Take() (*model.TeamProjectDetail, error)
	Last() (*model.TeamProjectDetail, error)
	Find() ([]*model.TeamProjectDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamProjectDetail, err error)
	FindInBatches(result *[]*model.TeamProjectDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TeamProjectDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeamProjectDetailDo
	Assign(attrs ...field.AssignExpr) ITeamProjectDetailDo
	Joins(fields ...field.RelationField) ITeamProjectDetailDo
	Preload(fields ...field.RelationField) ITeamProjectDetailDo
	FirstOrInit() (*model.TeamProjectDetail, error)
	FirstOrCreate() (*model.TeamProjectDetail, error)
	FindByPage(offset int, limit int) (result []*model.TeamProjectDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeamProjectDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teamProjectDetailDo) Debug() ITeamProjectDetailDo {
	return t.withDO(t.DO.Debug())
}

func (t teamProjectDetailDo) WithContext(ctx context.Context) ITeamProjectDetailDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teamProjectDetailDo) ReadDB() ITeamProjectDetailDo {
	return t.Clauses(dbresolver.Read)
}

func (t teamProjectDetailDo) WriteDB() ITeamProjectDetailDo {
	return t.Clauses(dbresolver.Write)
}

func (t teamProjectDetailDo) Session(config *gorm.Session) ITeamProjectDetailDo {
	return t.withDO(t.DO.Session(config))
}

func (t teamProjectDetailDo) Clauses(conds ...clause.Expression) ITeamProjectDetailDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teamProjectDetailDo) Returning(value interface{}, columns ...string) ITeamProjectDetailDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teamProjectDetailDo) Not(conds ...gen.Condition) ITeamProjectDetailDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teamProjectDetailDo) Or(conds ...gen.Condition) ITeamProjectDetailDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teamProjectDetailDo) Select(conds ...field.Expr) ITeamProjectDetailDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teamProjectDetailDo) Where(conds ...gen.Condition) ITeamProjectDetailDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teamProjectDetailDo) Order(conds ...field.Expr) ITeamProjectDetailDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teamProjectDetailDo) Distinct(cols ...field.Expr) ITeamProjectDetailDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teamProjectDetailDo) Omit(cols ...field.Expr) ITeamProjectDetailDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teamProjectDetailDo) Join(table schema.Tabler, on ...field.Expr) ITeamProjectDetailDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teamProjectDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeamProjectDetailDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teamProjectDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeamProjectDetailDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teamProjectDetailDo) Group(cols ...field.Expr) ITeamProjectDetailDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teamProjectDetailDo) Having(conds ...gen.Condition) ITeamProjectDetailDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teamProjectDetailDo) Limit(limit int) ITeamProjectDetailDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teamProjectDetailDo) Offset(offset int) ITeamProjectDetailDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teamProjectDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamProjectDetailDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teamProjectDetailDo) Unscoped() ITeamProjectDetailDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teamProjectDetailDo) Create(values ...*model.TeamProjectDetail) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teamProjectDetailDo) CreateInBatches(values []*model.TeamProjectDetail, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teamProjectDetailDo) Save(values ...*model.TeamProjectDetail) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teamProjectDetailDo) First() (*model.TeamProjectDetail, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamProjectDetail), nil
	}
}

func (t teamProjectDetailDo) Take() (*model.TeamProjectDetail, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamProjectDetail), nil
	}
}

func (t teamProjectDetailDo) Last() (*model.TeamProjectDetail, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamProjectDetail), nil
	}
}

func (t teamProjectDetailDo) Find() ([]*model.TeamProjectDetail, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeamProjectDetail), err
}

func (t teamProjectDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamProjectDetail, err error) {
	buf := make([]*model.TeamProjectDetail, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teamProjectDetailDo) FindInBatches(result *[]*model.TeamProjectDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teamProjectDetailDo) Attrs(attrs ...field.AssignExpr) ITeamProjectDetailDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teamProjectDetailDo) Assign(attrs ...field.AssignExpr) ITeamProjectDetailDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teamProjectDetailDo) Joins(fields ...field.RelationField) ITeamProjectDetailDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teamProjectDetailDo) Preload(fields ...field.RelationField) ITeamProjectDetailDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teamProjectDetailDo) FirstOrInit() (*model.TeamProjectDetail, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamProjectDetail), nil
	}
}

func (t teamProjectDetailDo) FirstOrCreate() (*model.TeamProjectDetail, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamProjectDetail), nil
	}
}

func (t teamProjectDetailDo) FindByPage(offset int, limit int) (result []*model.TeamProjectDetail, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teamProjectDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teamProjectDetailDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teamProjectDetailDo) Delete(models ...*model.TeamProjectDetail) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teamProjectDetailDo) withDO(do gen.Dao) *teamProjectDetailDo {
	t.DO = *do.(*gen.DO)
	return t
}
