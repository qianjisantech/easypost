// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newGsTrafficManagerResponse(db *gorm.DB, opts ...gen.DOOption) gsTrafficManagerResponse {
	_gsTrafficManagerResponse := gsTrafficManagerResponse{}

	_gsTrafficManagerResponse.gsTrafficManagerResponseDo.UseDB(db, opts...)
	_gsTrafficManagerResponse.gsTrafficManagerResponseDo.UseModel(&model.GsTrafficManagerResponse{})

	tableName := _gsTrafficManagerResponse.gsTrafficManagerResponseDo.TableName()
	_gsTrafficManagerResponse.ALL = field.NewAsterisk(tableName)
	_gsTrafficManagerResponse.ID = field.NewInt64(tableName, "id")
	_gsTrafficManagerResponse.Value = field.NewString(tableName, "value")
	_gsTrafficManagerResponse.TrafficID = field.NewInt64(tableName, "traffic_id")
	_gsTrafficManagerResponse.RecordTime = field.NewTime(tableName, "record_time")

	_gsTrafficManagerResponse.fillFieldMap()

	return _gsTrafficManagerResponse
}

type gsTrafficManagerResponse struct {
	gsTrafficManagerResponseDo gsTrafficManagerResponseDo

	ALL        field.Asterisk
	ID         field.Int64
	Value      field.String
	TrafficID  field.Int64
	RecordTime field.Time

	fieldMap map[string]field.Expr
}

func (g gsTrafficManagerResponse) Table(newTableName string) *gsTrafficManagerResponse {
	g.gsTrafficManagerResponseDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gsTrafficManagerResponse) As(alias string) *gsTrafficManagerResponse {
	g.gsTrafficManagerResponseDo.DO = *(g.gsTrafficManagerResponseDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gsTrafficManagerResponse) updateTableName(table string) *gsTrafficManagerResponse {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Value = field.NewString(table, "value")
	g.TrafficID = field.NewInt64(table, "traffic_id")
	g.RecordTime = field.NewTime(table, "record_time")

	g.fillFieldMap()

	return g
}

func (g *gsTrafficManagerResponse) WithContext(ctx context.Context) IGsTrafficManagerResponseDo {
	return g.gsTrafficManagerResponseDo.WithContext(ctx)
}

func (g gsTrafficManagerResponse) TableName() string { return g.gsTrafficManagerResponseDo.TableName() }

func (g gsTrafficManagerResponse) Alias() string { return g.gsTrafficManagerResponseDo.Alias() }

func (g gsTrafficManagerResponse) Columns(cols ...field.Expr) gen.Columns {
	return g.gsTrafficManagerResponseDo.Columns(cols...)
}

func (g *gsTrafficManagerResponse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gsTrafficManagerResponse) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["id"] = g.ID
	g.fieldMap["value"] = g.Value
	g.fieldMap["traffic_id"] = g.TrafficID
	g.fieldMap["record_time"] = g.RecordTime
}

func (g gsTrafficManagerResponse) clone(db *gorm.DB) gsTrafficManagerResponse {
	g.gsTrafficManagerResponseDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gsTrafficManagerResponse) replaceDB(db *gorm.DB) gsTrafficManagerResponse {
	g.gsTrafficManagerResponseDo.ReplaceDB(db)
	return g
}

type gsTrafficManagerResponseDo struct{ gen.DO }

type IGsTrafficManagerResponseDo interface {
	gen.SubQuery
	Debug() IGsTrafficManagerResponseDo
	WithContext(ctx context.Context) IGsTrafficManagerResponseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGsTrafficManagerResponseDo
	WriteDB() IGsTrafficManagerResponseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGsTrafficManagerResponseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGsTrafficManagerResponseDo
	Not(conds ...gen.Condition) IGsTrafficManagerResponseDo
	Or(conds ...gen.Condition) IGsTrafficManagerResponseDo
	Select(conds ...field.Expr) IGsTrafficManagerResponseDo
	Where(conds ...gen.Condition) IGsTrafficManagerResponseDo
	Order(conds ...field.Expr) IGsTrafficManagerResponseDo
	Distinct(cols ...field.Expr) IGsTrafficManagerResponseDo
	Omit(cols ...field.Expr) IGsTrafficManagerResponseDo
	Join(table schema.Tabler, on ...field.Expr) IGsTrafficManagerResponseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerResponseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerResponseDo
	Group(cols ...field.Expr) IGsTrafficManagerResponseDo
	Having(conds ...gen.Condition) IGsTrafficManagerResponseDo
	Limit(limit int) IGsTrafficManagerResponseDo
	Offset(offset int) IGsTrafficManagerResponseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGsTrafficManagerResponseDo
	Unscoped() IGsTrafficManagerResponseDo
	Create(values ...*model.GsTrafficManagerResponse) error
	CreateInBatches(values []*model.GsTrafficManagerResponse, batchSize int) error
	Save(values ...*model.GsTrafficManagerResponse) error
	First() (*model.GsTrafficManagerResponse, error)
	Take() (*model.GsTrafficManagerResponse, error)
	Last() (*model.GsTrafficManagerResponse, error)
	Find() ([]*model.GsTrafficManagerResponse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GsTrafficManagerResponse, err error)
	FindInBatches(result *[]*model.GsTrafficManagerResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GsTrafficManagerResponse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGsTrafficManagerResponseDo
	Assign(attrs ...field.AssignExpr) IGsTrafficManagerResponseDo
	Joins(fields ...field.RelationField) IGsTrafficManagerResponseDo
	Preload(fields ...field.RelationField) IGsTrafficManagerResponseDo
	FirstOrInit() (*model.GsTrafficManagerResponse, error)
	FirstOrCreate() (*model.GsTrafficManagerResponse, error)
	FindByPage(offset int, limit int) (result []*model.GsTrafficManagerResponse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGsTrafficManagerResponseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gsTrafficManagerResponseDo) Debug() IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Debug())
}

func (g gsTrafficManagerResponseDo) WithContext(ctx context.Context) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gsTrafficManagerResponseDo) ReadDB() IGsTrafficManagerResponseDo {
	return g.Clauses(dbresolver.Read)
}

func (g gsTrafficManagerResponseDo) WriteDB() IGsTrafficManagerResponseDo {
	return g.Clauses(dbresolver.Write)
}

func (g gsTrafficManagerResponseDo) Session(config *gorm.Session) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Session(config))
}

func (g gsTrafficManagerResponseDo) Clauses(conds ...clause.Expression) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gsTrafficManagerResponseDo) Returning(value interface{}, columns ...string) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gsTrafficManagerResponseDo) Not(conds ...gen.Condition) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gsTrafficManagerResponseDo) Or(conds ...gen.Condition) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gsTrafficManagerResponseDo) Select(conds ...field.Expr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gsTrafficManagerResponseDo) Where(conds ...gen.Condition) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gsTrafficManagerResponseDo) Order(conds ...field.Expr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gsTrafficManagerResponseDo) Distinct(cols ...field.Expr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gsTrafficManagerResponseDo) Omit(cols ...field.Expr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gsTrafficManagerResponseDo) Join(table schema.Tabler, on ...field.Expr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gsTrafficManagerResponseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gsTrafficManagerResponseDo) RightJoin(table schema.Tabler, on ...field.Expr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gsTrafficManagerResponseDo) Group(cols ...field.Expr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gsTrafficManagerResponseDo) Having(conds ...gen.Condition) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gsTrafficManagerResponseDo) Limit(limit int) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gsTrafficManagerResponseDo) Offset(offset int) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gsTrafficManagerResponseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gsTrafficManagerResponseDo) Unscoped() IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gsTrafficManagerResponseDo) Create(values ...*model.GsTrafficManagerResponse) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gsTrafficManagerResponseDo) CreateInBatches(values []*model.GsTrafficManagerResponse, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gsTrafficManagerResponseDo) Save(values ...*model.GsTrafficManagerResponse) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gsTrafficManagerResponseDo) First() (*model.GsTrafficManagerResponse, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerResponse), nil
	}
}

func (g gsTrafficManagerResponseDo) Take() (*model.GsTrafficManagerResponse, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerResponse), nil
	}
}

func (g gsTrafficManagerResponseDo) Last() (*model.GsTrafficManagerResponse, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerResponse), nil
	}
}

func (g gsTrafficManagerResponseDo) Find() ([]*model.GsTrafficManagerResponse, error) {
	result, err := g.DO.Find()
	return result.([]*model.GsTrafficManagerResponse), err
}

func (g gsTrafficManagerResponseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GsTrafficManagerResponse, err error) {
	buf := make([]*model.GsTrafficManagerResponse, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gsTrafficManagerResponseDo) FindInBatches(result *[]*model.GsTrafficManagerResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gsTrafficManagerResponseDo) Attrs(attrs ...field.AssignExpr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gsTrafficManagerResponseDo) Assign(attrs ...field.AssignExpr) IGsTrafficManagerResponseDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gsTrafficManagerResponseDo) Joins(fields ...field.RelationField) IGsTrafficManagerResponseDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gsTrafficManagerResponseDo) Preload(fields ...field.RelationField) IGsTrafficManagerResponseDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gsTrafficManagerResponseDo) FirstOrInit() (*model.GsTrafficManagerResponse, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerResponse), nil
	}
}

func (g gsTrafficManagerResponseDo) FirstOrCreate() (*model.GsTrafficManagerResponse, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GsTrafficManagerResponse), nil
	}
}

func (g gsTrafficManagerResponseDo) FindByPage(offset int, limit int) (result []*model.GsTrafficManagerResponse, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gsTrafficManagerResponseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gsTrafficManagerResponseDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gsTrafficManagerResponseDo) Delete(models ...*model.GsTrafficManagerResponse) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gsTrafficManagerResponseDo) withDO(do gen.Dao) *gsTrafficManagerResponseDo {
	g.DO = *do.(*gen.DO)
	return g
}
