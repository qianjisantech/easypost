// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmAPIResponse(db *gorm.DB, opts ...gen.DOOption) amAPIResponse {
	_amAPIResponse := amAPIResponse{}

	_amAPIResponse.amAPIResponseDo.UseDB(db, opts...)
	_amAPIResponse.amAPIResponseDo.UseModel(&model.AmAPIResponse{})

	tableName := _amAPIResponse.amAPIResponseDo.TableName()
	_amAPIResponse.ALL = field.NewAsterisk(tableName)
	_amAPIResponse.ID = field.NewInt64(tableName, "id")
	_amAPIResponse.Code = field.NewInt32(tableName, "code")
	_amAPIResponse.Name = field.NewString(tableName, "name")
	_amAPIResponse.ContentType = field.NewString(tableName, "content_type")
	_amAPIResponse.APIID = field.NewInt64(tableName, "api_id")
	_amAPIResponse.CreateBy = field.NewString(tableName, "create_by")
	_amAPIResponse.CreateTime = field.NewTime(tableName, "create_time")
	_amAPIResponse.JSONSchemaType = field.NewString(tableName, "json_schema_type")
	_amAPIResponse.UpdateBy = field.NewString(tableName, "update_by")
	_amAPIResponse.UpdateTime = field.NewTime(tableName, "update_time")
	_amAPIResponse.IsDeleted = field.NewBool(tableName, "is_deleted")

	_amAPIResponse.fillFieldMap()

	return _amAPIResponse
}

type amAPIResponse struct {
	amAPIResponseDo amAPIResponseDo

	ALL            field.Asterisk
	ID             field.Int64
	Code           field.Int32
	Name           field.String
	ContentType    field.String
	APIID          field.Int64
	CreateBy       field.String
	CreateTime     field.Time
	JSONSchemaType field.String
	UpdateBy       field.String
	UpdateTime     field.Time
	IsDeleted      field.Bool

	fieldMap map[string]field.Expr
}

func (a amAPIResponse) Table(newTableName string) *amAPIResponse {
	a.amAPIResponseDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amAPIResponse) As(alias string) *amAPIResponse {
	a.amAPIResponseDo.DO = *(a.amAPIResponseDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amAPIResponse) updateTableName(table string) *amAPIResponse {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Code = field.NewInt32(table, "code")
	a.Name = field.NewString(table, "name")
	a.ContentType = field.NewString(table, "content_type")
	a.APIID = field.NewInt64(table, "api_id")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.JSONSchemaType = field.NewString(table, "json_schema_type")
	a.UpdateBy = field.NewString(table, "update_by")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")

	a.fillFieldMap()

	return a
}

func (a *amAPIResponse) WithContext(ctx context.Context) IAmAPIResponseDo {
	return a.amAPIResponseDo.WithContext(ctx)
}

func (a amAPIResponse) TableName() string { return a.amAPIResponseDo.TableName() }

func (a amAPIResponse) Alias() string { return a.amAPIResponseDo.Alias() }

func (a amAPIResponse) Columns(cols ...field.Expr) gen.Columns {
	return a.amAPIResponseDo.Columns(cols...)
}

func (a *amAPIResponse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amAPIResponse) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["code"] = a.Code
	a.fieldMap["name"] = a.Name
	a.fieldMap["content_type"] = a.ContentType
	a.fieldMap["api_id"] = a.APIID
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["json_schema_type"] = a.JSONSchemaType
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
}

func (a amAPIResponse) clone(db *gorm.DB) amAPIResponse {
	a.amAPIResponseDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amAPIResponse) replaceDB(db *gorm.DB) amAPIResponse {
	a.amAPIResponseDo.ReplaceDB(db)
	return a
}

type amAPIResponseDo struct{ gen.DO }

type IAmAPIResponseDo interface {
	gen.SubQuery
	Debug() IAmAPIResponseDo
	WithContext(ctx context.Context) IAmAPIResponseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmAPIResponseDo
	WriteDB() IAmAPIResponseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmAPIResponseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmAPIResponseDo
	Not(conds ...gen.Condition) IAmAPIResponseDo
	Or(conds ...gen.Condition) IAmAPIResponseDo
	Select(conds ...field.Expr) IAmAPIResponseDo
	Where(conds ...gen.Condition) IAmAPIResponseDo
	Order(conds ...field.Expr) IAmAPIResponseDo
	Distinct(cols ...field.Expr) IAmAPIResponseDo
	Omit(cols ...field.Expr) IAmAPIResponseDo
	Join(table schema.Tabler, on ...field.Expr) IAmAPIResponseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIResponseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIResponseDo
	Group(cols ...field.Expr) IAmAPIResponseDo
	Having(conds ...gen.Condition) IAmAPIResponseDo
	Limit(limit int) IAmAPIResponseDo
	Offset(offset int) IAmAPIResponseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIResponseDo
	Unscoped() IAmAPIResponseDo
	Create(values ...*model.AmAPIResponse) error
	CreateInBatches(values []*model.AmAPIResponse, batchSize int) error
	Save(values ...*model.AmAPIResponse) error
	First() (*model.AmAPIResponse, error)
	Take() (*model.AmAPIResponse, error)
	Last() (*model.AmAPIResponse, error)
	Find() ([]*model.AmAPIResponse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPIResponse, err error)
	FindInBatches(result *[]*model.AmAPIResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmAPIResponse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmAPIResponseDo
	Assign(attrs ...field.AssignExpr) IAmAPIResponseDo
	Joins(fields ...field.RelationField) IAmAPIResponseDo
	Preload(fields ...field.RelationField) IAmAPIResponseDo
	FirstOrInit() (*model.AmAPIResponse, error)
	FirstOrCreate() (*model.AmAPIResponse, error)
	FindByPage(offset int, limit int) (result []*model.AmAPIResponse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmAPIResponseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amAPIResponseDo) Debug() IAmAPIResponseDo {
	return a.withDO(a.DO.Debug())
}

func (a amAPIResponseDo) WithContext(ctx context.Context) IAmAPIResponseDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amAPIResponseDo) ReadDB() IAmAPIResponseDo {
	return a.Clauses(dbresolver.Read)
}

func (a amAPIResponseDo) WriteDB() IAmAPIResponseDo {
	return a.Clauses(dbresolver.Write)
}

func (a amAPIResponseDo) Session(config *gorm.Session) IAmAPIResponseDo {
	return a.withDO(a.DO.Session(config))
}

func (a amAPIResponseDo) Clauses(conds ...clause.Expression) IAmAPIResponseDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amAPIResponseDo) Returning(value interface{}, columns ...string) IAmAPIResponseDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amAPIResponseDo) Not(conds ...gen.Condition) IAmAPIResponseDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amAPIResponseDo) Or(conds ...gen.Condition) IAmAPIResponseDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amAPIResponseDo) Select(conds ...field.Expr) IAmAPIResponseDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amAPIResponseDo) Where(conds ...gen.Condition) IAmAPIResponseDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amAPIResponseDo) Order(conds ...field.Expr) IAmAPIResponseDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amAPIResponseDo) Distinct(cols ...field.Expr) IAmAPIResponseDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amAPIResponseDo) Omit(cols ...field.Expr) IAmAPIResponseDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amAPIResponseDo) Join(table schema.Tabler, on ...field.Expr) IAmAPIResponseDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amAPIResponseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmAPIResponseDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amAPIResponseDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmAPIResponseDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amAPIResponseDo) Group(cols ...field.Expr) IAmAPIResponseDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amAPIResponseDo) Having(conds ...gen.Condition) IAmAPIResponseDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amAPIResponseDo) Limit(limit int) IAmAPIResponseDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amAPIResponseDo) Offset(offset int) IAmAPIResponseDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amAPIResponseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmAPIResponseDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amAPIResponseDo) Unscoped() IAmAPIResponseDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amAPIResponseDo) Create(values ...*model.AmAPIResponse) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amAPIResponseDo) CreateInBatches(values []*model.AmAPIResponse, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amAPIResponseDo) Save(values ...*model.AmAPIResponse) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amAPIResponseDo) First() (*model.AmAPIResponse, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponse), nil
	}
}

func (a amAPIResponseDo) Take() (*model.AmAPIResponse, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponse), nil
	}
}

func (a amAPIResponseDo) Last() (*model.AmAPIResponse, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponse), nil
	}
}

func (a amAPIResponseDo) Find() ([]*model.AmAPIResponse, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmAPIResponse), err
}

func (a amAPIResponseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmAPIResponse, err error) {
	buf := make([]*model.AmAPIResponse, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amAPIResponseDo) FindInBatches(result *[]*model.AmAPIResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amAPIResponseDo) Attrs(attrs ...field.AssignExpr) IAmAPIResponseDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amAPIResponseDo) Assign(attrs ...field.AssignExpr) IAmAPIResponseDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amAPIResponseDo) Joins(fields ...field.RelationField) IAmAPIResponseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amAPIResponseDo) Preload(fields ...field.RelationField) IAmAPIResponseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amAPIResponseDo) FirstOrInit() (*model.AmAPIResponse, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponse), nil
	}
}

func (a amAPIResponseDo) FirstOrCreate() (*model.AmAPIResponse, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmAPIResponse), nil
	}
}

func (a amAPIResponseDo) FindByPage(offset int, limit int) (result []*model.AmAPIResponse, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amAPIResponseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amAPIResponseDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amAPIResponseDo) Delete(models ...*model.AmAPIResponse) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amAPIResponseDo) withDO(do gen.Dao) *amAPIResponseDo {
	a.DO = *do.(*gen.DO)
	return a
}
