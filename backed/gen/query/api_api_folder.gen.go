// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAPIApiFolder(db *gorm.DB, opts ...gen.DOOption) aPIApiFolder {
	_aPIApiFolder := aPIApiFolder{}

	_aPIApiFolder.aPIApiFolderDo.UseDB(db, opts...)
	_aPIApiFolder.aPIApiFolderDo.UseModel(&model.APIApiFolder{})

	tableName := _aPIApiFolder.aPIApiFolderDo.TableName()
	_aPIApiFolder.ALL = field.NewAsterisk(tableName)
	_aPIApiFolder.ID = field.NewInt64(tableName, "id")
	_aPIApiFolder.Name = field.NewString(tableName, "name")
	_aPIApiFolder.Type = field.NewString(tableName, "type")
	_aPIApiFolder.CreateBy = field.NewString(tableName, "create_by")
	_aPIApiFolder.CreateTime = field.NewTime(tableName, "create_time")
	_aPIApiFolder.IsDeleted = field.NewBool(tableName, "is_deleted")
	_aPIApiFolder.UpdateBy = field.NewString(tableName, "update_by")
	_aPIApiFolder.UpdateTime = field.NewTime(tableName, "update_time")
	_aPIApiFolder.Reamark = field.NewString(tableName, "reamark")

	_aPIApiFolder.fillFieldMap()

	return _aPIApiFolder
}

type aPIApiFolder struct {
	aPIApiFolderDo aPIApiFolderDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	Type       field.String
	CreateBy   field.String
	CreateTime field.Time
	IsDeleted  field.Bool
	UpdateBy   field.String
	UpdateTime field.Time
	Reamark    field.String

	fieldMap map[string]field.Expr
}

func (a aPIApiFolder) Table(newTableName string) *aPIApiFolder {
	a.aPIApiFolderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIApiFolder) As(alias string) *aPIApiFolder {
	a.aPIApiFolderDo.DO = *(a.aPIApiFolderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIApiFolder) updateTableName(table string) *aPIApiFolder {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewString(table, "type")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.UpdateBy = field.NewString(table, "update_by")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.Reamark = field.NewString(table, "reamark")

	a.fillFieldMap()

	return a
}

func (a *aPIApiFolder) WithContext(ctx context.Context) IAPIApiFolderDo {
	return a.aPIApiFolderDo.WithContext(ctx)
}

func (a aPIApiFolder) TableName() string { return a.aPIApiFolderDo.TableName() }

func (a aPIApiFolder) Alias() string { return a.aPIApiFolderDo.Alias() }

func (a aPIApiFolder) Columns(cols ...field.Expr) gen.Columns {
	return a.aPIApiFolderDo.Columns(cols...)
}

func (a *aPIApiFolder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIApiFolder) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["reamark"] = a.Reamark
}

func (a aPIApiFolder) clone(db *gorm.DB) aPIApiFolder {
	a.aPIApiFolderDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIApiFolder) replaceDB(db *gorm.DB) aPIApiFolder {
	a.aPIApiFolderDo.ReplaceDB(db)
	return a
}

type aPIApiFolderDo struct{ gen.DO }

type IAPIApiFolderDo interface {
	gen.SubQuery
	Debug() IAPIApiFolderDo
	WithContext(ctx context.Context) IAPIApiFolderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIApiFolderDo
	WriteDB() IAPIApiFolderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIApiFolderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIApiFolderDo
	Not(conds ...gen.Condition) IAPIApiFolderDo
	Or(conds ...gen.Condition) IAPIApiFolderDo
	Select(conds ...field.Expr) IAPIApiFolderDo
	Where(conds ...gen.Condition) IAPIApiFolderDo
	Order(conds ...field.Expr) IAPIApiFolderDo
	Distinct(cols ...field.Expr) IAPIApiFolderDo
	Omit(cols ...field.Expr) IAPIApiFolderDo
	Join(table schema.Tabler, on ...field.Expr) IAPIApiFolderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIApiFolderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIApiFolderDo
	Group(cols ...field.Expr) IAPIApiFolderDo
	Having(conds ...gen.Condition) IAPIApiFolderDo
	Limit(limit int) IAPIApiFolderDo
	Offset(offset int) IAPIApiFolderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIApiFolderDo
	Unscoped() IAPIApiFolderDo
	Create(values ...*model.APIApiFolder) error
	CreateInBatches(values []*model.APIApiFolder, batchSize int) error
	Save(values ...*model.APIApiFolder) error
	First() (*model.APIApiFolder, error)
	Take() (*model.APIApiFolder, error)
	Last() (*model.APIApiFolder, error)
	Find() ([]*model.APIApiFolder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIApiFolder, err error)
	FindInBatches(result *[]*model.APIApiFolder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIApiFolder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIApiFolderDo
	Assign(attrs ...field.AssignExpr) IAPIApiFolderDo
	Joins(fields ...field.RelationField) IAPIApiFolderDo
	Preload(fields ...field.RelationField) IAPIApiFolderDo
	FirstOrInit() (*model.APIApiFolder, error)
	FirstOrCreate() (*model.APIApiFolder, error)
	FindByPage(offset int, limit int) (result []*model.APIApiFolder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIApiFolderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIApiFolderDo) Debug() IAPIApiFolderDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIApiFolderDo) WithContext(ctx context.Context) IAPIApiFolderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIApiFolderDo) ReadDB() IAPIApiFolderDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIApiFolderDo) WriteDB() IAPIApiFolderDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIApiFolderDo) Session(config *gorm.Session) IAPIApiFolderDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIApiFolderDo) Clauses(conds ...clause.Expression) IAPIApiFolderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIApiFolderDo) Returning(value interface{}, columns ...string) IAPIApiFolderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIApiFolderDo) Not(conds ...gen.Condition) IAPIApiFolderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIApiFolderDo) Or(conds ...gen.Condition) IAPIApiFolderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIApiFolderDo) Select(conds ...field.Expr) IAPIApiFolderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIApiFolderDo) Where(conds ...gen.Condition) IAPIApiFolderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIApiFolderDo) Order(conds ...field.Expr) IAPIApiFolderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIApiFolderDo) Distinct(cols ...field.Expr) IAPIApiFolderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIApiFolderDo) Omit(cols ...field.Expr) IAPIApiFolderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIApiFolderDo) Join(table schema.Tabler, on ...field.Expr) IAPIApiFolderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIApiFolderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIApiFolderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIApiFolderDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIApiFolderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIApiFolderDo) Group(cols ...field.Expr) IAPIApiFolderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIApiFolderDo) Having(conds ...gen.Condition) IAPIApiFolderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIApiFolderDo) Limit(limit int) IAPIApiFolderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIApiFolderDo) Offset(offset int) IAPIApiFolderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIApiFolderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIApiFolderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIApiFolderDo) Unscoped() IAPIApiFolderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIApiFolderDo) Create(values ...*model.APIApiFolder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIApiFolderDo) CreateInBatches(values []*model.APIApiFolder, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIApiFolderDo) Save(values ...*model.APIApiFolder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIApiFolderDo) First() (*model.APIApiFolder, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiFolder), nil
	}
}

func (a aPIApiFolderDo) Take() (*model.APIApiFolder, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiFolder), nil
	}
}

func (a aPIApiFolderDo) Last() (*model.APIApiFolder, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiFolder), nil
	}
}

func (a aPIApiFolderDo) Find() ([]*model.APIApiFolder, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIApiFolder), err
}

func (a aPIApiFolderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIApiFolder, err error) {
	buf := make([]*model.APIApiFolder, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIApiFolderDo) FindInBatches(result *[]*model.APIApiFolder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIApiFolderDo) Attrs(attrs ...field.AssignExpr) IAPIApiFolderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIApiFolderDo) Assign(attrs ...field.AssignExpr) IAPIApiFolderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIApiFolderDo) Joins(fields ...field.RelationField) IAPIApiFolderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIApiFolderDo) Preload(fields ...field.RelationField) IAPIApiFolderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIApiFolderDo) FirstOrInit() (*model.APIApiFolder, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiFolder), nil
	}
}

func (a aPIApiFolderDo) FirstOrCreate() (*model.APIApiFolder, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIApiFolder), nil
	}
}

func (a aPIApiFolderDo) FindByPage(offset int, limit int) (result []*model.APIApiFolder, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIApiFolderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIApiFolderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIApiFolderDo) Delete(models ...*model.APIApiFolder) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIApiFolderDo) withDO(do gen.Dao) *aPIApiFolderDo {
	a.DO = *do.(*gen.DO)
	return a
}
