// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                           = new(Query)
	AmsAPI                      *amsAPI
	AmsAPICase                  *amsAPICase
	AmsDoc                      *amsDoc
	AmsEnvironmentManage        *amsEnvironmentManage
	AmsFolder                   *amsFolder
	GsTrafficManager            *gsTrafficManager
	GsTrafficManagerHeader      *gsTrafficManagerHeader
	GsTrafficManagerRequestBody *gsTrafficManagerRequestBody
	GsTrafficManagerResponse    *gsTrafficManagerResponse
	SysOrganizeTeam             *sysOrganizeTeam
	SysProject                  *sysProject
	SysTeam                     *sysTeam
	SysTeamMember               *sysTeamMember
	SysUser                     *sysUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AmsAPI = &Q.AmsAPI
	AmsAPICase = &Q.AmsAPICase
	AmsDoc = &Q.AmsDoc
	AmsEnvironmentManage = &Q.AmsEnvironmentManage
	AmsFolder = &Q.AmsFolder
	GsTrafficManager = &Q.GsTrafficManager
	GsTrafficManagerHeader = &Q.GsTrafficManagerHeader
	GsTrafficManagerRequestBody = &Q.GsTrafficManagerRequestBody
	GsTrafficManagerResponse = &Q.GsTrafficManagerResponse
	SysOrganizeTeam = &Q.SysOrganizeTeam
	SysProject = &Q.SysProject
	SysTeam = &Q.SysTeam
	SysTeamMember = &Q.SysTeamMember
	SysUser = &Q.SysUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                          db,
		AmsAPI:                      newAmsAPI(db, opts...),
		AmsAPICase:                  newAmsAPICase(db, opts...),
		AmsDoc:                      newAmsDoc(db, opts...),
		AmsEnvironmentManage:        newAmsEnvironmentManage(db, opts...),
		AmsFolder:                   newAmsFolder(db, opts...),
		GsTrafficManager:            newGsTrafficManager(db, opts...),
		GsTrafficManagerHeader:      newGsTrafficManagerHeader(db, opts...),
		GsTrafficManagerRequestBody: newGsTrafficManagerRequestBody(db, opts...),
		GsTrafficManagerResponse:    newGsTrafficManagerResponse(db, opts...),
		SysOrganizeTeam:             newSysOrganizeTeam(db, opts...),
		SysProject:                  newSysProject(db, opts...),
		SysTeam:                     newSysTeam(db, opts...),
		SysTeamMember:               newSysTeamMember(db, opts...),
		SysUser:                     newSysUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AmsAPI                      amsAPI
	AmsAPICase                  amsAPICase
	AmsDoc                      amsDoc
	AmsEnvironmentManage        amsEnvironmentManage
	AmsFolder                   amsFolder
	GsTrafficManager            gsTrafficManager
	GsTrafficManagerHeader      gsTrafficManagerHeader
	GsTrafficManagerRequestBody gsTrafficManagerRequestBody
	GsTrafficManagerResponse    gsTrafficManagerResponse
	SysOrganizeTeam             sysOrganizeTeam
	SysProject                  sysProject
	SysTeam                     sysTeam
	SysTeamMember               sysTeamMember
	SysUser                     sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		AmsAPI:                      q.AmsAPI.clone(db),
		AmsAPICase:                  q.AmsAPICase.clone(db),
		AmsDoc:                      q.AmsDoc.clone(db),
		AmsEnvironmentManage:        q.AmsEnvironmentManage.clone(db),
		AmsFolder:                   q.AmsFolder.clone(db),
		GsTrafficManager:            q.GsTrafficManager.clone(db),
		GsTrafficManagerHeader:      q.GsTrafficManagerHeader.clone(db),
		GsTrafficManagerRequestBody: q.GsTrafficManagerRequestBody.clone(db),
		GsTrafficManagerResponse:    q.GsTrafficManagerResponse.clone(db),
		SysOrganizeTeam:             q.SysOrganizeTeam.clone(db),
		SysProject:                  q.SysProject.clone(db),
		SysTeam:                     q.SysTeam.clone(db),
		SysTeamMember:               q.SysTeamMember.clone(db),
		SysUser:                     q.SysUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		AmsAPI:                      q.AmsAPI.replaceDB(db),
		AmsAPICase:                  q.AmsAPICase.replaceDB(db),
		AmsDoc:                      q.AmsDoc.replaceDB(db),
		AmsEnvironmentManage:        q.AmsEnvironmentManage.replaceDB(db),
		AmsFolder:                   q.AmsFolder.replaceDB(db),
		GsTrafficManager:            q.GsTrafficManager.replaceDB(db),
		GsTrafficManagerHeader:      q.GsTrafficManagerHeader.replaceDB(db),
		GsTrafficManagerRequestBody: q.GsTrafficManagerRequestBody.replaceDB(db),
		GsTrafficManagerResponse:    q.GsTrafficManagerResponse.replaceDB(db),
		SysOrganizeTeam:             q.SysOrganizeTeam.replaceDB(db),
		SysProject:                  q.SysProject.replaceDB(db),
		SysTeam:                     q.SysTeam.replaceDB(db),
		SysTeamMember:               q.SysTeamMember.replaceDB(db),
		SysUser:                     q.SysUser.replaceDB(db),
	}
}

type queryCtx struct {
	AmsAPI                      IAmsAPIDo
	AmsAPICase                  IAmsAPICaseDo
	AmsDoc                      IAmsDocDo
	AmsEnvironmentManage        IAmsEnvironmentManageDo
	AmsFolder                   IAmsFolderDo
	GsTrafficManager            IGsTrafficManagerDo
	GsTrafficManagerHeader      IGsTrafficManagerHeaderDo
	GsTrafficManagerRequestBody IGsTrafficManagerRequestBodyDo
	GsTrafficManagerResponse    IGsTrafficManagerResponseDo
	SysOrganizeTeam             ISysOrganizeTeamDo
	SysProject                  ISysProjectDo
	SysTeam                     ISysTeamDo
	SysTeamMember               ISysTeamMemberDo
	SysUser                     ISysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AmsAPI:                      q.AmsAPI.WithContext(ctx),
		AmsAPICase:                  q.AmsAPICase.WithContext(ctx),
		AmsDoc:                      q.AmsDoc.WithContext(ctx),
		AmsEnvironmentManage:        q.AmsEnvironmentManage.WithContext(ctx),
		AmsFolder:                   q.AmsFolder.WithContext(ctx),
		GsTrafficManager:            q.GsTrafficManager.WithContext(ctx),
		GsTrafficManagerHeader:      q.GsTrafficManagerHeader.WithContext(ctx),
		GsTrafficManagerRequestBody: q.GsTrafficManagerRequestBody.WithContext(ctx),
		GsTrafficManagerResponse:    q.GsTrafficManagerResponse.WithContext(ctx),
		SysOrganizeTeam:             q.SysOrganizeTeam.WithContext(ctx),
		SysProject:                  q.SysProject.WithContext(ctx),
		SysTeam:                     q.SysTeam.WithContext(ctx),
		SysTeamMember:               q.SysTeamMember.WithContext(ctx),
		SysUser:                     q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
