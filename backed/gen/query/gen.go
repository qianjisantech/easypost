// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                     = new(Query)
	AmAPI                 *amAPI
	AmAPIParameter        *amAPIParameter
	AmAPIRequestBodyJSON  *amAPIRequestBodyJSON
	AmAPIResponse         *amAPIResponse
	AmAPIResponseExample  *amAPIResponseExample
	AmAPIResponseProperty *amAPIResponseProperty
	AmDoc                 *amDoc
	AmFolder              *amFolder
	SysOrganizeTeam       *sysOrganizeTeam
	SysProject            *sysProject
	SysTeam               *sysTeam
	SysTeamMember         *sysTeamMember
	SysUser               *sysUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AmAPI = &Q.AmAPI
	AmAPIParameter = &Q.AmAPIParameter
	AmAPIRequestBodyJSON = &Q.AmAPIRequestBodyJSON
	AmAPIResponse = &Q.AmAPIResponse
	AmAPIResponseExample = &Q.AmAPIResponseExample
	AmAPIResponseProperty = &Q.AmAPIResponseProperty
	AmDoc = &Q.AmDoc
	AmFolder = &Q.AmFolder
	SysOrganizeTeam = &Q.SysOrganizeTeam
	SysProject = &Q.SysProject
	SysTeam = &Q.SysTeam
	SysTeamMember = &Q.SysTeamMember
	SysUser = &Q.SysUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		AmAPI:                 newAmAPI(db, opts...),
		AmAPIParameter:        newAmAPIParameter(db, opts...),
		AmAPIRequestBodyJSON:  newAmAPIRequestBodyJSON(db, opts...),
		AmAPIResponse:         newAmAPIResponse(db, opts...),
		AmAPIResponseExample:  newAmAPIResponseExample(db, opts...),
		AmAPIResponseProperty: newAmAPIResponseProperty(db, opts...),
		AmDoc:                 newAmDoc(db, opts...),
		AmFolder:              newAmFolder(db, opts...),
		SysOrganizeTeam:       newSysOrganizeTeam(db, opts...),
		SysProject:            newSysProject(db, opts...),
		SysTeam:               newSysTeam(db, opts...),
		SysTeamMember:         newSysTeamMember(db, opts...),
		SysUser:               newSysUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AmAPI                 amAPI
	AmAPIParameter        amAPIParameter
	AmAPIRequestBodyJSON  amAPIRequestBodyJSON
	AmAPIResponse         amAPIResponse
	AmAPIResponseExample  amAPIResponseExample
	AmAPIResponseProperty amAPIResponseProperty
	AmDoc                 amDoc
	AmFolder              amFolder
	SysOrganizeTeam       sysOrganizeTeam
	SysProject            sysProject
	SysTeam               sysTeam
	SysTeamMember         sysTeamMember
	SysUser               sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		AmAPI:                 q.AmAPI.clone(db),
		AmAPIParameter:        q.AmAPIParameter.clone(db),
		AmAPIRequestBodyJSON:  q.AmAPIRequestBodyJSON.clone(db),
		AmAPIResponse:         q.AmAPIResponse.clone(db),
		AmAPIResponseExample:  q.AmAPIResponseExample.clone(db),
		AmAPIResponseProperty: q.AmAPIResponseProperty.clone(db),
		AmDoc:                 q.AmDoc.clone(db),
		AmFolder:              q.AmFolder.clone(db),
		SysOrganizeTeam:       q.SysOrganizeTeam.clone(db),
		SysProject:            q.SysProject.clone(db),
		SysTeam:               q.SysTeam.clone(db),
		SysTeamMember:         q.SysTeamMember.clone(db),
		SysUser:               q.SysUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		AmAPI:                 q.AmAPI.replaceDB(db),
		AmAPIParameter:        q.AmAPIParameter.replaceDB(db),
		AmAPIRequestBodyJSON:  q.AmAPIRequestBodyJSON.replaceDB(db),
		AmAPIResponse:         q.AmAPIResponse.replaceDB(db),
		AmAPIResponseExample:  q.AmAPIResponseExample.replaceDB(db),
		AmAPIResponseProperty: q.AmAPIResponseProperty.replaceDB(db),
		AmDoc:                 q.AmDoc.replaceDB(db),
		AmFolder:              q.AmFolder.replaceDB(db),
		SysOrganizeTeam:       q.SysOrganizeTeam.replaceDB(db),
		SysProject:            q.SysProject.replaceDB(db),
		SysTeam:               q.SysTeam.replaceDB(db),
		SysTeamMember:         q.SysTeamMember.replaceDB(db),
		SysUser:               q.SysUser.replaceDB(db),
	}
}

type queryCtx struct {
	AmAPI                 IAmAPIDo
	AmAPIParameter        IAmAPIParameterDo
	AmAPIRequestBodyJSON  IAmAPIRequestBodyJSONDo
	AmAPIResponse         IAmAPIResponseDo
	AmAPIResponseExample  IAmAPIResponseExampleDo
	AmAPIResponseProperty IAmAPIResponsePropertyDo
	AmDoc                 IAmDocDo
	AmFolder              IAmFolderDo
	SysOrganizeTeam       ISysOrganizeTeamDo
	SysProject            ISysProjectDo
	SysTeam               ISysTeamDo
	SysTeamMember         ISysTeamMemberDo
	SysUser               ISysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AmAPI:                 q.AmAPI.WithContext(ctx),
		AmAPIParameter:        q.AmAPIParameter.WithContext(ctx),
		AmAPIRequestBodyJSON:  q.AmAPIRequestBodyJSON.WithContext(ctx),
		AmAPIResponse:         q.AmAPIResponse.WithContext(ctx),
		AmAPIResponseExample:  q.AmAPIResponseExample.WithContext(ctx),
		AmAPIResponseProperty: q.AmAPIResponseProperty.WithContext(ctx),
		AmDoc:                 q.AmDoc.WithContext(ctx),
		AmFolder:              q.AmFolder.WithContext(ctx),
		SysOrganizeTeam:       q.SysOrganizeTeam.WithContext(ctx),
		SysProject:            q.SysProject.WithContext(ctx),
		SysTeam:               q.SysTeam.WithContext(ctx),
		SysTeamMember:         q.SysTeamMember.WithContext(ctx),
		SysUser:               q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
