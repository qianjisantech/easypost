// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                       = new(Query)
	APIApiDetail            *aPIApiDetail
	APIApiFolder            *aPIApiFolder
	APIParametersHeader     *aPIParametersHeader
	APIParametersQuery      *aPIParametersQuery
	APIRequestBodyParameter *aPIRequestBodyParameter
	APIRequestBodyRaw       *aPIRequestBodyRaw
	APIResponseInfo         *aPIResponseInfo
	APIResponseProperty     *aPIResponseProperty
	SysOrganizeTeam         *sysOrganizeTeam
	SysProject              *sysProject
	SysTeam                 *sysTeam
	SysUser                 *sysUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	APIApiDetail = &Q.APIApiDetail
	APIApiFolder = &Q.APIApiFolder
	APIParametersHeader = &Q.APIParametersHeader
	APIParametersQuery = &Q.APIParametersQuery
	APIRequestBodyParameter = &Q.APIRequestBodyParameter
	APIRequestBodyRaw = &Q.APIRequestBodyRaw
	APIResponseInfo = &Q.APIResponseInfo
	APIResponseProperty = &Q.APIResponseProperty
	SysOrganizeTeam = &Q.SysOrganizeTeam
	SysProject = &Q.SysProject
	SysTeam = &Q.SysTeam
	SysUser = &Q.SysUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                      db,
		APIApiDetail:            newAPIApiDetail(db, opts...),
		APIApiFolder:            newAPIApiFolder(db, opts...),
		APIParametersHeader:     newAPIParametersHeader(db, opts...),
		APIParametersQuery:      newAPIParametersQuery(db, opts...),
		APIRequestBodyParameter: newAPIRequestBodyParameter(db, opts...),
		APIRequestBodyRaw:       newAPIRequestBodyRaw(db, opts...),
		APIResponseInfo:         newAPIResponseInfo(db, opts...),
		APIResponseProperty:     newAPIResponseProperty(db, opts...),
		SysOrganizeTeam:         newSysOrganizeTeam(db, opts...),
		SysProject:              newSysProject(db, opts...),
		SysTeam:                 newSysTeam(db, opts...),
		SysUser:                 newSysUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	APIApiDetail            aPIApiDetail
	APIApiFolder            aPIApiFolder
	APIParametersHeader     aPIParametersHeader
	APIParametersQuery      aPIParametersQuery
	APIRequestBodyParameter aPIRequestBodyParameter
	APIRequestBodyRaw       aPIRequestBodyRaw
	APIResponseInfo         aPIResponseInfo
	APIResponseProperty     aPIResponseProperty
	SysOrganizeTeam         sysOrganizeTeam
	SysProject              sysProject
	SysTeam                 sysTeam
	SysUser                 sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		APIApiDetail:            q.APIApiDetail.clone(db),
		APIApiFolder:            q.APIApiFolder.clone(db),
		APIParametersHeader:     q.APIParametersHeader.clone(db),
		APIParametersQuery:      q.APIParametersQuery.clone(db),
		APIRequestBodyParameter: q.APIRequestBodyParameter.clone(db),
		APIRequestBodyRaw:       q.APIRequestBodyRaw.clone(db),
		APIResponseInfo:         q.APIResponseInfo.clone(db),
		APIResponseProperty:     q.APIResponseProperty.clone(db),
		SysOrganizeTeam:         q.SysOrganizeTeam.clone(db),
		SysProject:              q.SysProject.clone(db),
		SysTeam:                 q.SysTeam.clone(db),
		SysUser:                 q.SysUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		APIApiDetail:            q.APIApiDetail.replaceDB(db),
		APIApiFolder:            q.APIApiFolder.replaceDB(db),
		APIParametersHeader:     q.APIParametersHeader.replaceDB(db),
		APIParametersQuery:      q.APIParametersQuery.replaceDB(db),
		APIRequestBodyParameter: q.APIRequestBodyParameter.replaceDB(db),
		APIRequestBodyRaw:       q.APIRequestBodyRaw.replaceDB(db),
		APIResponseInfo:         q.APIResponseInfo.replaceDB(db),
		APIResponseProperty:     q.APIResponseProperty.replaceDB(db),
		SysOrganizeTeam:         q.SysOrganizeTeam.replaceDB(db),
		SysProject:              q.SysProject.replaceDB(db),
		SysTeam:                 q.SysTeam.replaceDB(db),
		SysUser:                 q.SysUser.replaceDB(db),
	}
}

type queryCtx struct {
	APIApiDetail            IAPIApiDetailDo
	APIApiFolder            IAPIApiFolderDo
	APIParametersHeader     IAPIParametersHeaderDo
	APIParametersQuery      IAPIParametersQueryDo
	APIRequestBodyParameter IAPIRequestBodyParameterDo
	APIRequestBodyRaw       IAPIRequestBodyRawDo
	APIResponseInfo         IAPIResponseInfoDo
	APIResponseProperty     IAPIResponsePropertyDo
	SysOrganizeTeam         ISysOrganizeTeamDo
	SysProject              ISysProjectDo
	SysTeam                 ISysTeamDo
	SysUser                 ISysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		APIApiDetail:            q.APIApiDetail.WithContext(ctx),
		APIApiFolder:            q.APIApiFolder.WithContext(ctx),
		APIParametersHeader:     q.APIParametersHeader.WithContext(ctx),
		APIParametersQuery:      q.APIParametersQuery.WithContext(ctx),
		APIRequestBodyParameter: q.APIRequestBodyParameter.WithContext(ctx),
		APIRequestBodyRaw:       q.APIRequestBodyRaw.WithContext(ctx),
		APIResponseInfo:         q.APIResponseInfo.WithContext(ctx),
		APIResponseProperty:     q.APIResponseProperty.WithContext(ctx),
		SysOrganizeTeam:         q.SysOrganizeTeam.WithContext(ctx),
		SysProject:              q.SysProject.WithContext(ctx),
		SysTeam:                 q.SysTeam.WithContext(ctx),
		SysUser:                 q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
