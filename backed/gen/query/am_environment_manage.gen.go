// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAmEnvironmentManage(db *gorm.DB, opts ...gen.DOOption) amEnvironmentManage {
	_amEnvironmentManage := amEnvironmentManage{}

	_amEnvironmentManage.amEnvironmentManageDo.UseDB(db, opts...)
	_amEnvironmentManage.amEnvironmentManageDo.UseModel(&model.AmEnvironmentManage{})

	tableName := _amEnvironmentManage.amEnvironmentManageDo.TableName()
	_amEnvironmentManage.ALL = field.NewAsterisk(tableName)
	_amEnvironmentManage.ID = field.NewInt64(tableName, "id")
	_amEnvironmentManage.GlobalParameter = field.NewString(tableName, "global_parameter")
	_amEnvironmentManage.GlobalVariable = field.NewString(tableName, "global_variable")
	_amEnvironmentManage.KeyStores = field.NewString(tableName, "key_stores")
	_amEnvironmentManage.EnvironmentSettings = field.NewString(tableName, "environment_settings")
	_amEnvironmentManage.LocalMock = field.NewString(tableName, "local_mock")
	_amEnvironmentManage.CloudMock = field.NewString(tableName, "cloud_mock")
	_amEnvironmentManage.SelfHostMock = field.NewString(tableName, "self_host_mock")
	_amEnvironmentManage.IsDeleted = field.NewBool(tableName, "is_deleted")
	_amEnvironmentManage.CreateBy = field.NewInt64(tableName, "create_by")
	_amEnvironmentManage.CreateTime = field.NewTime(tableName, "create_time")
	_amEnvironmentManage.UpdateBy = field.NewInt64(tableName, "update_by")
	_amEnvironmentManage.UpdateTime = field.NewTime(tableName, "update_time")
	_amEnvironmentManage.CreateByName = field.NewString(tableName, "create_by_name")
	_amEnvironmentManage.UpdateByName = field.NewString(tableName, "update_by_name")
	_amEnvironmentManage.ProjectID = field.NewInt64(tableName, "project_id")

	_amEnvironmentManage.fillFieldMap()

	return _amEnvironmentManage
}

type amEnvironmentManage struct {
	amEnvironmentManageDo amEnvironmentManageDo

	ALL                 field.Asterisk
	ID                  field.Int64
	GlobalParameter     field.String // 全局参数
	GlobalVariable      field.String
	KeyStores           field.String
	EnvironmentSettings field.String
	LocalMock           field.String
	CloudMock           field.String
	SelfHostMock        field.String
	IsDeleted           field.Bool
	CreateBy            field.Int64
	CreateTime          field.Time
	UpdateBy            field.Int64
	UpdateTime          field.Time
	CreateByName        field.String
	UpdateByName        field.String
	ProjectID           field.Int64

	fieldMap map[string]field.Expr
}

func (a amEnvironmentManage) Table(newTableName string) *amEnvironmentManage {
	a.amEnvironmentManageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a amEnvironmentManage) As(alias string) *amEnvironmentManage {
	a.amEnvironmentManageDo.DO = *(a.amEnvironmentManageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *amEnvironmentManage) updateTableName(table string) *amEnvironmentManage {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.GlobalParameter = field.NewString(table, "global_parameter")
	a.GlobalVariable = field.NewString(table, "global_variable")
	a.KeyStores = field.NewString(table, "key_stores")
	a.EnvironmentSettings = field.NewString(table, "environment_settings")
	a.LocalMock = field.NewString(table, "local_mock")
	a.CloudMock = field.NewString(table, "cloud_mock")
	a.SelfHostMock = field.NewString(table, "self_host_mock")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.CreateBy = field.NewInt64(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateBy = field.NewInt64(table, "update_by")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.CreateByName = field.NewString(table, "create_by_name")
	a.UpdateByName = field.NewString(table, "update_by_name")
	a.ProjectID = field.NewInt64(table, "project_id")

	a.fillFieldMap()

	return a
}

func (a *amEnvironmentManage) WithContext(ctx context.Context) IAmEnvironmentManageDo {
	return a.amEnvironmentManageDo.WithContext(ctx)
}

func (a amEnvironmentManage) TableName() string { return a.amEnvironmentManageDo.TableName() }

func (a amEnvironmentManage) Alias() string { return a.amEnvironmentManageDo.Alias() }

func (a amEnvironmentManage) Columns(cols ...field.Expr) gen.Columns {
	return a.amEnvironmentManageDo.Columns(cols...)
}

func (a *amEnvironmentManage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *amEnvironmentManage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["global_parameter"] = a.GlobalParameter
	a.fieldMap["global_variable"] = a.GlobalVariable
	a.fieldMap["key_stores"] = a.KeyStores
	a.fieldMap["environment_settings"] = a.EnvironmentSettings
	a.fieldMap["local_mock"] = a.LocalMock
	a.fieldMap["cloud_mock"] = a.CloudMock
	a.fieldMap["self_host_mock"] = a.SelfHostMock
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_by"] = a.UpdateBy
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["create_by_name"] = a.CreateByName
	a.fieldMap["update_by_name"] = a.UpdateByName
	a.fieldMap["project_id"] = a.ProjectID
}

func (a amEnvironmentManage) clone(db *gorm.DB) amEnvironmentManage {
	a.amEnvironmentManageDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a amEnvironmentManage) replaceDB(db *gorm.DB) amEnvironmentManage {
	a.amEnvironmentManageDo.ReplaceDB(db)
	return a
}

type amEnvironmentManageDo struct{ gen.DO }

type IAmEnvironmentManageDo interface {
	gen.SubQuery
	Debug() IAmEnvironmentManageDo
	WithContext(ctx context.Context) IAmEnvironmentManageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAmEnvironmentManageDo
	WriteDB() IAmEnvironmentManageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAmEnvironmentManageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAmEnvironmentManageDo
	Not(conds ...gen.Condition) IAmEnvironmentManageDo
	Or(conds ...gen.Condition) IAmEnvironmentManageDo
	Select(conds ...field.Expr) IAmEnvironmentManageDo
	Where(conds ...gen.Condition) IAmEnvironmentManageDo
	Order(conds ...field.Expr) IAmEnvironmentManageDo
	Distinct(cols ...field.Expr) IAmEnvironmentManageDo
	Omit(cols ...field.Expr) IAmEnvironmentManageDo
	Join(table schema.Tabler, on ...field.Expr) IAmEnvironmentManageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAmEnvironmentManageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAmEnvironmentManageDo
	Group(cols ...field.Expr) IAmEnvironmentManageDo
	Having(conds ...gen.Condition) IAmEnvironmentManageDo
	Limit(limit int) IAmEnvironmentManageDo
	Offset(offset int) IAmEnvironmentManageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAmEnvironmentManageDo
	Unscoped() IAmEnvironmentManageDo
	Create(values ...*model.AmEnvironmentManage) error
	CreateInBatches(values []*model.AmEnvironmentManage, batchSize int) error
	Save(values ...*model.AmEnvironmentManage) error
	First() (*model.AmEnvironmentManage, error)
	Take() (*model.AmEnvironmentManage, error)
	Last() (*model.AmEnvironmentManage, error)
	Find() ([]*model.AmEnvironmentManage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmEnvironmentManage, err error)
	FindInBatches(result *[]*model.AmEnvironmentManage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AmEnvironmentManage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAmEnvironmentManageDo
	Assign(attrs ...field.AssignExpr) IAmEnvironmentManageDo
	Joins(fields ...field.RelationField) IAmEnvironmentManageDo
	Preload(fields ...field.RelationField) IAmEnvironmentManageDo
	FirstOrInit() (*model.AmEnvironmentManage, error)
	FirstOrCreate() (*model.AmEnvironmentManage, error)
	FindByPage(offset int, limit int) (result []*model.AmEnvironmentManage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAmEnvironmentManageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a amEnvironmentManageDo) Debug() IAmEnvironmentManageDo {
	return a.withDO(a.DO.Debug())
}

func (a amEnvironmentManageDo) WithContext(ctx context.Context) IAmEnvironmentManageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a amEnvironmentManageDo) ReadDB() IAmEnvironmentManageDo {
	return a.Clauses(dbresolver.Read)
}

func (a amEnvironmentManageDo) WriteDB() IAmEnvironmentManageDo {
	return a.Clauses(dbresolver.Write)
}

func (a amEnvironmentManageDo) Session(config *gorm.Session) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Session(config))
}

func (a amEnvironmentManageDo) Clauses(conds ...clause.Expression) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a amEnvironmentManageDo) Returning(value interface{}, columns ...string) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a amEnvironmentManageDo) Not(conds ...gen.Condition) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a amEnvironmentManageDo) Or(conds ...gen.Condition) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a amEnvironmentManageDo) Select(conds ...field.Expr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a amEnvironmentManageDo) Where(conds ...gen.Condition) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a amEnvironmentManageDo) Order(conds ...field.Expr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a amEnvironmentManageDo) Distinct(cols ...field.Expr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a amEnvironmentManageDo) Omit(cols ...field.Expr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a amEnvironmentManageDo) Join(table schema.Tabler, on ...field.Expr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a amEnvironmentManageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a amEnvironmentManageDo) RightJoin(table schema.Tabler, on ...field.Expr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a amEnvironmentManageDo) Group(cols ...field.Expr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a amEnvironmentManageDo) Having(conds ...gen.Condition) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a amEnvironmentManageDo) Limit(limit int) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a amEnvironmentManageDo) Offset(offset int) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a amEnvironmentManageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a amEnvironmentManageDo) Unscoped() IAmEnvironmentManageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a amEnvironmentManageDo) Create(values ...*model.AmEnvironmentManage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a amEnvironmentManageDo) CreateInBatches(values []*model.AmEnvironmentManage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a amEnvironmentManageDo) Save(values ...*model.AmEnvironmentManage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a amEnvironmentManageDo) First() (*model.AmEnvironmentManage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmEnvironmentManage), nil
	}
}

func (a amEnvironmentManageDo) Take() (*model.AmEnvironmentManage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmEnvironmentManage), nil
	}
}

func (a amEnvironmentManageDo) Last() (*model.AmEnvironmentManage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmEnvironmentManage), nil
	}
}

func (a amEnvironmentManageDo) Find() ([]*model.AmEnvironmentManage, error) {
	result, err := a.DO.Find()
	return result.([]*model.AmEnvironmentManage), err
}

func (a amEnvironmentManageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AmEnvironmentManage, err error) {
	buf := make([]*model.AmEnvironmentManage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a amEnvironmentManageDo) FindInBatches(result *[]*model.AmEnvironmentManage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a amEnvironmentManageDo) Attrs(attrs ...field.AssignExpr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a amEnvironmentManageDo) Assign(attrs ...field.AssignExpr) IAmEnvironmentManageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a amEnvironmentManageDo) Joins(fields ...field.RelationField) IAmEnvironmentManageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a amEnvironmentManageDo) Preload(fields ...field.RelationField) IAmEnvironmentManageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a amEnvironmentManageDo) FirstOrInit() (*model.AmEnvironmentManage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmEnvironmentManage), nil
	}
}

func (a amEnvironmentManageDo) FirstOrCreate() (*model.AmEnvironmentManage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AmEnvironmentManage), nil
	}
}

func (a amEnvironmentManageDo) FindByPage(offset int, limit int) (result []*model.AmEnvironmentManage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a amEnvironmentManageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a amEnvironmentManageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a amEnvironmentManageDo) Delete(models ...*model.AmEnvironmentManage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *amEnvironmentManageDo) withDO(do gen.Dao) *amEnvironmentManageDo {
	a.DO = *do.(*gen.DO)
	return a
}
