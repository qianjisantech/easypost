// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAPIResponseInfo(db *gorm.DB, opts ...gen.DOOption) aPIResponseInfo {
	_aPIResponseInfo := aPIResponseInfo{}

	_aPIResponseInfo.aPIResponseInfoDo.UseDB(db, opts...)
	_aPIResponseInfo.aPIResponseInfoDo.UseModel(&model.APIResponseInfo{})

	tableName := _aPIResponseInfo.aPIResponseInfoDo.TableName()
	_aPIResponseInfo.ALL = field.NewAsterisk(tableName)
	_aPIResponseInfo.ID = field.NewInt64(tableName, "id")
	_aPIResponseInfo.ResponseCode = field.NewInt32(tableName, "response_code")
	_aPIResponseInfo.ResponseName = field.NewString(tableName, "response_name")
	_aPIResponseInfo.ContentType = field.NewString(tableName, "content_type")
	_aPIResponseInfo.APIID = field.NewInt64(tableName, "api_id")
	_aPIResponseInfo.CreateBy = field.NewString(tableName, "create_by")
	_aPIResponseInfo.CreateTime = field.NewTime(tableName, "create_time")
	_aPIResponseInfo.JSONSchemaType = field.NewString(tableName, "json_schema_type")

	_aPIResponseInfo.fillFieldMap()

	return _aPIResponseInfo
}

type aPIResponseInfo struct {
	aPIResponseInfoDo aPIResponseInfoDo

	ALL            field.Asterisk
	ID             field.Int64
	ResponseCode   field.Int32
	ResponseName   field.String
	ContentType    field.String
	APIID          field.Int64
	CreateBy       field.String
	CreateTime     field.Time
	JSONSchemaType field.String

	fieldMap map[string]field.Expr
}

func (a aPIResponseInfo) Table(newTableName string) *aPIResponseInfo {
	a.aPIResponseInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIResponseInfo) As(alias string) *aPIResponseInfo {
	a.aPIResponseInfoDo.DO = *(a.aPIResponseInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIResponseInfo) updateTableName(table string) *aPIResponseInfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ResponseCode = field.NewInt32(table, "response_code")
	a.ResponseName = field.NewString(table, "response_name")
	a.ContentType = field.NewString(table, "content_type")
	a.APIID = field.NewInt64(table, "api_id")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.JSONSchemaType = field.NewString(table, "json_schema_type")

	a.fillFieldMap()

	return a
}

func (a *aPIResponseInfo) WithContext(ctx context.Context) IAPIResponseInfoDo {
	return a.aPIResponseInfoDo.WithContext(ctx)
}

func (a aPIResponseInfo) TableName() string { return a.aPIResponseInfoDo.TableName() }

func (a aPIResponseInfo) Alias() string { return a.aPIResponseInfoDo.Alias() }

func (a aPIResponseInfo) Columns(cols ...field.Expr) gen.Columns {
	return a.aPIResponseInfoDo.Columns(cols...)
}

func (a *aPIResponseInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIResponseInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["response_code"] = a.ResponseCode
	a.fieldMap["response_name"] = a.ResponseName
	a.fieldMap["content_type"] = a.ContentType
	a.fieldMap["api_id"] = a.APIID
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["json_schema_type"] = a.JSONSchemaType
}

func (a aPIResponseInfo) clone(db *gorm.DB) aPIResponseInfo {
	a.aPIResponseInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIResponseInfo) replaceDB(db *gorm.DB) aPIResponseInfo {
	a.aPIResponseInfoDo.ReplaceDB(db)
	return a
}

type aPIResponseInfoDo struct{ gen.DO }

type IAPIResponseInfoDo interface {
	gen.SubQuery
	Debug() IAPIResponseInfoDo
	WithContext(ctx context.Context) IAPIResponseInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIResponseInfoDo
	WriteDB() IAPIResponseInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIResponseInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIResponseInfoDo
	Not(conds ...gen.Condition) IAPIResponseInfoDo
	Or(conds ...gen.Condition) IAPIResponseInfoDo
	Select(conds ...field.Expr) IAPIResponseInfoDo
	Where(conds ...gen.Condition) IAPIResponseInfoDo
	Order(conds ...field.Expr) IAPIResponseInfoDo
	Distinct(cols ...field.Expr) IAPIResponseInfoDo
	Omit(cols ...field.Expr) IAPIResponseInfoDo
	Join(table schema.Tabler, on ...field.Expr) IAPIResponseInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIResponseInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIResponseInfoDo
	Group(cols ...field.Expr) IAPIResponseInfoDo
	Having(conds ...gen.Condition) IAPIResponseInfoDo
	Limit(limit int) IAPIResponseInfoDo
	Offset(offset int) IAPIResponseInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIResponseInfoDo
	Unscoped() IAPIResponseInfoDo
	Create(values ...*model.APIResponseInfo) error
	CreateInBatches(values []*model.APIResponseInfo, batchSize int) error
	Save(values ...*model.APIResponseInfo) error
	First() (*model.APIResponseInfo, error)
	Take() (*model.APIResponseInfo, error)
	Last() (*model.APIResponseInfo, error)
	Find() ([]*model.APIResponseInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIResponseInfo, err error)
	FindInBatches(result *[]*model.APIResponseInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIResponseInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIResponseInfoDo
	Assign(attrs ...field.AssignExpr) IAPIResponseInfoDo
	Joins(fields ...field.RelationField) IAPIResponseInfoDo
	Preload(fields ...field.RelationField) IAPIResponseInfoDo
	FirstOrInit() (*model.APIResponseInfo, error)
	FirstOrCreate() (*model.APIResponseInfo, error)
	FindByPage(offset int, limit int) (result []*model.APIResponseInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIResponseInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIResponseInfoDo) Debug() IAPIResponseInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIResponseInfoDo) WithContext(ctx context.Context) IAPIResponseInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIResponseInfoDo) ReadDB() IAPIResponseInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIResponseInfoDo) WriteDB() IAPIResponseInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIResponseInfoDo) Session(config *gorm.Session) IAPIResponseInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIResponseInfoDo) Clauses(conds ...clause.Expression) IAPIResponseInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIResponseInfoDo) Returning(value interface{}, columns ...string) IAPIResponseInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIResponseInfoDo) Not(conds ...gen.Condition) IAPIResponseInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIResponseInfoDo) Or(conds ...gen.Condition) IAPIResponseInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIResponseInfoDo) Select(conds ...field.Expr) IAPIResponseInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIResponseInfoDo) Where(conds ...gen.Condition) IAPIResponseInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIResponseInfoDo) Order(conds ...field.Expr) IAPIResponseInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIResponseInfoDo) Distinct(cols ...field.Expr) IAPIResponseInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIResponseInfoDo) Omit(cols ...field.Expr) IAPIResponseInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIResponseInfoDo) Join(table schema.Tabler, on ...field.Expr) IAPIResponseInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIResponseInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIResponseInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIResponseInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIResponseInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIResponseInfoDo) Group(cols ...field.Expr) IAPIResponseInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIResponseInfoDo) Having(conds ...gen.Condition) IAPIResponseInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIResponseInfoDo) Limit(limit int) IAPIResponseInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIResponseInfoDo) Offset(offset int) IAPIResponseInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIResponseInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIResponseInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIResponseInfoDo) Unscoped() IAPIResponseInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIResponseInfoDo) Create(values ...*model.APIResponseInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIResponseInfoDo) CreateInBatches(values []*model.APIResponseInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIResponseInfoDo) Save(values ...*model.APIResponseInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIResponseInfoDo) First() (*model.APIResponseInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIResponseInfo), nil
	}
}

func (a aPIResponseInfoDo) Take() (*model.APIResponseInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIResponseInfo), nil
	}
}

func (a aPIResponseInfoDo) Last() (*model.APIResponseInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIResponseInfo), nil
	}
}

func (a aPIResponseInfoDo) Find() ([]*model.APIResponseInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIResponseInfo), err
}

func (a aPIResponseInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIResponseInfo, err error) {
	buf := make([]*model.APIResponseInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIResponseInfoDo) FindInBatches(result *[]*model.APIResponseInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIResponseInfoDo) Attrs(attrs ...field.AssignExpr) IAPIResponseInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIResponseInfoDo) Assign(attrs ...field.AssignExpr) IAPIResponseInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIResponseInfoDo) Joins(fields ...field.RelationField) IAPIResponseInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIResponseInfoDo) Preload(fields ...field.RelationField) IAPIResponseInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIResponseInfoDo) FirstOrInit() (*model.APIResponseInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIResponseInfo), nil
	}
}

func (a aPIResponseInfoDo) FirstOrCreate() (*model.APIResponseInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIResponseInfo), nil
	}
}

func (a aPIResponseInfoDo) FindByPage(offset int, limit int) (result []*model.APIResponseInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIResponseInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIResponseInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIResponseInfoDo) Delete(models ...*model.APIResponseInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIResponseInfoDo) withDO(do gen.Dao) *aPIResponseInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
