// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backed/gen/model"
)

func newAPIRequestBodyParameter(db *gorm.DB, opts ...gen.DOOption) aPIRequestBodyParameter {
	_aPIRequestBodyParameter := aPIRequestBodyParameter{}

	_aPIRequestBodyParameter.aPIRequestBodyParameterDo.UseDB(db, opts...)
	_aPIRequestBodyParameter.aPIRequestBodyParameterDo.UseModel(&model.APIRequestBodyParameter{})

	tableName := _aPIRequestBodyParameter.aPIRequestBodyParameterDo.TableName()
	_aPIRequestBodyParameter.ALL = field.NewAsterisk(tableName)
	_aPIRequestBodyParameter.ID = field.NewInt64(tableName, "id")
	_aPIRequestBodyParameter.Type = field.NewString(tableName, "type")
	_aPIRequestBodyParameter.Example = field.NewString(tableName, "example")
	_aPIRequestBodyParameter.CreateBy = field.NewString(tableName, "create_by")
	_aPIRequestBodyParameter.CreateTime = field.NewTime(tableName, "create_time")
	_aPIRequestBodyParameter.APIID = field.NewInt64(tableName, "api_id")

	_aPIRequestBodyParameter.fillFieldMap()

	return _aPIRequestBodyParameter
}

type aPIRequestBodyParameter struct {
	aPIRequestBodyParameterDo aPIRequestBodyParameterDo

	ALL        field.Asterisk
	ID         field.Int64
	Type       field.String
	Example    field.String
	CreateBy   field.String
	CreateTime field.Time
	APIID      field.Int64

	fieldMap map[string]field.Expr
}

func (a aPIRequestBodyParameter) Table(newTableName string) *aPIRequestBodyParameter {
	a.aPIRequestBodyParameterDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIRequestBodyParameter) As(alias string) *aPIRequestBodyParameter {
	a.aPIRequestBodyParameterDo.DO = *(a.aPIRequestBodyParameterDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIRequestBodyParameter) updateTableName(table string) *aPIRequestBodyParameter {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Type = field.NewString(table, "type")
	a.Example = field.NewString(table, "example")
	a.CreateBy = field.NewString(table, "create_by")
	a.CreateTime = field.NewTime(table, "create_time")
	a.APIID = field.NewInt64(table, "api_id")

	a.fillFieldMap()

	return a
}

func (a *aPIRequestBodyParameter) WithContext(ctx context.Context) IAPIRequestBodyParameterDo {
	return a.aPIRequestBodyParameterDo.WithContext(ctx)
}

func (a aPIRequestBodyParameter) TableName() string { return a.aPIRequestBodyParameterDo.TableName() }

func (a aPIRequestBodyParameter) Alias() string { return a.aPIRequestBodyParameterDo.Alias() }

func (a aPIRequestBodyParameter) Columns(cols ...field.Expr) gen.Columns {
	return a.aPIRequestBodyParameterDo.Columns(cols...)
}

func (a *aPIRequestBodyParameter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIRequestBodyParameter) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["type"] = a.Type
	a.fieldMap["example"] = a.Example
	a.fieldMap["create_by"] = a.CreateBy
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["api_id"] = a.APIID
}

func (a aPIRequestBodyParameter) clone(db *gorm.DB) aPIRequestBodyParameter {
	a.aPIRequestBodyParameterDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIRequestBodyParameter) replaceDB(db *gorm.DB) aPIRequestBodyParameter {
	a.aPIRequestBodyParameterDo.ReplaceDB(db)
	return a
}

type aPIRequestBodyParameterDo struct{ gen.DO }

type IAPIRequestBodyParameterDo interface {
	gen.SubQuery
	Debug() IAPIRequestBodyParameterDo
	WithContext(ctx context.Context) IAPIRequestBodyParameterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIRequestBodyParameterDo
	WriteDB() IAPIRequestBodyParameterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIRequestBodyParameterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIRequestBodyParameterDo
	Not(conds ...gen.Condition) IAPIRequestBodyParameterDo
	Or(conds ...gen.Condition) IAPIRequestBodyParameterDo
	Select(conds ...field.Expr) IAPIRequestBodyParameterDo
	Where(conds ...gen.Condition) IAPIRequestBodyParameterDo
	Order(conds ...field.Expr) IAPIRequestBodyParameterDo
	Distinct(cols ...field.Expr) IAPIRequestBodyParameterDo
	Omit(cols ...field.Expr) IAPIRequestBodyParameterDo
	Join(table schema.Tabler, on ...field.Expr) IAPIRequestBodyParameterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIRequestBodyParameterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIRequestBodyParameterDo
	Group(cols ...field.Expr) IAPIRequestBodyParameterDo
	Having(conds ...gen.Condition) IAPIRequestBodyParameterDo
	Limit(limit int) IAPIRequestBodyParameterDo
	Offset(offset int) IAPIRequestBodyParameterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIRequestBodyParameterDo
	Unscoped() IAPIRequestBodyParameterDo
	Create(values ...*model.APIRequestBodyParameter) error
	CreateInBatches(values []*model.APIRequestBodyParameter, batchSize int) error
	Save(values ...*model.APIRequestBodyParameter) error
	First() (*model.APIRequestBodyParameter, error)
	Take() (*model.APIRequestBodyParameter, error)
	Last() (*model.APIRequestBodyParameter, error)
	Find() ([]*model.APIRequestBodyParameter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIRequestBodyParameter, err error)
	FindInBatches(result *[]*model.APIRequestBodyParameter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIRequestBodyParameter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIRequestBodyParameterDo
	Assign(attrs ...field.AssignExpr) IAPIRequestBodyParameterDo
	Joins(fields ...field.RelationField) IAPIRequestBodyParameterDo
	Preload(fields ...field.RelationField) IAPIRequestBodyParameterDo
	FirstOrInit() (*model.APIRequestBodyParameter, error)
	FirstOrCreate() (*model.APIRequestBodyParameter, error)
	FindByPage(offset int, limit int) (result []*model.APIRequestBodyParameter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIRequestBodyParameterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIRequestBodyParameterDo) Debug() IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIRequestBodyParameterDo) WithContext(ctx context.Context) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIRequestBodyParameterDo) ReadDB() IAPIRequestBodyParameterDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIRequestBodyParameterDo) WriteDB() IAPIRequestBodyParameterDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIRequestBodyParameterDo) Session(config *gorm.Session) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIRequestBodyParameterDo) Clauses(conds ...clause.Expression) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIRequestBodyParameterDo) Returning(value interface{}, columns ...string) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIRequestBodyParameterDo) Not(conds ...gen.Condition) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIRequestBodyParameterDo) Or(conds ...gen.Condition) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIRequestBodyParameterDo) Select(conds ...field.Expr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIRequestBodyParameterDo) Where(conds ...gen.Condition) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIRequestBodyParameterDo) Order(conds ...field.Expr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIRequestBodyParameterDo) Distinct(cols ...field.Expr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIRequestBodyParameterDo) Omit(cols ...field.Expr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIRequestBodyParameterDo) Join(table schema.Tabler, on ...field.Expr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIRequestBodyParameterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIRequestBodyParameterDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIRequestBodyParameterDo) Group(cols ...field.Expr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIRequestBodyParameterDo) Having(conds ...gen.Condition) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIRequestBodyParameterDo) Limit(limit int) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIRequestBodyParameterDo) Offset(offset int) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIRequestBodyParameterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIRequestBodyParameterDo) Unscoped() IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIRequestBodyParameterDo) Create(values ...*model.APIRequestBodyParameter) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIRequestBodyParameterDo) CreateInBatches(values []*model.APIRequestBodyParameter, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIRequestBodyParameterDo) Save(values ...*model.APIRequestBodyParameter) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIRequestBodyParameterDo) First() (*model.APIRequestBodyParameter, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyParameter), nil
	}
}

func (a aPIRequestBodyParameterDo) Take() (*model.APIRequestBodyParameter, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyParameter), nil
	}
}

func (a aPIRequestBodyParameterDo) Last() (*model.APIRequestBodyParameter, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyParameter), nil
	}
}

func (a aPIRequestBodyParameterDo) Find() ([]*model.APIRequestBodyParameter, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIRequestBodyParameter), err
}

func (a aPIRequestBodyParameterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIRequestBodyParameter, err error) {
	buf := make([]*model.APIRequestBodyParameter, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIRequestBodyParameterDo) FindInBatches(result *[]*model.APIRequestBodyParameter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIRequestBodyParameterDo) Attrs(attrs ...field.AssignExpr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIRequestBodyParameterDo) Assign(attrs ...field.AssignExpr) IAPIRequestBodyParameterDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIRequestBodyParameterDo) Joins(fields ...field.RelationField) IAPIRequestBodyParameterDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIRequestBodyParameterDo) Preload(fields ...field.RelationField) IAPIRequestBodyParameterDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIRequestBodyParameterDo) FirstOrInit() (*model.APIRequestBodyParameter, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyParameter), nil
	}
}

func (a aPIRequestBodyParameterDo) FirstOrCreate() (*model.APIRequestBodyParameter, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIRequestBodyParameter), nil
	}
}

func (a aPIRequestBodyParameterDo) FindByPage(offset int, limit int) (result []*model.APIRequestBodyParameter, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIRequestBodyParameterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIRequestBodyParameterDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIRequestBodyParameterDo) Delete(models ...*model.APIRequestBodyParameter) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIRequestBodyParameterDo) withDO(do gen.Dao) *aPIRequestBodyParameterDo {
	a.DO = *do.(*gen.DO)
	return a
}
